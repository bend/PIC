gplink-0.14.1 (Jan 11 2012)
Copyright (c) 1998-2011 gputils project
Listing File Generated: 3-20-2012  12:28:31
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Mar 13 2012) (UNIX)
                                           ; This file was generated Tue Mar 20 09:33:09 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _DisplayWORD
                                           	global _DisplayString
                                           	global _strlcpy
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _ultoa
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           
                                           udata_test_0	udata
                                           _DisplayWORD_WDigit_1_1	res	6
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_test__main	code
                                           _main:
                                           ;	.line	24; test.c	LED0_TRIS = 0; //configure 1st led pin as output (yellow)
000c06   909a     bcf     0x9a, 0, 0       	BCF	_TRISJbits, 0
                                           ;	.line	25; test.c	LED1_TRIS = 0; //configure 2nd led pin as output (red)
000c08   929a     bcf     0x9a, 0x1, 0     	BCF	_TRISJbits, 1
                                           ;	.line	26; test.c	LED2_TRIS = 0; //configure 3rd led pin as output (red)
000c0a   949a     bcf     0x9a, 0x2, 0     	BCF	_TRISJbits, 2
                                           ;	.line	28; test.c	BUTTON0_TRIS = 1; //configure button0 as input
000c0c   8693     bsf     0x93, 0x3, 0     	BSF	_TRISBbits, 3
                                           ;	.line	30; test.c	LCDInit();
000c0e   ec37     call    0x26e, 0         	CALL	_LCDInit
000c10   f001
                                           ;	.line	31; test.c	DelayMs(100);
000c12   0e10     movlw   0x10             	MOVLW	0x10
000c14   6e00     movwf   0, 0             	MOVWF	r0x00
000c16   0e98     movlw   0x98             	MOVLW	0x98
000c18   6e01     movwf   0x1, 0           	MOVWF	r0x01
000c1a   0e02     movlw   0x2              	MOVLW	0x02
000c1c   6e02     movwf   0x2, 0           	MOVWF	r0x02
000c1e   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00105_DS_:
000c20   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
000c22   f004
000c24   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
000c26   f005
000c28   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
000c2a   f006
000c2c   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
000c2e   f007
000c30   0eff     movlw   0xff             	MOVLW	0xff
000c32   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
000c34   0eff     movlw   0xff             	MOVLW	0xff
000c36   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
000c38   0eff     movlw   0xff             	MOVLW	0xff
000c3a   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
000c3c   0eff     movlw   0xff             	MOVLW	0xff
000c3e   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000c40   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000c42   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
000c44   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
000c46   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
000c48   e1eb     bnz     0xc20            	BNZ	_00105_DS_
                                           ;	.line	34; test.c	EWRPTL = LOW(w);
000c4a   0e05     movlw   0x5              	MOVLW	0x05
000c4c   010e     movlb   0xe              	BANKSEL	_EWRPTL
000c4e   6fe2     movwf   0xe2, 0x1        	MOVWF	_EWRPTL, B
000c50   010e     movlb   0xe              	BANKSEL	_EWRPTH
                                           ;	.line	35; test.c	EWRPTH = HIGH(w);
000c52   6be3     clrf    0xe3, 0x1        	CLRF	_EWRPTH, B
                                           ;	.line	36; test.c	EDATA='1';
000c54   0e31     movlw   0x31             	MOVLW	0x31
000c56   6e61     movwf   0x61, 0          	MOVWF	_EDATA
                                           ;	.line	37; test.c	EDATA='2';
000c58   0e32     movlw   0x32             	MOVLW	0x32
000c5a   6e61     movwf   0x61, 0          	MOVWF	_EDATA
                                           ;	.line	38; test.c	EDATA='3';
000c5c   0e33     movlw   0x33             	MOVLW	0x33
000c5e   6e61     movwf   0x61, 0          	MOVWF	_EDATA
                                           ;	.line	39; test.c	EDATA='4';
000c60   0e34     movlw   0x34             	MOVLW	0x34
000c62   6e61     movwf   0x61, 0          	MOVWF	_EDATA
                                           ;	.line	40; test.c	EDATA='5';
000c64   0e35     movlw   0x35             	MOVLW	0x35
000c66   6e61     movwf   0x61, 0          	MOVWF	_EDATA
                                           ;	.line	41; test.c	EDATA=0;
000c68   6a61     clrf    0x61, 0          	CLRF	_EDATA
                                           ;	.line	45; test.c	DisplayString (0,"Test of Ethernet buffer"); //first arg is start position
000c6a   0e00     movlw   0                	MOVLW	UPPER(__str_0)
000c6c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c6e   0e09     movlw   0x9              	MOVLW	HIGH(__str_0)
000c70   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c72   0ea0     movlw   0xa0             	MOVLW	LOW(__str_0)
000c74   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c76   0e00     movlw   0                	MOVLW	0x00
000c78   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c7a   ec85     call    0xd0a, 0         	CALL	_DisplayString
000c7c   f006
000c7e   0e04     movlw   0x4              	MOVLW	0x04
000c80   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	48; test.c	DisplayString (16, "      Push But1");    
000c82   0e00     movlw   0                	MOVLW	UPPER(__str_1)
000c84   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c86   0e09     movlw   0x9              	MOVLW	HIGH(__str_1)
000c88   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c8a   0eb8     movlw   0xb8             	MOVLW	LOW(__str_1)
000c8c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c8e   0e10     movlw   0x10             	MOVLW	0x10
000c90   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c92   ec85     call    0xd0a, 0         	CALL	_DisplayString
000c94   f006
000c96   0e04     movlw   0x4              	MOVLW	0x04
000c98   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	50; test.c	ERDPTL = 5;
000c9a   0e05     movlw   0x5              	MOVLW	0x05
000c9c   6e7a     movwf   0x7a, 0          	MOVWF	_ERDPTL
                                           ;	.line	51; test.c	ERDPTH = 0;
000c9e   6a7b     clrf    0x7b, 0          	CLRF	_ERDPTH
                                           ;	.line	53; test.c	for(i = 16; i < 21; i++)
000ca0   0e10     movlw   0x10             	MOVLW	0x10
000ca2   6e00     movwf   0, 0             	MOVWF	r0x00
000ca4   6a01     clrf    0x1, 0           	CLRF	r0x01
                                           _00117_DS_:
000ca6   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000ca8   0f80     addlw   0x80             	ADDLW	0x80
000caa   0f80     addlw   0x80             	ADDLW	0x80
000cac   e102     bnz     0xcb2            	BNZ	_00137_DS_
000cae   0e15     movlw   0x15             	MOVLW	0x15
000cb0   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
                                           _00137_DS_:
000cb2   e210     bc      0xcd4            	BC	_00120_DS_
                                           ;	.line	55; test.c	LCDText[i] =  EDATA;
000cb4   0e00     movlw   0                	MOVLW	LOW(_LCDText)
000cb6   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000cb8   6e02     movwf   0x2, 0           	MOVWF	r0x02
000cba   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
000cbc   2001     addwfc  0x1, 0, 0        	ADDWFC	r0x01, W
000cbe   6e03     movwf   0x3, 0           	MOVWF	r0x03
000cc0   c002     movff   0x2, 0xfe9       	MOVFF	r0x02, FSR0L
000cc2   ffe9
000cc4   c003     movff   0x3, 0xfea       	MOVFF	r0x03, FSR0H
000cc6   ffea
000cc8   cf61     movff   0xf61, 0xfef     	MOVFF	_EDATA, INDF0
000cca   ffef
                                           ;	.line	53; test.c	for(i = 16; i < 21; i++)
000ccc   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000cce   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
000cd0   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
000cd2   d7e9     bra     0xca6            	BRA	_00117_DS_
                                           _00120_DS_:
                                           ;	.line	57; test.c	LCDUpdate();
000cd4   ec02     call    0x4, 0           	CALL	_LCDUpdate
000cd6   f000
                                           _00115_DS_:
                                           ;	.line	61; test.c	if(BUTTON0_IO == 0u) //If Button 0 is pressed
000cd8   b681     btfsc   0x81, 0x3, 0     	BTFSC	_PORTBbits, 3
000cda   d008     bra     0xcec            	BRA	_00112_DS_
                                           ;	.line	62; test.c	LED_PUT(0x07);  //turn on the 3 red leds
000cdc   cf91     movff   0xf91, 0         	MOVFF	_LATJ, r0x00
000cde   f000
000ce0   0ef8     movlw   0xf8             	MOVLW	0xf8
000ce2   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
000ce4   0e07     movlw   0x7              	MOVLW	0x07
000ce6   1000     iorwf   0, 0, 0          	IORWF	r0x00, W
000ce8   6e91     movwf   0x91, 0          	MOVWF	_LATJ
000cea   d002     bra     0xcf0            	BRA	_00131_DS_
                                           _00112_DS_:
                                           ;	.line	64; test.c	LED_PUT(0x00);  //turn them off
000cec   0ef8     movlw   0xf8             	MOVLW	0xf8
000cee   1691     andwf   0x91, 0x1, 0     	ANDWF	_LATJ, F
                                           _00131_DS_:
                                           ;	.line	65; test.c	for(i=0;i<1000;i++);
000cf0   0ee8     movlw   0xe8             	MOVLW	0xe8
000cf2   6e00     movwf   0, 0             	MOVWF	r0x00
000cf4   0e03     movlw   0x3              	MOVLW	0x03
000cf6   6e01     movwf   0x1, 0           	MOVWF	r0x01
                                           _00123_DS_:
000cf8   0eff     movlw   0xff             	MOVLW	0xff
000cfa   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
000cfc   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
000cfe   0601     decf    0x1, 0x1, 0      	DECF	r0x01, F
000d00   5000     movf    0, 0, 0          	MOVF	r0x00, W
000d02   1001     iorwf   0x1, 0, 0        	IORWF	r0x01, W
000d04   e1f9     bnz     0xcf8            	BNZ	_00123_DS_
000d06   d7e8     bra     0xcd8            	BRA	_00115_DS_
000d08   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__strlcpy	code
                                           _strlcpy:
                                           ;	.line	147; test.c	strlcpy(char *dst, const char *src, size_t siz)
0004ca   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0004cc   ffe5
0004ce   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0004d0   ffd9
0004d2   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0004d4   ffe5
0004d6   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0004d8   ffe5
0004da   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0004dc   ffe5
0004de   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
0004e0   ffe5
0004e2   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
0004e4   ffe5
0004e6   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
0004e8   ffe5
0004ea   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
0004ec   ffe5
0004ee   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
0004f0   ffe5
0004f2   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
0004f4   ffe5
0004f6   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
0004f8   ffe5
0004fa   c00a     movff   0xa, 0xfe5       	MOVFF	r0x0a, POSTDEC1
0004fc   ffe5
0004fe   c00b     movff   0xb, 0xfe5       	MOVFF	r0x0b, POSTDEC1
000500   ffe5
000502   c00c     movff   0xc, 0xfe5       	MOVFF	r0x0c, POSTDEC1
000504   ffe5
000506   c00d     movff   0xd, 0xfe5       	MOVFF	r0x0d, POSTDEC1
000508   ffe5
00050a   c00e     movff   0xe, 0xfe5       	MOVFF	r0x0e, POSTDEC1
00050c   ffe5
00050e   c00f     movff   0xf, 0xfe5       	MOVFF	r0x0f, POSTDEC1
000510   ffe5
000512   c010     movff   0x10, 0xfe5      	MOVFF	r0x10, POSTDEC1
000514   ffe5
000516   c011     movff   0x11, 0xfe5      	MOVFF	r0x11, POSTDEC1
000518   ffe5
00051a   c012     movff   0x12, 0xfe5      	MOVFF	r0x12, POSTDEC1
00051c   ffe5
00051e   c013     movff   0x13, 0xfe5      	MOVFF	r0x13, POSTDEC1
000520   ffe5
000522   c014     movff   0x14, 0xfe5      	MOVFF	r0x14, POSTDEC1
000524   ffe5
000526   c015     movff   0x15, 0xfe5      	MOVFF	r0x15, POSTDEC1
000528   ffe5
00052a   0e02     movlw   0x2              	MOVLW	0x02
00052c   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00052e   f000
000530   0e03     movlw   0x3              	MOVLW	0x03
000532   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
000534   f001
000536   0e04     movlw   0x4              	MOVLW	0x04
000538   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
00053a   f002
00053c   0e05     movlw   0x5              	MOVLW	0x05
00053e   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
000540   f003
000542   0e06     movlw   0x6              	MOVLW	0x06
000544   cfdb     movff   0xfdb, 0x4       	MOVFF	PLUSW2, r0x04
000546   f004
000548   0e07     movlw   0x7              	MOVLW	0x07
00054a   cfdb     movff   0xfdb, 0x5       	MOVFF	PLUSW2, r0x05
00054c   f005
00054e   0e08     movlw   0x8              	MOVLW	0x08
000550   cfdb     movff   0xfdb, 0x6       	MOVFF	PLUSW2, r0x06
000552   f006
000554   0e09     movlw   0x9              	MOVLW	0x09
000556   cfdb     movff   0xfdb, 0x7       	MOVFF	PLUSW2, r0x07
000558   f007
                                           ;	.line	149; test.c	char       *d = dst;
00055a   c000     movff   0, 0x8           	MOVFF	r0x00, r0x08
00055c   f008
00055e   c001     movff   0x1, 0x9         	MOVFF	r0x01, r0x09
000560   f009
000562   c002     movff   0x2, 0xa         	MOVFF	r0x02, r0x0a
000564   f00a
                                           ;	.line	150; test.c	const char *s = src;
000566   c003     movff   0x3, 0xb         	MOVFF	r0x03, r0x0b
000568   f00b
00056a   c004     movff   0x4, 0xc         	MOVFF	r0x04, r0x0c
00056c   f00c
00056e   c005     movff   0x5, 0xd         	MOVFF	r0x05, r0x0d
000570   f00d
                                           ;	.line	151; test.c	size_t      n = siz;
000572   c006     movff   0x6, 0xe         	MOVFF	r0x06, r0x0e
000574   f00e
000576   c007     movff   0x7, 0xf         	MOVFF	r0x07, r0x0f
000578   f00f
                                           ;	.line	154; test.c	if (n != 0)
00057a   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
00057c   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
00057e   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
000580   d03e     bra     0x5fe            	BRA	_00176_DS_
                                           ;	.line	156; test.c	while (--n != 0)
000582   c003     movff   0x3, 0x10        	MOVFF	r0x03, r0x10
000584   f010
000586   c004     movff   0x4, 0x11        	MOVFF	r0x04, r0x11
000588   f011
00058a   c005     movff   0x5, 0x12        	MOVFF	r0x05, r0x12
00058c   f012
00058e   c006     movff   0x6, 0x13        	MOVFF	r0x06, r0x13
000590   f013
000592   c007     movff   0x7, 0x14        	MOVFF	r0x07, r0x14
000594   f014
                                           _00172_DS_:
000596   0eff     movlw   0xff             	MOVLW	0xff
000598   2613     addwf   0x13, 0x1, 0     	ADDWF	r0x13, F
00059a   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
00059c   0614     decf    0x14, 0x1, 0     	DECF	r0x14, F
00059e   5013     movf    0x13, 0, 0       	MOVF	r0x13, W
0005a0   1014     iorwf   0x14, 0, 0       	IORWF	r0x14, W
0005a2   e01d     bz      0x5de            	BZ	_00191_DS_
                                           ;	.line	158; test.c	if ((*d++ = *s++) == '\0')
0005a4   c010     movff   0x10, 0xfe9      	MOVFF	r0x10, FSR0L
0005a6   ffe9
0005a8   c011     movff   0x11, 0xff3      	MOVFF	r0x11, PRODL
0005aa   fff3
0005ac   5012     movf    0x12, 0, 0       	MOVF	r0x12, W
0005ae   ecce     call    0x119c, 0        	CALL	__gptrget1
0005b0   f008
0005b2   6e15     movwf   0x15, 0          	MOVWF	r0x15
0005b4   2a10     incf    0x10, 0x1, 0     	INCF	r0x10, F
0005b6   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0005b8   2a11     incf    0x11, 0x1, 0     	INCF	r0x11, F
0005ba   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0005bc   2a12     incf    0x12, 0x1, 0     	INCF	r0x12, F
0005be   c015     movff   0x15, 0xfe5      	MOVFF	r0x15, POSTDEC1
0005c0   ffe5
0005c2   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
0005c4   ffe9
0005c6   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
0005c8   fff3
0005ca   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0005cc   eceb     call    0x11d6, 0        	CALL	__gptrput1
0005ce   f008
0005d0   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
0005d2   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0005d4   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
0005d6   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0005d8   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
0005da   5015     movf    0x15, 0, 0       	MOVF	r0x15, W
0005dc   e1dc     bnz     0x596            	BNZ	_00172_DS_
                                           _00191_DS_:
                                           ;	.line	159; test.c	break;
0005de   c010     movff   0x10, 0xb        	MOVFF	r0x10, r0x0b
0005e0   f00b
0005e2   c011     movff   0x11, 0xc        	MOVFF	r0x11, r0x0c
0005e4   f00c
0005e6   c012     movff   0x12, 0xd        	MOVFF	r0x12, r0x0d
0005e8   f00d
0005ea   c000     movff   0, 0x8           	MOVFF	r0x00, r0x08
0005ec   f008
0005ee   c001     movff   0x1, 0x9         	MOVFF	r0x01, r0x09
0005f0   f009
0005f2   c002     movff   0x2, 0xa         	MOVFF	r0x02, r0x0a
0005f4   f00a
0005f6   c013     movff   0x13, 0xe        	MOVFF	r0x13, r0x0e
0005f8   f00e
0005fa   c014     movff   0x14, 0xf        	MOVFF	r0x14, r0x0f
0005fc   f00f
                                           _00176_DS_:
                                           ;	.line	164; test.c	if (n == 0)
0005fe   500e     movf    0xe, 0, 0        	MOVF	r0x0e, W
000600   100f     iorwf   0xf, 0, 0        	IORWF	r0x0f, W
000602   e127     bnz     0x652            	BNZ	_00183_DS_
                                           ;	.line	166; test.c	if (siz != 0)
000604   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000606   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
000608   e009     bz      0x61c            	BZ	_00190_DS_
                                           ;	.line	167; test.c	*d = '\0';          /* NUL-terminate dst */
00060a   0e00     movlw   0                	MOVLW	0x00
00060c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00060e   c008     movff   0x8, 0xfe9       	MOVFF	r0x08, FSR0L
000610   ffe9
000612   c009     movff   0x9, 0xff3       	MOVFF	r0x09, PRODL
000614   fff3
000616   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
000618   eceb     call    0x11d6, 0        	CALL	__gptrput1
00061a   f008
                                           _00190_DS_:
                                           ;	.line	168; test.c	while (*s++)
00061c   c00b     movff   0xb, 0           	MOVFF	r0x0b, r0x00
00061e   f000
000620   c00c     movff   0xc, 0x1         	MOVFF	r0x0c, r0x01
000622   f001
000624   c00d     movff   0xd, 0x2         	MOVFF	r0x0d, r0x02
000626   f002
                                           _00179_DS_:
000628   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
00062a   ffe9
00062c   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
00062e   fff3
000630   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000632   ecce     call    0x119c, 0        	CALL	__gptrget1
000634   f008
000636   6e06     movwf   0x6, 0           	MOVWF	r0x06
000638   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
00063a   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
00063c   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
00063e   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
000640   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
000642   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000644   e1f1     bnz     0x628            	BNZ	_00179_DS_
000646   c000     movff   0, 0xb           	MOVFF	r0x00, r0x0b
000648   f00b
00064a   c001     movff   0x1, 0xc         	MOVFF	r0x01, r0x0c
00064c   f00c
00064e   c002     movff   0x2, 0xd         	MOVFF	r0x02, r0x0d
000650   f00d
                                           _00183_DS_:
                                           ;	.line	172; test.c	return (s - src - 1);       /* count does not include NUL */
000652   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000654   5c0b     subwf   0xb, 0, 0        	SUBWF	r0x0b, W
000656   6e03     movwf   0x3, 0           	MOVWF	r0x03
000658   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
00065a   580c     subwfb  0xc, 0, 0        	SUBWFB	r0x0c, W
00065c   6e04     movwf   0x4, 0           	MOVWF	r0x04
00065e   0eff     movlw   0xff             	MOVLW	0xff
000660   2603     addwf   0x3, 0x1, 0      	ADDWF	r0x03, F
000662   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
000664   0604     decf    0x4, 0x1, 0      	DECF	r0x04, F
000666   c004     movff   0x4, 0xff3       	MOVFF	r0x04, PRODL
000668   fff3
00066a   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00066c   cfe4     movff   0xfe4, 0x15      	MOVFF	PREINC1, r0x15
00066e   f015
000670   cfe4     movff   0xfe4, 0x14      	MOVFF	PREINC1, r0x14
000672   f014
000674   cfe4     movff   0xfe4, 0x13      	MOVFF	PREINC1, r0x13
000676   f013
000678   cfe4     movff   0xfe4, 0x12      	MOVFF	PREINC1, r0x12
00067a   f012
00067c   cfe4     movff   0xfe4, 0x11      	MOVFF	PREINC1, r0x11
00067e   f011
000680   cfe4     movff   0xfe4, 0x10      	MOVFF	PREINC1, r0x10
000682   f010
000684   cfe4     movff   0xfe4, 0xf       	MOVFF	PREINC1, r0x0f
000686   f00f
000688   cfe4     movff   0xfe4, 0xe       	MOVFF	PREINC1, r0x0e
00068a   f00e
00068c   cfe4     movff   0xfe4, 0xd       	MOVFF	PREINC1, r0x0d
00068e   f00d
000690   cfe4     movff   0xfe4, 0xc       	MOVFF	PREINC1, r0x0c
000692   f00c
000694   cfe4     movff   0xfe4, 0xb       	MOVFF	PREINC1, r0x0b
000696   f00b
000698   cfe4     movff   0xfe4, 0xa       	MOVFF	PREINC1, r0x0a
00069a   f00a
00069c   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
00069e   f009
0006a0   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
0006a2   f008
0006a4   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
0006a6   f007
0006a8   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
0006aa   f006
0006ac   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
0006ae   f005
0006b0   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
0006b2   f004
0006b4   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0006b6   f003
0006b8   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0006ba   f002
0006bc   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0006be   f001
0006c0   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0006c2   f000
0006c4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0006c6   ffd9
0006c8   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__DisplayString	code
                                           _DisplayString:
                                           ;	.line	101; test.c	void DisplayString(BYTE pos, char* text)
000d0a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000d0c   ffe5
000d0e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000d10   ffd9
000d12   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000d14   ffe5
000d16   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000d18   ffe5
000d1a   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000d1c   ffe5
000d1e   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000d20   ffe5
000d22   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
000d24   ffe5
000d26   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
000d28   ffe5
000d2a   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
000d2c   ffe5
000d2e   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
000d30   ffe5
000d32   0e02     movlw   0x2              	MOVLW	0x02
000d34   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000d36   f000
000d38   0e03     movlw   0x3              	MOVLW	0x03
000d3a   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
000d3c   f001
000d3e   0e04     movlw   0x4              	MOVLW	0x04
000d40   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
000d42   f002
000d44   0e05     movlw   0x5              	MOVLW	0x05
000d46   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
000d48   f003
                                           ;	.line	103; test.c	BYTE l= strlen(text)+1;
000d4a   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000d4c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d4e   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000d50   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d52   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000d54   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d56   ec5d     call    0x10ba, 0        	CALL	_strlen
000d58   f008
000d5a   6e04     movwf   0x4, 0           	MOVWF	r0x04
000d5c   cff3     movff   0xff3, 0x5       	MOVFF	PRODL, r0x05
000d5e   f005
000d60   0e03     movlw   0x3              	MOVLW	0x03
000d62   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
000d64   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
                                           ;	.line	104; test.c	BYTE max= 32-pos;
000d66   5000     movf    0, 0, 0          	MOVF	r0x00, W
000d68   0820     sublw   0x20             	SUBLW	0x20
000d6a   6e05     movwf   0x5, 0           	MOVWF	r0x05
                                           ;	.line	105; test.c	strlcpy((char*)&LCDText[pos], text,(l<max)?l:max );
000d6c   6a06     clrf    0x6, 0           	CLRF	r0x06
000d6e   0e00     movlw   0                	MOVLW	LOW(_LCDText)
000d70   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
000d72   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
000d74   2206     addwfc  0x6, 0x1, 0      	ADDWFC	r0x06, F
000d76   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000d78   6e06     movwf   0x6, 0           	MOVWF	r0x06
000d7a   5000     movf    0, 0, 0          	MOVF	r0x00, W
000d7c   6e00     movwf   0, 0             	MOVWF	r0x00
000d7e   0e80     movlw   0x80             	MOVLW	0x80
000d80   6e07     movwf   0x7, 0           	MOVWF	r0x07
000d82   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000d84   5c04     subwf   0x4, 0, 0        	SUBWF	r0x04, W
000d86   e302     bnc     0xd8c            	BNC	_00163_DS_
000d88   c005     movff   0x5, 0x4         	MOVFF	r0x05, r0x04
000d8a   f004
                                           _00163_DS_:
000d8c   6a05     clrf    0x5, 0           	CLRF	r0x05
000d8e   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000d90   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d92   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000d94   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d96   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000d98   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d9a   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000d9c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000d9e   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000da0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000da2   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
000da4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000da6   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000da8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000daa   5000     movf    0, 0, 0          	MOVF	r0x00, W
000dac   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000dae   ec65     call    0x4ca, 0         	CALL	_strlcpy
000db0   f002
000db2   0e08     movlw   0x8              	MOVLW	0x08
000db4   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	106; test.c	LCDUpdate();
000db6   ec02     call    0x4, 0           	CALL	_LCDUpdate
000db8   f000
000dba   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
000dbc   f007
000dbe   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
000dc0   f006
000dc2   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
000dc4   f005
000dc6   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
000dc8   f004
000dca   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
000dcc   f003
000dce   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000dd0   f002
000dd2   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000dd4   f001
000dd6   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000dd8   f000
000dda   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000ddc   ffd9
000dde   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_test__DisplayWORD	code
                                           _DisplayWORD:
                                           ;	.line	79; test.c	void DisplayWORD(BYTE pos, WORD w) //WORD is a 16 bits unsigned
000882   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000884   ffe5
000886   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000888   ffd9
00088a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00088c   ffe5
00088e   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000890   ffe5
000892   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000894   ffe5
000896   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000898   ffe5
00089a   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00089c   ffe5
00089e   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
0008a0   ffe5
0008a2   0e02     movlw   0x2              	MOVLW	0x02
0008a4   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0008a6   f000
0008a8   0e03     movlw   0x3              	MOVLW	0x03
0008aa   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
0008ac   f001
0008ae   0e04     movlw   0x4              	MOVLW	0x04
0008b0   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
0008b2   f002
                                           ;	.line	87; test.c	ultoa(w, WDigit, radix);      
0008b4   6a03     clrf    0x3, 0           	CLRF	r0x03
0008b6   6a04     clrf    0x4, 0           	CLRF	r0x04
0008b8   0e0a     movlw   0xa              	MOVLW	0x0a
0008ba   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008bc   0e0f     movlw   0xf              	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
0008be   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008c0   0e41     movlw   0x41             	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
0008c2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008c4   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0008c6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008c8   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0008ca   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008cc   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0008ce   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008d0   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0008d2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008d4   ec65     call    0x6ca, 0         	CALL	_ultoa
0008d6   f003
0008d8   0e07     movlw   0x7              	MOVLW	0x07
0008da   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	88; test.c	for(j = 0; j < strlen((char*)WDigit); j++)
0008dc   6a01     clrf    0x1, 0           	CLRF	r0x01
                                           _00144_DS_:
0008de   0e0f     movlw   0xf              	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
0008e0   6e03     movwf   0x3, 0           	MOVWF	r0x03
0008e2   0e41     movlw   0x41             	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
0008e4   6e02     movwf   0x2, 0           	MOVWF	r0x02
0008e6   0e80     movlw   0x80             	MOVLW	0x80
0008e8   6e04     movwf   0x4, 0           	MOVWF	r0x04
0008ea   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0008ec   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008ee   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0008f0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008f2   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0008f4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0008f6   ec5d     call    0x10ba, 0        	CALL	_strlen
0008f8   f008
0008fa   6e02     movwf   0x2, 0           	MOVWF	r0x02
0008fc   cff3     movff   0xff3, 0x3       	MOVFF	PRODL, r0x03
0008fe   f003
000900   0e03     movlw   0x3              	MOVLW	0x03
000902   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
000904   c001     movff   0x1, 0x4         	MOVFF	r0x01, r0x04
000906   f004
000908   6a05     clrf    0x5, 0           	CLRF	r0x05
00090a   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
00090c   0f80     addlw   0x80             	ADDLW	0x80
00090e   6ef3     movwf   0xf3, 0          	MOVWF	PRODL
000910   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000912   0f80     addlw   0x80             	ADDLW	0x80
000914   5cf3     subwf   0xf3, 0, 0       	SUBWF	PRODL, W
000916   e102     bnz     0x91c            	BNZ	_00154_DS_
000918   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00091a   5c04     subwf   0x4, 0, 0        	SUBWF	r0x04, W
                                           _00154_DS_:
00091c   e21c     bc      0x956            	BC	_00147_DS_
                                           ;	.line	90; test.c	LCDText[LCDPos++] = WDigit[j];
00091e   c000     movff   0, 0x2           	MOVFF	r0x00, r0x02
000920   f002
000922   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000924   6a03     clrf    0x3, 0           	CLRF	r0x03
000926   0e00     movlw   0                	MOVLW	LOW(_LCDText)
000928   2602     addwf   0x2, 0x1, 0      	ADDWF	r0x02, F
00092a   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
00092c   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
00092e   0e41     movlw   0x41             	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
000930   2401     addwf   0x1, 0, 0        	ADDWF	r0x01, W
000932   6e04     movwf   0x4, 0           	MOVWF	r0x04
000934   6a05     clrf    0x5, 0           	CLRF	r0x05
000936   0e0f     movlw   0xf              	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
000938   2205     addwfc  0x5, 0x1, 0      	ADDWFC	r0x05, F
00093a   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
00093c   ffe9
00093e   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
000940   ffea
000942   cfef     movff   0xfef, 0x4       	MOVFF	INDF0, r0x04
000944   f004
000946   c002     movff   0x2, 0xfe9       	MOVFF	r0x02, FSR0L
000948   ffe9
00094a   c003     movff   0x3, 0xfea       	MOVFF	r0x03, FSR0H
00094c   ffea
00094e   c004     movff   0x4, 0xfef       	MOVFF	r0x04, INDF0
000950   ffef
                                           ;	.line	88; test.c	for(j = 0; j < strlen((char*)WDigit); j++)
000952   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
000954   d7c4     bra     0x8de            	BRA	_00144_DS_
                                           _00147_DS_:
                                           ;	.line	92; test.c	if(LCDPos < 32u)
000956   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
000958   f001
00095a   6a02     clrf    0x2, 0           	CLRF	r0x02
00095c   0e00     movlw   0                	MOVLW	0x00
00095e   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
000960   e102     bnz     0x966            	BNZ	_00155_DS_
000962   0e20     movlw   0x20             	MOVLW	0x20
000964   5c01     subwf   0x1, 0, 0        	SUBWF	r0x01, W
                                           _00155_DS_:
000966   e20b     bc      0x97e            	BC	_00143_DS_
                                           ;	.line	93; test.c	LCDText[LCDPos] = 0;
000968   6a01     clrf    0x1, 0           	CLRF	r0x01
00096a   0e00     movlw   0                	MOVLW	LOW(_LCDText)
00096c   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
00096e   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
000970   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
000972   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000974   ffe9
000976   c001     movff   0x1, 0xfea       	MOVFF	r0x01, FSR0H
000978   ffea
00097a   0e00     movlw   0                	MOVLW	0x00
00097c   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           _00143_DS_:
                                           ;	.line	94; test.c	LCDUpdate();
00097e   ec02     call    0x4, 0           	CALL	_LCDUpdate
000980   f000
000982   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
000984   f005
000986   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
000988   f004
00098a   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
00098c   f003
00098e   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000990   f002
000992   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000994   f001
000996   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000998   f000
00099a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00099c   ffd9
00099e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
0009a0   6554     cpfsgt  0x54, 0x1        	DB	0x54, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x45, 0x74, 0x68, 0x65
0009a2   7473     btg     0x73, 0x2, 0     
0009a4   6f20     movwf   0x20, 0x1        
0009a6   2066     addwfc  0x66, 0, 0       
0009a8   7445     btg     0x45, 0x2, 0     
0009aa   6568     cpfsgt  0x68, 0x1        
0009ac   6e72     movwf   0x72, 0          	DB	0x72, 0x6e, 0x65, 0x74, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x00
0009ae   7465     btg     0x65, 0x2, 0     
0009b0   6220     cpfseq  0x20, 0          
0009b2   6675     tstfsz  0x75, 0          
0009b4   6566     cpfsgt  0x66, 0x1        
0009b6   0072     dw      0x72             
                                           ; ; Starting pCode block
                                           __str_1:
0009b8   2020     addwfc  0x20, 0, 0       	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x50, 0x75, 0x73, 0x68, 0x20, 0x42
0009ba   2020     addwfc  0x20, 0, 0       
0009bc   2020     addwfc  0x20, 0, 0       
0009be   7550     btg     0x50, 0x2, 0x1   
0009c0   6873     setf    0x73, 0          
0009c2   4220     rrncf   0x20, 0x1, 0     
0009c4   7475     btg     0x75, 0x2, 0     	DB	0x75, 0x74, 0x31, 0x00
0009c6   0031     dw      0x31             
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1280 (0x0500) bytes ( 0.98%)
                                           ;           	  640 (0x0280) words
                                           ; udata size:	    6 (0x0006) bytes ( 0.16%)
                                           ; access size:	   22 (0x0016) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Mar 13 2012) (UNIX)
                                           ; This file was generated Tue Mar 20 12:17:50 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; TCPIP_Stack/LCDBlocking.c	void LCDErase(void)
000f72   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000f74   ffe5
000f76   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000f78   ffd9
000f7a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000f7c   ffe5
000f7e   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000f80   ffe5
000f82   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000f84   ffe5
000f86   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000f88   ffe5
000f8a   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
000f8c   ffe5
000f8e   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
000f90   ffe5
000f92   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
000f94   ffe5
000f96   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
000f98   ffe5
                                           ;	.line	395; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);
000f9a   0e01     movlw   0x1              	MOVLW	0x01
000f9c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000f9e   0e00     movlw   0                	MOVLW	0x00
000fa0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000fa2   ec9d     call    0x113a, 0        	CALL	_LCDWrite
000fa4   f008
000fa6   0e02     movlw   0x2              	MOVLW	0x02
000fa8   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	396; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
000faa   0e48     movlw   0x48             	MOVLW	0x48
000fac   6e00     movwf   0, 0             	MOVWF	r0x00
000fae   0e0d     movlw   0xd              	MOVLW	0x0d
000fb0   6e01     movwf   0x1, 0           	MOVWF	r0x01
000fb2   6a02     clrf    0x2, 0           	CLRF	r0x02
000fb4   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00305_DS_:
000fb6   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
000fb8   f004
000fba   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
000fbc   f005
000fbe   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
000fc0   f006
000fc2   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
000fc4   f007
000fc6   0eff     movlw   0xff             	MOVLW	0xff
000fc8   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
000fca   0eff     movlw   0xff             	MOVLW	0xff
000fcc   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
000fce   0eff     movlw   0xff             	MOVLW	0xff
000fd0   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
000fd2   0eff     movlw   0xff             	MOVLW	0xff
000fd4   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000fd6   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000fd8   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
000fda   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
000fdc   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
000fde   e1eb     bnz     0xfb6            	BNZ	_00305_DS_
                                           ;	.line	399; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', 32);
000fe0   0e00     movlw   0                	MOVLW	0x00
000fe2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000fe4   0e20     movlw   0x20             	MOVLW	0x20
000fe6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000fe8   0e20     movlw   0x20             	MOVLW	0x20
000fea   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000fec   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
000fee   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ff0   0e00     movlw   0                	MOVLW	LOW(_LCDText)
000ff2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ff4   ecf0     call    0xde0, 0         	CALL	_memset
000ff6   f006
000ff8   0e05     movlw   0x5              	MOVLW	0x05
000ffa   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
000ffc   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
000ffe   f007
001000   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
001002   f006
001004   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
001006   f005
001008   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
00100a   f004
00100c   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
00100e   f003
001010   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
001012   f002
001014   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001016   f001
001018   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00101a   f000
00101c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00101e   ffd9
001020   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; TCPIP_Stack/LCDBlocking.c	void LCDUpdate(void)
000004   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000006   ffe5
000008   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00000a   ffd9
00000c   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00000e   ffe5
000010   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000012   ffe5
000014   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000016   ffe5
000018   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
00001a   ffe5
00001c   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00001e   ffe5
000020   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
000022   ffe5
000024   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
000026   ffe5
000028   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
00002a   ffe5
00002c   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
00002e   ffe5
                                           ;	.line	337; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x02);
000030   0e02     movlw   0x2              	MOVLW	0x02
000032   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000034   0e00     movlw   0                	MOVLW	0x00
000036   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000038   ec9d     call    0x113a, 0        	CALL	_LCDWrite
00003a   f008
00003c   0e02     movlw   0x2              	MOVLW	0x02
00003e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	338; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
000040   0e48     movlw   0x48             	MOVLW	0x48
000042   6e00     movwf   0, 0             	MOVWF	r0x00
000044   0e0d     movlw   0xd              	MOVLW	0x0d
000046   6e01     movwf   0x1, 0           	MOVWF	r0x01
000048   6a02     clrf    0x2, 0           	CLRF	r0x02
00004a   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00225_DS_:
00004c   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
00004e   f004
000050   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
000052   f005
000054   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
000056   f006
000058   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
00005a   f007
00005c   0eff     movlw   0xff             	MOVLW	0xff
00005e   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
000060   0eff     movlw   0xff             	MOVLW	0xff
000062   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
000064   0eff     movlw   0xff             	MOVLW	0xff
000066   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
000068   0eff     movlw   0xff             	MOVLW	0xff
00006a   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
00006c   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
00006e   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
000070   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
000072   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
000074   e1eb     bnz     0x4c             	BNZ	_00225_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
000076   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00257_DS_:
000078   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
00007a   f001
00007c   6a02     clrf    0x2, 0           	CLRF	r0x02
00007e   0e00     movlw   0                	MOVLW	0x00
000080   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
000082   e102     bnz     0x88             	BNZ	_00297_DS_
000084   0e10     movlw   0x10             	MOVLW	0x10
000086   5c01     subwf   0x1, 0, 0        	SUBWF	r0x01, W
                                           _00297_DS_:
000088   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
00008a   d057     bra     0x13a            	BRA	_00260_DS_
                                           ;	.line	345; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
00008c   0e00     movlw   0                	MOVLW	LOW(_LCDText)
00008e   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000090   6e01     movwf   0x1, 0           	MOVWF	r0x01
000092   6a02     clrf    0x2, 0           	CLRF	r0x02
000094   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
000096   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
000098   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
00009a   ffe9
00009c   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
00009e   ffea
0000a0   cfef     movff   0xfef, 0x1       	MOVFF	INDF0, r0x01
0000a2   f001
0000a4   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0000a6   e119     bnz     0xda             	BNZ	_00232_DS_
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
0000a8   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
0000aa   f001
                                           _00253_DS_:
0000ac   c001     movff   0x1, 0x2         	MOVFF	r0x01, r0x02
0000ae   f002
0000b0   6a03     clrf    0x3, 0           	CLRF	r0x03
0000b2   0e00     movlw   0                	MOVLW	0x00
0000b4   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
0000b6   e102     bnz     0xbc             	BNZ	_00298_DS_
0000b8   0e10     movlw   0x10             	MOVLW	0x10
0000ba   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
                                           _00298_DS_:
0000bc   e20e     bc      0xda             	BC	_00232_DS_
                                           ;	.line	349; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
0000be   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0000c0   2401     addwf   0x1, 0, 0        	ADDWF	r0x01, W
0000c2   6e02     movwf   0x2, 0           	MOVWF	r0x02
0000c4   6a03     clrf    0x3, 0           	CLRF	r0x03
0000c6   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0000c8   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
0000ca   c002     movff   0x2, 0xfe9       	MOVFF	r0x02, FSR0L
0000cc   ffe9
0000ce   c003     movff   0x3, 0xfea       	MOVFF	r0x03, FSR0H
0000d0   ffea
0000d2   0e20     movlw   0x20             	MOVLW	0x20
0000d4   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
0000d6   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
0000d8   d7e9     bra     0xac             	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
0000da   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0000dc   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0000de   6e01     movwf   0x1, 0           	MOVWF	r0x01
0000e0   6a02     clrf    0x2, 0           	CLRF	r0x02
0000e2   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0000e4   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0000e6   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
0000e8   ffe9
0000ea   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
0000ec   ffea
0000ee   cfef     movff   0xfef, 0x1       	MOVFF	INDF0, r0x01
0000f0   f001
0000f2   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0000f4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0000f6   0e01     movlw   0x1              	MOVLW	0x01
0000f8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0000fa   ec9d     call    0x113a, 0        	CALL	_LCDWrite
0000fc   f008
0000fe   0e02     movlw   0x2              	MOVLW	0x02
000100   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	353; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
000102   0e55     movlw   0x55             	MOVLW	0x55
000104   6e01     movwf   0x1, 0           	MOVWF	r0x01
000106   6a02     clrf    0x2, 0           	CLRF	r0x02
000108   6a03     clrf    0x3, 0           	CLRF	r0x03
00010a   6a04     clrf    0x4, 0           	CLRF	r0x04
                                           _00233_DS_:
00010c   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
00010e   f005
000110   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
000112   f006
000114   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
000116   f007
000118   c004     movff   0x4, 0x8         	MOVFF	r0x04, r0x08
00011a   f008
00011c   0eff     movlw   0xff             	MOVLW	0xff
00011e   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
000120   0eff     movlw   0xff             	MOVLW	0xff
000122   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
000124   0eff     movlw   0xff             	MOVLW	0xff
000126   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000128   0eff     movlw   0xff             	MOVLW	0xff
00012a   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
00012c   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
00012e   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
000130   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
000132   1008     iorwf   0x8, 0, 0        	IORWF	r0x08, W
000134   e1eb     bnz     0x10c            	BNZ	_00233_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
000136   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000138   d79f     bra     0x78             	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0xC0);
00013a   0ec0     movlw   0xc0             	MOVLW	0xc0
00013c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00013e   0e00     movlw   0                	MOVLW	0x00
000140   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000142   ec9d     call    0x113a, 0        	CALL	_LCDWrite
000144   f008
000146   0e02     movlw   0x2              	MOVLW	0x02
000148   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	358; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
00014a   0e55     movlw   0x55             	MOVLW	0x55
00014c   6e00     movwf   0, 0             	MOVWF	r0x00
00014e   6a01     clrf    0x1, 0           	CLRF	r0x01
000150   6a02     clrf    0x2, 0           	CLRF	r0x02
000152   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00239_DS_:
000154   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
000156   f004
000158   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
00015a   f005
00015c   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
00015e   f006
000160   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
000162   f007
000164   0eff     movlw   0xff             	MOVLW	0xff
000166   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
000168   0eff     movlw   0xff             	MOVLW	0xff
00016a   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
00016c   0eff     movlw   0xff             	MOVLW	0xff
00016e   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
000170   0eff     movlw   0xff             	MOVLW	0xff
000172   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000174   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000176   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
000178   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
00017a   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
00017c   e1eb     bnz     0x154            	BNZ	_00239_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
00017e   0e10     movlw   0x10             	MOVLW	0x10
000180   6e00     movwf   0, 0             	MOVWF	r0x00
                                           _00265_DS_:
000182   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
000184   f001
000186   6a02     clrf    0x2, 0           	CLRF	r0x02
000188   0e00     movlw   0                	MOVLW	0x00
00018a   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
00018c   e102     bnz     0x192            	BNZ	_00299_DS_
00018e   0e20     movlw   0x20             	MOVLW	0x20
000190   5c01     subwf   0x1, 0, 0        	SUBWF	r0x01, W
                                           _00299_DS_:
000192   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
000194   d057     bra     0x244            	BRA	_00269_DS_
                                           ;	.line	365; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
000196   0e00     movlw   0                	MOVLW	LOW(_LCDText)
000198   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
00019a   6e01     movwf   0x1, 0           	MOVWF	r0x01
00019c   6a02     clrf    0x2, 0           	CLRF	r0x02
00019e   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0001a0   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0001a2   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
0001a4   ffe9
0001a6   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
0001a8   ffea
0001aa   cfef     movff   0xfef, 0x1       	MOVFF	INDF0, r0x01
0001ac   f001
0001ae   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0001b0   e119     bnz     0x1e4            	BNZ	_00246_DS_
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
0001b2   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
0001b4   f001
                                           _00261_DS_:
0001b6   c001     movff   0x1, 0x2         	MOVFF	r0x01, r0x02
0001b8   f002
0001ba   6a03     clrf    0x3, 0           	CLRF	r0x03
0001bc   0e00     movlw   0                	MOVLW	0x00
0001be   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
0001c0   e102     bnz     0x1c6            	BNZ	_00300_DS_
0001c2   0e20     movlw   0x20             	MOVLW	0x20
0001c4   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
                                           _00300_DS_:
0001c6   e20e     bc      0x1e4            	BC	_00246_DS_
                                           ;	.line	369; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
0001c8   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0001ca   2401     addwf   0x1, 0, 0        	ADDWF	r0x01, W
0001cc   6e02     movwf   0x2, 0           	MOVWF	r0x02
0001ce   6a03     clrf    0x3, 0           	CLRF	r0x03
0001d0   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0001d2   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
0001d4   c002     movff   0x2, 0xfe9       	MOVFF	r0x02, FSR0L
0001d6   ffe9
0001d8   c003     movff   0x3, 0xfea       	MOVFF	r0x03, FSR0H
0001da   ffea
0001dc   0e20     movlw   0x20             	MOVLW	0x20
0001de   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
0001e0   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
0001e2   d7e9     bra     0x1b6            	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
0001e4   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0001e6   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0001e8   6e01     movwf   0x1, 0           	MOVWF	r0x01
0001ea   6a02     clrf    0x2, 0           	CLRF	r0x02
0001ec   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0001ee   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0001f0   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
0001f2   ffe9
0001f4   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
0001f6   ffea
0001f8   cfef     movff   0xfef, 0x1       	MOVFF	INDF0, r0x01
0001fa   f001
0001fc   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0001fe   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000200   0e01     movlw   0x1              	MOVLW	0x01
000202   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000204   ec9d     call    0x113a, 0        	CALL	_LCDWrite
000206   f008
000208   0e02     movlw   0x2              	MOVLW	0x02
00020a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	373; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
00020c   0e55     movlw   0x55             	MOVLW	0x55
00020e   6e01     movwf   0x1, 0           	MOVWF	r0x01
000210   6a02     clrf    0x2, 0           	CLRF	r0x02
000212   6a03     clrf    0x3, 0           	CLRF	r0x03
000214   6a04     clrf    0x4, 0           	CLRF	r0x04
                                           _00247_DS_:
000216   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
000218   f005
00021a   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
00021c   f006
00021e   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
000220   f007
000222   c004     movff   0x4, 0x8         	MOVFF	r0x04, r0x08
000224   f008
000226   0eff     movlw   0xff             	MOVLW	0xff
000228   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
00022a   0eff     movlw   0xff             	MOVLW	0xff
00022c   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00022e   0eff     movlw   0xff             	MOVLW	0xff
000230   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000232   0eff     movlw   0xff             	MOVLW	0xff
000234   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
000236   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000238   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
00023a   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
00023c   1008     iorwf   0x8, 0, 0        	IORWF	r0x08, W
00023e   e1eb     bnz     0x216            	BNZ	_00247_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
000240   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000242   d79f     bra     0x182            	BRA	_00265_DS_
                                           _00269_DS_:
000244   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
000246   f008
000248   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
00024a   f007
00024c   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
00024e   f006
000250   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
000252   f005
000254   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
000256   f004
000258   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
00025a   f003
00025c   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
00025e   f002
000260   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000262   f001
000264   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000266   f000
000268   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00026a   ffd9
00026c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; TCPIP_Stack/LCDBlocking.c	void LCDInit(void)
00026e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000270   ffe5
000272   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000274   ffd9
000276   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000278   ffe5
00027a   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00027c   ffe5
00027e   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000280   ffe5
000282   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000284   ffe5
000286   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
000288   ffe5
00028a   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
00028c   ffe5
00028e   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
000290   ffe5
000292   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
000294   ffe5
000296   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
000298   ffe5
                                           ;	.line	211; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
00029a   0e00     movlw   0                	MOVLW	0x00
00029c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00029e   0e20     movlw   0x20             	MOVLW	0x20
0002a0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0002a2   0e20     movlw   0x20             	MOVLW	0x20
0002a4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0002a6   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0002a8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0002aa   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0002ac   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0002ae   ecf0     call    0xde0, 0         	CALL	_memset
0002b0   f006
0002b2   0e05     movlw   0x5              	MOVLW	0x05
0002b4   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0002b6   010f     movlb   0xf              	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; TCPIP_Stack/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
0002b8   6b20     clrf    0x20, 0x1        	CLRF	(_LCDText + 32), B
                                           ;	.line	215; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
0002ba   9090     bcf     0x90, 0, 0       	BCF	_LATHbits, 0
                                           ;	.line	216; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
0002bc   9290     bcf     0x90, 0x1, 0     	BCF	_LATHbits, 1
                                           ;	.line	220; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
0002be   6a96     clrf    0x96, 0          	CLRF	_TRISE
                                           ;	.line	233; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
0002c0   9299     bcf     0x99, 0x1, 0     	BCF	_TRISHbits, 1
                                           ;	.line	234; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
0002c2   9499     bcf     0x99, 0x2, 0     	BCF	_TRISHbits, 2
                                           ;	.line	235; TCPIP_Stack/LCDBlocking.c	LCD_E_TRIS = 0;
0002c4   9099     bcf     0x99, 0, 0       	BCF	_TRISHbits, 0
                                           ;	.line	239; TCPIP_Stack/LCDBlocking.c	DelayMs(40);
0002c6   0ea0     movlw   0xa0             	MOVLW	0xa0
0002c8   6e00     movwf   0, 0             	MOVWF	r0x00
0002ca   0e09     movlw   0x9              	MOVLW	0x09
0002cc   6e01     movwf   0x1, 0           	MOVWF	r0x01
0002ce   0e01     movlw   0x1              	MOVLW	0x01
0002d0   6e02     movwf   0x2, 0           	MOVWF	r0x02
0002d2   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00143_DS_:
0002d4   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
0002d6   f004
0002d8   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
0002da   f005
0002dc   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
0002de   f006
0002e0   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
0002e2   f007
0002e4   0eff     movlw   0xff             	MOVLW	0xff
0002e6   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
0002e8   0eff     movlw   0xff             	MOVLW	0xff
0002ea   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
0002ec   0eff     movlw   0xff             	MOVLW	0xff
0002ee   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0002f0   0eff     movlw   0xff             	MOVLW	0xff
0002f2   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
0002f4   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0002f6   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
0002f8   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
0002fa   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
0002fc   e1eb     bnz     0x2d4            	BNZ	_00143_DS_
                                           ;	.line	247; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = 0;
0002fe   9490     bcf     0x90, 0x2, 0     	BCF	_LATHbits, 2
                                           ;	.line	249; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = 0x03;
000300   0e03     movlw   0x3              	MOVLW	0x03
000302   6e8d     movwf   0x8d, 0          	MOVWF	_LATE
000304   0000     nop                      	nop 
000306   0000     nop                      	nop 
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
000308   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00191_DS_:
00030a   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
00030c   f001
00030e   6a02     clrf    0x2, 0           	CLRF	r0x02
000310   0e00     movlw   0                	MOVLW	0x00
000312   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
000314   e102     bnz     0x31a            	BNZ	_00220_DS_
000316   0e03     movlw   0x3              	MOVLW	0x03
000318   5c01     subwf   0x1, 0, 0        	SUBWF	r0x01, W
                                           _00220_DS_:
00031a   e239     bc      0x38e            	BC	_00194_DS_
                                           ;	.line	266; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
00031c   8090     bsf     0x90, 0, 0       	BSF	_LATHbits, 0
                                           ;	.line	267; TCPIP_Stack/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
00031e   0e11     movlw   0x11             	MOVLW	0x11
000320   6e01     movwf   0x1, 0           	MOVWF	r0x01
000322   6a02     clrf    0x2, 0           	CLRF	r0x02
000324   6a03     clrf    0x3, 0           	CLRF	r0x03
000326   6a04     clrf    0x4, 0           	CLRF	r0x04
                                           _00155_DS_:
000328   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
00032a   f005
00032c   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
00032e   f006
000330   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
000332   f007
000334   c004     movff   0x4, 0x8         	MOVFF	r0x04, r0x08
000336   f008
000338   0eff     movlw   0xff             	MOVLW	0xff
00033a   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
00033c   0eff     movlw   0xff             	MOVLW	0xff
00033e   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
000340   0eff     movlw   0xff             	MOVLW	0xff
000342   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000344   0eff     movlw   0xff             	MOVLW	0xff
000346   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
000348   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
00034a   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
00034c   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
00034e   1008     iorwf   0x8, 0, 0        	IORWF	r0x08, W
000350   e1eb     bnz     0x328            	BNZ	_00155_DS_
                                           ;	.line	268; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
000352   9090     bcf     0x90, 0, 0       	BCF	_LATHbits, 0
                                           ;	.line	269; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
000354   0e48     movlw   0x48             	MOVLW	0x48
000356   6e01     movwf   0x1, 0           	MOVWF	r0x01
000358   0e0d     movlw   0xd              	MOVLW	0x0d
00035a   6e02     movwf   0x2, 0           	MOVWF	r0x02
00035c   6a03     clrf    0x3, 0           	CLRF	r0x03
00035e   6a04     clrf    0x4, 0           	CLRF	r0x04
                                           _00161_DS_:
000360   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
000362   f005
000364   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
000366   f006
000368   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
00036a   f007
00036c   c004     movff   0x4, 0x8         	MOVFF	r0x04, r0x08
00036e   f008
000370   0eff     movlw   0xff             	MOVLW	0xff
000372   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
000374   0eff     movlw   0xff             	MOVLW	0xff
000376   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
000378   0eff     movlw   0xff             	MOVLW	0xff
00037a   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
00037c   0eff     movlw   0xff             	MOVLW	0xff
00037e   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
000380   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000382   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
000384   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
000386   1008     iorwf   0x8, 0, 0        	IORWF	r0x08, W
000388   e1eb     bnz     0x360            	BNZ	_00161_DS_
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
00038a   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
00038c   d7be     bra     0x30a            	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x38);
00038e   0e38     movlw   0x38             	MOVLW	0x38
000390   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000392   0e00     movlw   0                	MOVLW	0x00
000394   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000396   ec9d     call    0x113a, 0        	CALL	_LCDWrite
000398   f008
00039a   0e02     movlw   0x2              	MOVLW	0x02
00039c   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	297; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
00039e   0e55     movlw   0x55             	MOVLW	0x55
0003a0   6e00     movwf   0, 0             	MOVWF	r0x00
0003a2   6a01     clrf    0x1, 0           	CLRF	r0x01
0003a4   6a02     clrf    0x2, 0           	CLRF	r0x02
0003a6   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00167_DS_:
0003a8   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
0003aa   f004
0003ac   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
0003ae   f005
0003b0   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
0003b2   f006
0003b4   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
0003b6   f007
0003b8   0eff     movlw   0xff             	MOVLW	0xff
0003ba   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
0003bc   0eff     movlw   0xff             	MOVLW	0xff
0003be   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
0003c0   0eff     movlw   0xff             	MOVLW	0xff
0003c2   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0003c4   0eff     movlw   0xff             	MOVLW	0xff
0003c6   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
0003c8   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0003ca   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
0003cc   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
0003ce   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
0003d0   e1eb     bnz     0x3a8            	BNZ	_00167_DS_
                                           ;	.line	300; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
0003d2   0e06     movlw   0x6              	MOVLW	0x06
0003d4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0003d6   0e00     movlw   0                	MOVLW	0x00
0003d8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0003da   ec9d     call    0x113a, 0        	CALL	_LCDWrite
0003dc   f008
0003de   0e02     movlw   0x2              	MOVLW	0x02
0003e0   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	301; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0003e2   0e55     movlw   0x55             	MOVLW	0x55
0003e4   6e00     movwf   0, 0             	MOVWF	r0x00
0003e6   6a01     clrf    0x1, 0           	CLRF	r0x01
0003e8   6a02     clrf    0x2, 0           	CLRF	r0x02
0003ea   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00173_DS_:
0003ec   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
0003ee   f004
0003f0   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
0003f2   f005
0003f4   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
0003f6   f006
0003f8   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
0003fa   f007
0003fc   0eff     movlw   0xff             	MOVLW	0xff
0003fe   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
000400   0eff     movlw   0xff             	MOVLW	0xff
000402   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
000404   0eff     movlw   0xff             	MOVLW	0xff
000406   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
000408   0eff     movlw   0xff             	MOVLW	0xff
00040a   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
00040c   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
00040e   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
000410   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
000412   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
000414   e1eb     bnz     0x3ec            	BNZ	_00173_DS_
                                           ;	.line	304; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
000416   0e0c     movlw   0xc              	MOVLW	0x0c
000418   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00041a   0e00     movlw   0                	MOVLW	0x00
00041c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00041e   ec9d     call    0x113a, 0        	CALL	_LCDWrite
000420   f008
000422   0e02     movlw   0x2              	MOVLW	0x02
000424   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	305; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
000426   0e55     movlw   0x55             	MOVLW	0x55
000428   6e00     movwf   0, 0             	MOVWF	r0x00
00042a   6a01     clrf    0x1, 0           	CLRF	r0x01
00042c   6a02     clrf    0x2, 0           	CLRF	r0x02
00042e   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00179_DS_:
000430   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
000432   f004
000434   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
000436   f005
000438   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
00043a   f006
00043c   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
00043e   f007
000440   0eff     movlw   0xff             	MOVLW	0xff
000442   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
000444   0eff     movlw   0xff             	MOVLW	0xff
000446   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
000448   0eff     movlw   0xff             	MOVLW	0xff
00044a   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00044c   0eff     movlw   0xff             	MOVLW	0xff
00044e   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000450   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000452   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
000454   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
000456   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
000458   e1eb     bnz     0x430            	BNZ	_00179_DS_
                                           ;	.line	308; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);	
00045a   0e01     movlw   0x1              	MOVLW	0x01
00045c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00045e   0e00     movlw   0                	MOVLW	0x00
000460   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000462   ec9d     call    0x113a, 0        	CALL	_LCDWrite
000464   f008
000466   0e02     movlw   0x2              	MOVLW	0x02
000468   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	309; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
00046a   0e48     movlw   0x48             	MOVLW	0x48
00046c   6e00     movwf   0, 0             	MOVWF	r0x00
00046e   0e0d     movlw   0xd              	MOVLW	0x0d
000470   6e01     movwf   0x1, 0           	MOVWF	r0x01
000472   6a02     clrf    0x2, 0           	CLRF	r0x02
000474   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00185_DS_:
000476   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
000478   f004
00047a   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
00047c   f005
00047e   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
000480   f006
000482   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
000484   f007
000486   0eff     movlw   0xff             	MOVLW	0xff
000488   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
00048a   0eff     movlw   0xff             	MOVLW	0xff
00048c   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
00048e   0eff     movlw   0xff             	MOVLW	0xff
000490   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
000492   0eff     movlw   0xff             	MOVLW	0xff
000494   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000496   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000498   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
00049a   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
00049c   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
00049e   e1eb     bnz     0x476            	BNZ	_00185_DS_
0004a0   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
0004a2   f008
0004a4   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
0004a6   f007
0004a8   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
0004aa   f006
0004ac   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
0004ae   f005
0004b0   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
0004b2   f004
0004b4   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0004b6   f003
0004b8   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0004ba   f002
0004bc   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0004be   f001
0004c0   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0004c2   f000
0004c4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0004c6   ffd9
0004c8   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; TCPIP_Stack/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
00113a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00113c   ffe5
00113e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001140   ffd9
001142   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001144   ffe5
001146   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001148   ffe5
00114a   0e02     movlw   0x2              	MOVLW	0x02
00114c   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00114e   f000
001150   0e03     movlw   0x3              	MOVLW	0x03
001152   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
001154   f001
                                           ;	.line	97; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
001156   6a96     clrf    0x96, 0          	CLRF	_TRISE
                                           ;	.line	110; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
001158   9499     bcf     0x99, 0x2, 0     	BCF	_TRISHbits, 2
                                           ;	.line	111; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
00115a   9299     bcf     0x99, 0x1, 0     	BCF	_TRISHbits, 1
                                           ;	.line	112; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
00115c   9290     bcf     0x90, 0x1, 0     	BCF	_LATHbits, 1
                                           ;	.line	113; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = RS;
00115e   5000     movf    0, 0, 0          	MOVF	r0x00, W
001160   0b01     andlw   0x1              	ANDLW	0x01
001162   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
001164   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
001166   6ef4     movwf   0xf4, 0          	MOVWF	PRODH
001168   5090     movf    0x90, 0, 0       	MOVF	_LATHbits, W
00116a   0bfb     andlw   0xfb             	ANDLW	0xfb
00116c   10f4     iorwf   0xf4, 0, 0       	IORWF	PRODH, W
00116e   6e90     movwf   0x90, 0          	MOVWF	_LATHbits
                                           ;	.line	140; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = Data;
001170   c001     movff   0x1, 0xf8d       	MOVFF	r0x01, _LATE
001172   ff8d
001174   0000     nop                      	nop 
001176   0000     nop                      	nop 
                                           ;	.line	155; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
001178   8090     bsf     0x90, 0, 0       	BSF	_LATHbits, 0
00117a   0000     nop                      	nop 
00117c   0000     nop                      	nop 
00117e   0000     nop                      	nop 
001180   0000     nop                      	nop 
001182   0000     nop                      	nop 
001184   0000     nop                      	nop 
001186   0000     nop                      	nop 
001188   0000     nop                      	nop 
00118a   0000     nop                      	nop 
                                           ;	.line	165; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
00118c   9090     bcf     0x90, 0, 0       	BCF	_LATHbits, 0
00118e   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001190   f001
001192   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
001194   f000
001196   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001198   ffd9
00119a   0012     return  0                	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
