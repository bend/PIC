gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 3-27-2012  16:55:59
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Mar 13 2012) (UNIX)
                                           ; This file was generated Tue Mar 27 16:55:59 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _increment_time
                                           	global _alarm
                                           	global _test_inc_current_time
                                           	global _display_time
                                           	global _display_word
                                           	global _display_string
                                           	global _strlcpy
                                           	global _dumb_delay1ms
                                           	global _time
                                           	global _currentTime
                                           	global _position
                                           	global _alarmflag
                                           	global _refresh
                                           	global _bres
                                           	global _high_isr
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _ultoa
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _time	db	0x30, 0x30, 0x3a, 0x30, 0x30, 0x20, 0x20, 0x30, 0x30, 0x3a, 0x30, 0x30
                                           	db	0x3a, 0x30, 0x30, 0x00
                                           _currentTime	db	LOW((_time + 7)), HIGH((_time + 7)), 0x80
                                           _position	db	0x00, 0x00
                                           _alarmflag	db	0x00, 0x00
                                           _refresh	db	0x01, 0x00
                                           _bres	db	0x00, 0x00, 0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           
                                           udata_testint_0	udata
                                           _main_string_1_1	res	16
                                           
                                           udata_testint_1	udata
                                           _display_word_WDigit_1_1	res	6
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_testint_ivec_0x1_high_isr	code	0X000008
                                           ivec_0x1_high_isr:
000008   efb2     goto	0x364               	GOTO	_high_isr
00000a   f001
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_testint__main	code
                                           _main:
0016cc   010e     movlb	0xe                	BANKSEL	_main_string_1_1
                                           ;	.line	87; testint.c	char string[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
0016ce   6b00     clrf	0, 0x1              	CLRF	_main_string_1_1, B
0016d0   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 1)
0016d2   6b01     clrf	0x1, 0x1            	CLRF	(_main_string_1_1 + 1), B
0016d4   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 2)
0016d6   6b02     clrf	0x2, 0x1            	CLRF	(_main_string_1_1 + 2), B
0016d8   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 3)
0016da   6b03     clrf	0x3, 0x1            	CLRF	(_main_string_1_1 + 3), B
0016dc   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 4)
0016de   6b04     clrf	0x4, 0x1            	CLRF	(_main_string_1_1 + 4), B
0016e0   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 5)
0016e2   6b05     clrf	0x5, 0x1            	CLRF	(_main_string_1_1 + 5), B
0016e4   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 6)
0016e6   6b06     clrf	0x6, 0x1            	CLRF	(_main_string_1_1 + 6), B
0016e8   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 7)
0016ea   6b07     clrf	0x7, 0x1            	CLRF	(_main_string_1_1 + 7), B
0016ec   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 8)
0016ee   6b08     clrf	0x8, 0x1            	CLRF	(_main_string_1_1 + 8), B
0016f0   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 9)
0016f2   6b09     clrf	0x9, 0x1            	CLRF	(_main_string_1_1 + 9), B
0016f4   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 10)
0016f6   6b0a     clrf	0xa, 0x1            	CLRF	(_main_string_1_1 + 10), B
0016f8   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 11)
0016fa   6b0b     clrf	0xb, 0x1            	CLRF	(_main_string_1_1 + 11), B
0016fc   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 12)
0016fe   6b0c     clrf	0xc, 0x1            	CLRF	(_main_string_1_1 + 12), B
001700   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 13)
001702   6b0d     clrf	0xd, 0x1            	CLRF	(_main_string_1_1 + 13), B
001704   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 14)
001706   6b0e     clrf	0xe, 0x1            	CLRF	(_main_string_1_1 + 14), B
001708   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 15)
00170a   6b0f     clrf	0xf, 0x1            	CLRF	(_main_string_1_1 + 15), B
                                           ;	.line	89; testint.c	LED0_TRIS = 0; //configure 1st led pin as output (yellow)
00170c   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	90; testint.c	LED1_TRIS = 0; //configure 2nd led pin as output (red)
00170e   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	91; testint.c	LED2_TRIS = 0; //configure 3rd led pin as output (red)
001710   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	93; testint.c	BUTTON0_TRIS = 1; //configure button0 as input
001712   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	94; testint.c	BUTTON1_TRIS = 1; //configure button1 as input 
001714   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           ;	.line	96; testint.c	RCONbits.IPEN      = 1;   // Interrupts Priority ENable
001716   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	98; testint.c	INT1F  = 0;   //clear INT1 flag
001718   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           ;	.line	101; testint.c	INTCON3bits.INT1P  = 1; 
00171a   8cf0     bsf	0xf0, 0x6, 0         	BSF	_INTCON3bits, 6
                                           ;	.line	103; testint.c	INTCON2bits.INTEDG1= 0;
00171c   9af1     bcf	0xf1, 0x5, 0         	BCF	_INTCON2bits, 5
                                           ;	.line	106; testint.c	INTCONbits.GIE     = 1;
00171e   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	109; testint.c	INTCON3bits.INT1E  = 1;
001720   86f0     bsf	0xf0, 0x3, 0         	BSF	_INTCON3bits, 3
                                           ;	.line	110; testint.c	INTCON3bits.INT3E  = 1;
001722   8af0     bsf	0xf0, 0x5, 0         	BSF	_INTCON3bits, 5
                                           ;	.line	112; testint.c	T0CONbits.T0CS     = 1;
001724   8ad5     bsf	0xd5, 0x5, 0         	BSF	_T0CONbits, 5
                                           ;	.line	114; testint.c	LCDInit();
001726   ec63     call	0x8c6, 0            	CALL	_LCDInit
001728   f004
                                           ;	.line	115; testint.c	for(i=0;i<100;i++) dumb_delay1ms();
00172a   0e64     movlw	0x64               	MOVLW	0x64
00172c   6e00     movwf	0, 0               	MOVWF	r0x00
00172e   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00183_DS_:
001730   ec25     call	0x1a4a, 0           	CALL	_dumb_delay1ms
001732   f00d
001734   0eff     movlw	0xff               	MOVLW	0xff
001736   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001738   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00173a   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
00173c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00173e   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
001740   e1f7     bnz	0x1730               	BNZ	_00183_DS_
                                           ;	.line	117; testint.c	display_time (); 
001742   ec1b     call	0x1836, 0           	CALL	_display_time
001744   f00c
                                           ;	.line	120; testint.c	INTCON2bits.TMR0IP	 = 1; 
001746   84f1     bsf	0xf1, 0x2, 0         	BSF	_INTCON2bits, 2
                                           ;	.line	123; testint.c	TMR0F    = 0;
001748   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	126; testint.c	T0CONbits.T08BIT    = 0;
00174a   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	128; testint.c	T0CONbits.PSA       = 1;
00174c   86d5     bsf	0xd5, 0x3, 0         	BSF	_T0CONbits, 3
                                           ;	.line	130; testint.c	INTCONbits.TMR0IE   = 1;
00174e   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	132; testint.c	T0CONbits.TMR0ON    = 1;
001750   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
                                           _00179_DS_:
001752   010f     movlb	0xf                	BANKSEL	_refresh
                                           ;	.line	137; testint.c	if ( refresh == 1){
001754   5158     movf	0x58, 0, 0x1        	MOVF	_refresh, W, B
001756   0a01     xorlw	0x1                	XORLW	0x01
001758   e103     bnz	0x1760               	BNZ	_00192_DS_
00175a   010f     movlb	0xf                	BANKSEL	(_refresh + 1)
00175c   5159     movf	0x59, 0, 0x1        	MOVF	(_refresh + 1), W, B
00175e   e001     bz	0x1762                	BZ	_00193_DS_
                                           _00192_DS_:
001760   d7f8     bra	0x1752               	BRA	_00179_DS_
                                           _00193_DS_:
001762   010f     movlb	0xf                	BANKSEL	_refresh
                                           ;	.line	138; testint.c	refresh = 0;
001764   6b58     clrf	0x58, 0x1           	CLRF	_refresh, B
001766   010f     movlb	0xf                	BANKSEL	(_refresh + 1)
001768   6b59     clrf	0x59, 0x1           	CLRF	(_refresh + 1), B
                                           ;	.line	139; testint.c	display_time();
00176a   ec1b     call	0x1836, 0           	CALL	_display_time
00176c   f00c
00176e   010f     movlb	0xf                	BANKSEL	_alarmflag
                                           ;	.line	140; testint.c	if ( alarmflag == 1){
001770   5156     movf	0x56, 0, 0x1        	MOVF	_alarmflag, W, B
001772   0a01     xorlw	0x1                	XORLW	0x01
001774   e103     bnz	0x177c               	BNZ	_00194_DS_
001776   010f     movlb	0xf                	BANKSEL	(_alarmflag + 1)
001778   5157     movf	0x57, 0, 0x1        	MOVF	(_alarmflag + 1), W, B
00177a   e001     bz	0x177e                	BZ	_00195_DS_
                                           _00194_DS_:
00177c   d7ea     bra	0x1752               	BRA	_00179_DS_
                                           _00195_DS_:
                                           ;	.line	141; testint.c	alarm();
00177e   ec6d     call	0xeda, 0            	CALL	_alarm
001780   f007
001782   d7e7     bra	0x1752               	BRA	_00179_DS_
001784   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__dumb_delay1ms	code
                                           _dumb_delay1ms:
                                           ;	.line	340; testint.c	void dumb_delay1ms (void)
001a4a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001a4c   ffe5
001a4e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001a50   ffd9
                                           ;	.line	342; testint.c	TMR0H = HIGH (0x10000-EXEC_FREQ/1000);
001a52   0ed8     movlw	0xd8               	MOVLW	0xd8
001a54   6ed7     movwf	0xd7, 0            	MOVWF	_TMR0H
                                           ;	.line	343; testint.c	TMR0L = LOW  (0x10000-EXEC_FREQ/1000);
001a56   0ef0     movlw	0xf0               	MOVLW	0xf0
001a58   6ed6     movwf	0xd6, 0            	MOVWF	_TMR0L
                                           ;	.line	344; testint.c	T0CONbits.TMR0ON = 0;  //disable timer0
001a5a   9ed5     bcf	0xd5, 0x7, 0         	BCF	_T0CONbits, 7
                                           ;	.line	345; testint.c	T0CONbits.T08BIT = 0;  //use timer0 16-bit counter
001a5c   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	346; testint.c	T0CONbits.T0CS   = 0;  //use timer0 instruction cycle clock
001a5e   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	347; testint.c	T0CONbits.PSA    = 1;  //disable timer0 prescaler
001a60   86d5     bsf	0xd5, 0x3, 0         	BSF	_T0CONbits, 3
                                           ;	.line	348; testint.c	INTCONbits.T0IF   = 0;  //clear timer0 overflow bit
001a62   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	349; testint.c	T0CONbits.TMR0ON = 1;  //enable timer0
001a64   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
                                           _00378_DS_:
                                           ;	.line	350; testint.c	while(!INTCONbits.T0IF){} //busy wait for timer0 to overflow
001a66   a4f2     btfss	0xf2, 0x2, 0       	BTFSS	_INTCONbits, 2
001a68   d7fe     bra	0x1a66               	BRA	_00378_DS_
                                           ;	.line	351; testint.c	INTCONbits.T0IF   = 0;  //clear timer0 overflow bit
001a6a   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
001a6c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001a6e   ffd9
001a70   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__strlcpy	code
                                           _strlcpy:
                                           ;	.line	309; testint.c	strlcpy(char *dst, const char *src, size_t siz)
000b22   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000b24   ffe5
000b26   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000b28   ffd9
000b2a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000b2c   ffe5
000b2e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000b30   ffe5
000b32   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000b34   ffe5
000b36   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000b38   ffe5
000b3a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000b3c   ffe5
000b3e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000b40   ffe5
000b42   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000b44   ffe5
000b46   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000b48   ffe5
000b4a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000b4c   ffe5
000b4e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000b50   ffe5
000b52   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000b54   ffe5
000b56   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000b58   ffe5
000b5a   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000b5c   ffe5
000b5e   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
000b60   ffe5
000b62   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
000b64   ffe5
000b66   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
000b68   ffe5
000b6a   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
000b6c   ffe5
000b6e   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
000b70   ffe5
000b72   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
000b74   ffe5
000b76   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
000b78   ffe5
000b7a   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
000b7c   ffe5
000b7e   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
000b80   ffe5
000b82   0e02     movlw	0x2                	MOVLW	0x02
000b84   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000b86   f000
000b88   0e03     movlw	0x3                	MOVLW	0x03
000b8a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000b8c   f001
000b8e   0e04     movlw	0x4                	MOVLW	0x04
000b90   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000b92   f002
000b94   0e05     movlw	0x5                	MOVLW	0x05
000b96   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
000b98   f003
000b9a   0e06     movlw	0x6                	MOVLW	0x06
000b9c   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
000b9e   f004
000ba0   0e07     movlw	0x7                	MOVLW	0x07
000ba2   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
000ba4   f005
000ba6   0e08     movlw	0x8                	MOVLW	0x08
000ba8   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
000baa   f006
000bac   0e09     movlw	0x9                	MOVLW	0x09
000bae   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
000bb0   f007
                                           ;	.line	311; testint.c	char       *d = dst;
000bb2   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
000bb4   f008
000bb6   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
000bb8   f009
000bba   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
000bbc   f00a
                                           ;	.line	312; testint.c	const char *s = src;
000bbe   c003     movff	0x3, 0xb           	MOVFF	r0x03, r0x0b
000bc0   f00b
000bc2   c004     movff	0x4, 0xc           	MOVFF	r0x04, r0x0c
000bc4   f00c
000bc6   c005     movff	0x5, 0xd           	MOVFF	r0x05, r0x0d
000bc8   f00d
                                           ;	.line	313; testint.c	size_t      n = siz;
000bca   c006     movff	0x6, 0xe           	MOVFF	r0x06, r0x0e
000bcc   f00e
000bce   c007     movff	0x7, 0xf           	MOVFF	r0x07, r0x0f
000bd0   f00f
                                           ;	.line	316; testint.c	if (n != 0)
000bd2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000bd4   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000bd6   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000bd8   d03e     bra	0xc56                	BRA	_00358_DS_
                                           ;	.line	318; testint.c	while (--n != 0)
000bda   c003     movff	0x3, 0x10          	MOVFF	r0x03, r0x10
000bdc   f010
000bde   c004     movff	0x4, 0x11          	MOVFF	r0x04, r0x11
000be0   f011
000be2   c005     movff	0x5, 0x12          	MOVFF	r0x05, r0x12
000be4   f012
000be6   c006     movff	0x6, 0x13          	MOVFF	r0x06, r0x13
000be8   f013
000bea   c007     movff	0x7, 0x14          	MOVFF	r0x07, r0x14
000bec   f014
                                           _00354_DS_:
000bee   0eff     movlw	0xff               	MOVLW	0xff
000bf0   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x13, F
000bf2   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000bf4   0614     decf	0x14, 0x1, 0        	DECF	r0x14, F
000bf6   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
000bf8   1014     iorwf	0x14, 0, 0         	IORWF	r0x14, W
000bfa   e01d     bz	0xc36                 	BZ	_00373_DS_
                                           ;	.line	320; testint.c	if ((*d++ = *s++) == '\0')
000bfc   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
000bfe   ffe9
000c00   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
000c02   fff3
000c04   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
000c06   ec39     call	0x1a72, 0           	CALL	__gptrget1
000c08   f00d
000c0a   6e15     movwf	0x15, 0            	MOVWF	r0x15
000c0c   2a10     incf	0x10, 0x1, 0        	INCF	r0x10, F
000c0e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000c10   2a11     incf	0x11, 0x1, 0        	INCF	r0x11, F
000c12   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000c14   2a12     incf	0x12, 0x1, 0        	INCF	r0x12, F
000c16   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
000c18   ffe5
000c1a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000c1c   ffe9
000c1e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000c20   fff3
000c22   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c24   ec65     call	0x1aca, 0           	CALL	__gptrput1
000c26   f00d
000c28   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000c2a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000c2c   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000c2e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000c30   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000c32   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
000c34   e1dc     bnz	0xbee                	BNZ	_00354_DS_
                                           _00373_DS_:
                                           ;	.line	321; testint.c	break;
000c36   c010     movff	0x10, 0xb          	MOVFF	r0x10, r0x0b
000c38   f00b
000c3a   c011     movff	0x11, 0xc          	MOVFF	r0x11, r0x0c
000c3c   f00c
000c3e   c012     movff	0x12, 0xd          	MOVFF	r0x12, r0x0d
000c40   f00d
000c42   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
000c44   f008
000c46   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
000c48   f009
000c4a   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
000c4c   f00a
000c4e   c013     movff	0x13, 0xe          	MOVFF	r0x13, r0x0e
000c50   f00e
000c52   c014     movff	0x14, 0xf          	MOVFF	r0x14, r0x0f
000c54   f00f
                                           _00358_DS_:
                                           ;	.line	326; testint.c	if (n == 0)
000c56   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000c58   100f     iorwf	0xf, 0, 0          	IORWF	r0x0f, W
000c5a   e127     bnz	0xcaa                	BNZ	_00365_DS_
                                           ;	.line	328; testint.c	if (siz != 0)
000c5c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000c5e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c60   e009     bz	0xc74                 	BZ	_00372_DS_
                                           ;	.line	329; testint.c	*d = '\0';          /* NUL-terminate dst */
000c62   0e00     movlw	0                  	MOVLW	0x00
000c64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c66   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
000c68   ffe9
000c6a   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
000c6c   fff3
000c6e   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000c70   ec65     call	0x1aca, 0           	CALL	__gptrput1
000c72   f00d
                                           _00372_DS_:
                                           ;	.line	330; testint.c	while (*s++)
000c74   c00b     movff	0xb, 0             	MOVFF	r0x0b, r0x00
000c76   f000
000c78   c00c     movff	0xc, 0x1           	MOVFF	r0x0c, r0x01
000c7a   f001
000c7c   c00d     movff	0xd, 0x2           	MOVFF	r0x0d, r0x02
000c7e   f002
                                           _00361_DS_:
000c80   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000c82   ffe9
000c84   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000c86   fff3
000c88   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c8a   ec39     call	0x1a72, 0           	CALL	__gptrget1
000c8c   f00d
000c8e   6e06     movwf	0x6, 0             	MOVWF	r0x06
000c90   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000c92   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000c94   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000c96   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000c98   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000c9a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000c9c   e1f1     bnz	0xc80                	BNZ	_00361_DS_
000c9e   c000     movff	0, 0xb             	MOVFF	r0x00, r0x0b
000ca0   f00b
000ca2   c001     movff	0x1, 0xc           	MOVFF	r0x01, r0x0c
000ca4   f00c
000ca6   c002     movff	0x2, 0xd           	MOVFF	r0x02, r0x0d
000ca8   f00d
                                           _00365_DS_:
                                           ;	.line	336; testint.c	return (s - src - 1);       /* count does not include NUL */
000caa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000cac   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
000cae   6e03     movwf	0x3, 0             	MOVWF	r0x03
000cb0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000cb2   580c     subwfb	0xc, 0, 0         	SUBWFB	r0x0c, W
000cb4   6e04     movwf	0x4, 0             	MOVWF	r0x04
000cb6   0eff     movlw	0xff               	MOVLW	0xff
000cb8   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
000cba   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000cbc   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
000cbe   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
000cc0   fff3
000cc2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000cc4   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
000cc6   f015
000cc8   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
000cca   f014
000ccc   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
000cce   f013
000cd0   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
000cd2   f012
000cd4   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
000cd6   f011
000cd8   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
000cda   f010
000cdc   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
000cde   f00f
000ce0   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
000ce2   f00e
000ce4   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
000ce6   f00d
000ce8   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
000cea   f00c
000cec   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
000cee   f00b
000cf0   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
000cf2   f00a
000cf4   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
000cf6   f009
000cf8   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000cfa   f008
000cfc   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000cfe   f007
000d00   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000d02   f006
000d04   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000d06   f005
000d08   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000d0a   f004
000d0c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000d0e   f003
000d10   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000d12   f002
000d14   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000d16   f001
000d18   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000d1a   f000
000d1c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000d1e   ffd9
000d20   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__display_string	code
                                           _display_string:
                                           ;	.line	264; testint.c	void display_string(BYTE pos, char* text)
001396   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001398   ffe5
00139a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00139c   ffd9
00139e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0013a0   ffe5
0013a2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0013a4   ffe5
0013a6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0013a8   ffe5
0013aa   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0013ac   ffe5
0013ae   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0013b0   ffe5
0013b2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0013b4   ffe5
0013b6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0013b8   ffe5
0013ba   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0013bc   ffe5
0013be   0e02     movlw	0x2                	MOVLW	0x02
0013c0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0013c2   f000
0013c4   0e03     movlw	0x3                	MOVLW	0x03
0013c6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0013c8   f001
0013ca   0e04     movlw	0x4                	MOVLW	0x04
0013cc   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0013ce   f002
0013d0   0e05     movlw	0x5                	MOVLW	0x05
0013d2   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0013d4   f003
                                           ;	.line	266; testint.c	BYTE l= strlen(text)+1;
0013d6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0013d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013da   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0013dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013de   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0013e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013e2   ecb4     call	0x1968, 0           	CALL	_strlen
0013e4   f00c
0013e6   6e04     movwf	0x4, 0             	MOVWF	r0x04
0013e8   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
0013ea   f005
0013ec   0e03     movlw	0x3                	MOVLW	0x03
0013ee   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0013f0   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
                                           ;	.line	267; testint.c	BYTE max= 32-pos;
0013f2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0013f4   0820     sublw	0x20               	SUBLW	0x20
0013f6   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	268; testint.c	strlcpy((char*)&LCDText[pos], text,(l<max)?l:max );
0013f8   6a06     clrf	0x6, 0              	CLRF	r0x06
0013fa   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0013fc   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0013fe   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001400   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
001402   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001404   6e06     movwf	0x6, 0             	MOVWF	r0x06
001406   5000     movf	0, 0, 0             	MOVF	r0x00, W
001408   6e00     movwf	0, 0               	MOVWF	r0x00
00140a   0e80     movlw	0x80               	MOVLW	0x80
00140c   6e07     movwf	0x7, 0             	MOVWF	r0x07
00140e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001410   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
001412   e302     bnc	0x1418               	BNC	_00345_DS_
001414   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
001416   f004
                                           _00345_DS_:
001418   6a05     clrf	0x5, 0              	CLRF	r0x05
00141a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00141c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00141e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001420   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001422   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001424   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001426   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001428   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00142a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00142c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00142e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001430   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001432   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001434   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001436   5000     movf	0, 0, 0             	MOVF	r0x00, W
001438   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00143a   ec91     call	0xb22, 0            	CALL	_strlcpy
00143c   f005
00143e   0e08     movlw	0x8                	MOVLW	0x08
001440   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	269; testint.c	LCDUpdate();
001442   ec2e     call	0x65c, 0            	CALL	_LCDUpdate
001444   f003
001446   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001448   f007
00144a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00144c   f006
00144e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001450   f005
001452   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001454   f004
001456   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001458   f003
00145a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00145c   f002
00145e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001460   f001
001462   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001464   f000
001466   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001468   ffd9
00146a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__display_word	code
                                           _display_word:
                                           ;	.line	242; testint.c	void display_word(BYTE pos, WORD w) //WORD is a 16 bits unsigned
00115e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001160   ffe5
001162   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001164   ffd9
001166   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001168   ffe5
00116a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00116c   ffe5
00116e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001170   ffe5
001172   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001174   ffe5
001176   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001178   ffe5
00117a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00117c   ffe5
00117e   0e02     movlw	0x2                	MOVLW	0x02
001180   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001182   f000
001184   0e03     movlw	0x3                	MOVLW	0x03
001186   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001188   f001
00118a   0e04     movlw	0x4                	MOVLW	0x04
00118c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00118e   f002
                                           ;	.line	250; testint.c	ultoa(w, WDigit, radix);      
001190   6a03     clrf	0x3, 0              	CLRF	r0x03
001192   6a04     clrf	0x4, 0              	CLRF	r0x04
001194   0e0a     movlw	0xa                	MOVLW	0x0a
001196   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001198   0e0e     movlw	0xe                	MOVLW	HIGH(_display_word_WDigit_1_1)
00119a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00119c   0e10     movlw	0x10               	MOVLW	LOW(_display_word_WDigit_1_1)
00119e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011a0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0011a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011a4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0011a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011a8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0011aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011ac   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0011ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011b0   ec91     call	0xd22, 0            	CALL	_ultoa
0011b2   f006
0011b4   0e07     movlw	0x7                	MOVLW	0x07
0011b6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	251; testint.c	for(j = 0; j < strlen((char*)WDigit); j++)
0011b8   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00326_DS_:
0011ba   0e0e     movlw	0xe                	MOVLW	HIGH(_display_word_WDigit_1_1)
0011bc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0011be   0e10     movlw	0x10               	MOVLW	LOW(_display_word_WDigit_1_1)
0011c0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0011c2   0e80     movlw	0x80               	MOVLW	0x80
0011c4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0011c6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0011c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011ca   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0011cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011ce   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0011d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011d2   ecb4     call	0x1968, 0           	CALL	_strlen
0011d4   f00c
0011d6   6e02     movwf	0x2, 0             	MOVWF	r0x02
0011d8   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
0011da   f003
0011dc   0e03     movlw	0x3                	MOVLW	0x03
0011de   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0011e0   c001     movff	0x1, 0x4           	MOVFF	r0x01, r0x04
0011e2   f004
0011e4   6a05     clrf	0x5, 0              	CLRF	r0x05
0011e6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0011e8   0f80     addlw	0x80               	ADDLW	0x80
0011ea   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
0011ec   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0011ee   0f80     addlw	0x80               	ADDLW	0x80
0011f0   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
0011f2   e102     bnz	0x11f8               	BNZ	_00336_DS_
0011f4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0011f6   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00336_DS_:
0011f8   e21c     bc	0x1232                	BC	_00329_DS_
                                           ;	.line	253; testint.c	LCDText[LCDPos++] = WDigit[j];
0011fa   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
0011fc   f002
0011fe   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001200   6a03     clrf	0x3, 0              	CLRF	r0x03
001202   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001204   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
001206   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001208   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00120a   0e10     movlw	0x10               	MOVLW	LOW(_display_word_WDigit_1_1)
00120c   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
00120e   6e04     movwf	0x4, 0             	MOVWF	r0x04
001210   6a05     clrf	0x5, 0              	CLRF	r0x05
001212   0e0e     movlw	0xe                	MOVLW	HIGH(_display_word_WDigit_1_1)
001214   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001216   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
001218   ffe9
00121a   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
00121c   ffea
00121e   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
001220   f004
001222   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
001224   ffe9
001226   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
001228   ffea
00122a   c004     movff	0x4, 0xfef         	MOVFF	r0x04, INDF0
00122c   ffef
                                           ;	.line	251; testint.c	for(j = 0; j < strlen((char*)WDigit); j++)
00122e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001230   d7c4     bra	0x11ba               	BRA	_00326_DS_
                                           _00329_DS_:
                                           ;	.line	255; testint.c	if(LCDPos < 32u)
001232   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
001234   f001
001236   6a02     clrf	0x2, 0              	CLRF	r0x02
001238   0e00     movlw	0                  	MOVLW	0x00
00123a   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00123c   e102     bnz	0x1242               	BNZ	_00337_DS_
00123e   0e20     movlw	0x20               	MOVLW	0x20
001240   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00337_DS_:
001242   e20b     bc	0x125a                	BC	_00325_DS_
                                           ;	.line	256; testint.c	LCDText[LCDPos] = 0;
001244   6a01     clrf	0x1, 0              	CLRF	r0x01
001246   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001248   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00124a   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00124c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00124e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001250   ffe9
001252   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
001254   ffea
001256   0e00     movlw	0                  	MOVLW	0x00
001258   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           _00325_DS_:
                                           ;	.line	257; testint.c	LCDUpdate();
00125a   ec2e     call	0x65c, 0            	CALL	_LCDUpdate
00125c   f003
00125e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001260   f005
001262   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001264   f004
001266   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001268   f003
00126a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00126c   f002
00126e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001270   f001
001272   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001274   f000
001276   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001278   ffd9
00127a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__display_time	code
                                           _display_time:
                                           ;	.line	226; testint.c	void display_time(){    
001836   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001838   ffe5
00183a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00183c   ffd9
00183e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001840   ffe5
001842   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001844   ffe5
001846   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001848   ffe5
                                           ;	.line	227; testint.c	display_string(0,time);         
00184a   0e0f     movlw	0xf                	MOVLW	HIGH(_time)
00184c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00184e   0e41     movlw	0x41               	MOVLW	LOW(_time)
001850   6e00     movwf	0, 0               	MOVWF	r0x00
001852   0e80     movlw	0x80               	MOVLW	0x80
001854   6e02     movwf	0x2, 0             	MOVWF	r0x02
001856   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001858   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00185a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00185c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00185e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001860   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001862   0e00     movlw	0                  	MOVLW	0x00
001864   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001866   eccb     call	0x1396, 0           	CALL	_display_string
001868   f009
00186a   0e04     movlw	0x4                	MOVLW	0x04
00186c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00186e   010f     movlb	0xf                	BANKSEL	_position
                                           ;	.line	228; testint.c	if(position == 0) display_string(16+position-1," ^");
001870   5154     movf	0x54, 0, 0x1        	MOVF	_position, W, B
001872   010f     movlb	0xf                	BANKSEL	(_position + 1)
001874   1155     iorwf	0x55, 0, 0x1       	IORWF	(_position + 1), W, B
001876   e112     bnz	0x189c               	BNZ	_00317_DS_
001878   010f     movlb	0xf                	BANKSEL	_position
00187a   5154     movf	0x54, 0, 0x1        	MOVF	_position, W, B
00187c   6e00     movwf	0, 0               	MOVWF	r0x00
00187e   0e0f     movlw	0xf                	MOVLW	0x0f
001880   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001882   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
001884   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001886   0e06     movlw	0x6                	MOVLW	HIGH(__str_2)
001888   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00188a   0e52     movlw	0x52               	MOVLW	LOW(__str_2)
00188c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00188e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001890   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001892   eccb     call	0x1396, 0           	CALL	_display_string
001894   f009
001896   0e04     movlw	0x4                	MOVLW	0x04
001898   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00189a   d011     bra	0x18be               	BRA	_00319_DS_
                                           _00317_DS_:
00189c   010f     movlb	0xf                	BANKSEL	_position
                                           ;	.line	229; testint.c	else display_string(16+position-3,"   ^");
00189e   5154     movf	0x54, 0, 0x1        	MOVF	_position, W, B
0018a0   6e00     movwf	0, 0               	MOVWF	r0x00
0018a2   0e0d     movlw	0xd                	MOVLW	0x0d
0018a4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0018a6   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
0018a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018aa   0e06     movlw	0x6                	MOVLW	HIGH(__str_3)
0018ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018ae   0e56     movlw	0x56               	MOVLW	LOW(__str_3)
0018b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018b2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0018b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0018b6   eccb     call	0x1396, 0           	CALL	_display_string
0018b8   f009
0018ba   0e04     movlw	0x4                	MOVLW	0x04
0018bc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00319_DS_:
0018be   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0018c0   f002
0018c2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0018c4   f001
0018c6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0018c8   f000
0018ca   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0018cc   ffd9
0018ce   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__test_inc_current_time	code
                                           _test_inc_current_time:
                                           ;	.line	195; testint.c	void test_inc_current_time(){        
00000c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00000e   ffe5
000010   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000012   ffd9
000014   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000016   ffe5
000018   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00001a   ffe5
00001c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00001e   ffe5
000020   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000022   ffe5
000024   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000026   ffe5
000028   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00002a   ffe5
00002c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00002e   ffe5
000030   010f     movlb	0xf                	BANKSEL	_currentTime
                                           ;	.line	196; testint.c	if(currentTime[7] == ':'){
000032   5151     movf	0x51, 0, 0x1        	MOVF	_currentTime, W, B
000034   0f07     addlw	0x7                	ADDLW	0x07
000036   6e00     movwf	0, 0               	MOVWF	r0x00
000038   0e00     movlw	0                  	MOVLW	0x00
00003a   010f     movlb	0xf                	BANKSEL	(_currentTime + 1)
00003c   2152     addwfc	0x52, 0, 0x1      	ADDWFC	(_currentTime + 1), W, B
00003e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000040   0e00     movlw	0                  	MOVLW	0x00
000042   010f     movlb	0xf                	BANKSEL	(_currentTime + 2)
000044   2153     addwfc	0x53, 0, 0x1      	ADDWFC	(_currentTime + 2), W, B
000046   6e02     movwf	0x2, 0             	MOVWF	r0x02
000048   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00004a   ffe9
00004c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00004e   fff3
000050   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000052   ec39     call	0x1a72, 0           	CALL	__gptrget1
000054   f00d
000056   6e03     movwf	0x3, 0             	MOVWF	r0x03
000058   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00005a   0a3a     xorlw	0x3a               	XORLW	0x3a
00005c   e127     bnz	0xac                 	BNZ	_00272_DS_
                                           ;	.line	197; testint.c	currentTime[7] = '0';
00005e   0e30     movlw	0x30               	MOVLW	0x30
000060   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000062   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000064   ffe9
000066   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000068   fff3
00006a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00006c   ec65     call	0x1aca, 0           	CALL	__gptrput1
00006e   f00d
000070   010f     movlb	0xf                	BANKSEL	_currentTime
                                           ;	.line	198; testint.c	++currentTime[6];
000072   5151     movf	0x51, 0, 0x1        	MOVF	_currentTime, W, B
000074   0f06     addlw	0x6                	ADDLW	0x06
000076   6e00     movwf	0, 0               	MOVWF	r0x00
000078   0e00     movlw	0                  	MOVLW	0x00
00007a   010f     movlb	0xf                	BANKSEL	(_currentTime + 1)
00007c   2152     addwfc	0x52, 0, 0x1      	ADDWFC	(_currentTime + 1), W, B
00007e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000080   0e00     movlw	0                  	MOVLW	0x00
000082   010f     movlb	0xf                	BANKSEL	(_currentTime + 2)
000084   2153     addwfc	0x53, 0, 0x1      	ADDWFC	(_currentTime + 2), W, B
000086   6e02     movwf	0x2, 0             	MOVWF	r0x02
000088   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00008a   ffe9
00008c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00008e   fff3
000090   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000092   ec39     call	0x1a72, 0           	CALL	__gptrget1
000094   f00d
000096   6e03     movwf	0x3, 0             	MOVWF	r0x03
000098   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
00009a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00009c   ffe5
00009e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0000a0   ffe9
0000a2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0000a4   fff3
0000a6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0000a8   ec65     call	0x1aca, 0           	CALL	__gptrput1
0000aa   f00d
                                           _00272_DS_:
0000ac   010f     movlb	0xf                	BANKSEL	_currentTime
                                           ;	.line	200; testint.c	if(currentTime[6]=='6'){
0000ae   5151     movf	0x51, 0, 0x1        	MOVF	_currentTime, W, B
0000b0   0f06     addlw	0x6                	ADDLW	0x06
0000b2   6e00     movwf	0, 0               	MOVWF	r0x00
0000b4   0e00     movlw	0                  	MOVLW	0x00
0000b6   010f     movlb	0xf                	BANKSEL	(_currentTime + 1)
0000b8   2152     addwfc	0x52, 0, 0x1      	ADDWFC	(_currentTime + 1), W, B
0000ba   6e01     movwf	0x1, 0             	MOVWF	r0x01
0000bc   0e00     movlw	0                  	MOVLW	0x00
0000be   010f     movlb	0xf                	BANKSEL	(_currentTime + 2)
0000c0   2153     addwfc	0x53, 0, 0x1      	ADDWFC	(_currentTime + 2), W, B
0000c2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0000c4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0000c6   ffe9
0000c8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0000ca   fff3
0000cc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0000ce   ec39     call	0x1a72, 0           	CALL	__gptrget1
0000d0   f00d
0000d2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0000d4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0000d6   0a36     xorlw	0x36               	XORLW	0x36
0000d8   e12c     bnz	0x132                	BNZ	_00274_DS_
                                           ;	.line	201; testint.c	currentTime[6]='0';
0000da   0e30     movlw	0x30               	MOVLW	0x30
0000dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000de   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0000e0   ffe9
0000e2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0000e4   fff3
0000e6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0000e8   ec65     call	0x1aca, 0           	CALL	__gptrput1
0000ea   f00d
0000ec   010f     movlb	0xf                	BANKSEL	_currentTime
                                           ;	.line	202; testint.c	currentTime[4]++;
0000ee   5151     movf	0x51, 0, 0x1        	MOVF	_currentTime, W, B
0000f0   0f04     addlw	0x4                	ADDLW	0x04
0000f2   6e00     movwf	0, 0               	MOVWF	r0x00
0000f4   0e00     movlw	0                  	MOVLW	0x00
0000f6   010f     movlb	0xf                	BANKSEL	(_currentTime + 1)
0000f8   2152     addwfc	0x52, 0, 0x1      	ADDWFC	(_currentTime + 1), W, B
0000fa   6e01     movwf	0x1, 0             	MOVWF	r0x01
0000fc   0e00     movlw	0                  	MOVLW	0x00
0000fe   010f     movlb	0xf                	BANKSEL	(_currentTime + 2)
000100   2153     addwfc	0x53, 0, 0x1      	ADDWFC	(_currentTime + 2), W, B
000102   6e02     movwf	0x2, 0             	MOVWF	r0x02
000104   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000106   ffe9
000108   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00010a   fff3
00010c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00010e   ec39     call	0x1a72, 0           	CALL	__gptrget1
000110   f00d
000112   6e03     movwf	0x3, 0             	MOVWF	r0x03
000114   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000116   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000118   ffe5
00011a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00011c   ffe9
00011e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000120   fff3
000122   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000124   ec65     call	0x1aca, 0           	CALL	__gptrput1
000126   f00d
                                           ;	.line	203; testint.c	alarmflag = 1;
000128   0e01     movlw	0x1                	MOVLW	0x01
00012a   010f     movlb	0xf                	BANKSEL	_alarmflag
00012c   6f56     movwf	0x56, 0x1          	MOVWF	_alarmflag, B
00012e   010f     movlb	0xf                	BANKSEL	(_alarmflag + 1)
000130   6b57     clrf	0x57, 0x1           	CLRF	(_alarmflag + 1), B
                                           _00274_DS_:
000132   010f     movlb	0xf                	BANKSEL	_currentTime
                                           ;	.line	205; testint.c	if(currentTime[4] == ':'){
000134   5151     movf	0x51, 0, 0x1        	MOVF	_currentTime, W, B
000136   0f04     addlw	0x4                	ADDLW	0x04
000138   6e00     movwf	0, 0               	MOVWF	r0x00
00013a   0e00     movlw	0                  	MOVLW	0x00
00013c   010f     movlb	0xf                	BANKSEL	(_currentTime + 1)
00013e   2152     addwfc	0x52, 0, 0x1      	ADDWFC	(_currentTime + 1), W, B
000140   6e01     movwf	0x1, 0             	MOVWF	r0x01
000142   0e00     movlw	0                  	MOVLW	0x00
000144   010f     movlb	0xf                	BANKSEL	(_currentTime + 2)
000146   2153     addwfc	0x53, 0, 0x1      	ADDWFC	(_currentTime + 2), W, B
000148   6e02     movwf	0x2, 0             	MOVWF	r0x02
00014a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00014c   ffe9
00014e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000150   fff3
000152   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000154   ec39     call	0x1a72, 0           	CALL	__gptrget1
000156   f00d
000158   6e03     movwf	0x3, 0             	MOVWF	r0x03
00015a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00015c   0a3a     xorlw	0x3a               	XORLW	0x3a
00015e   e127     bnz	0x1ae                	BNZ	_00276_DS_
                                           ;	.line	206; testint.c	currentTime[4] = '0';
000160   0e30     movlw	0x30               	MOVLW	0x30
000162   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000164   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000166   ffe9
000168   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00016a   fff3
00016c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00016e   ec65     call	0x1aca, 0           	CALL	__gptrput1
000170   f00d
000172   010f     movlb	0xf                	BANKSEL	_currentTime
                                           ;	.line	207; testint.c	++currentTime[3];
000174   5151     movf	0x51, 0, 0x1        	MOVF	_currentTime, W, B
000176   0f03     addlw	0x3                	ADDLW	0x03
000178   6e00     movwf	0, 0               	MOVWF	r0x00
00017a   0e00     movlw	0                  	MOVLW	0x00
00017c   010f     movlb	0xf                	BANKSEL	(_currentTime + 1)
00017e   2152     addwfc	0x52, 0, 0x1      	ADDWFC	(_currentTime + 1), W, B
000180   6e01     movwf	0x1, 0             	MOVWF	r0x01
000182   0e00     movlw	0                  	MOVLW	0x00
000184   010f     movlb	0xf                	BANKSEL	(_currentTime + 2)
000186   2153     addwfc	0x53, 0, 0x1      	ADDWFC	(_currentTime + 2), W, B
000188   6e02     movwf	0x2, 0             	MOVWF	r0x02
00018a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00018c   ffe9
00018e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000190   fff3
000192   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000194   ec39     call	0x1a72, 0           	CALL	__gptrget1
000196   f00d
000198   6e03     movwf	0x3, 0             	MOVWF	r0x03
00019a   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
00019c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00019e   ffe5
0001a0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0001a2   ffe9
0001a4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0001a6   fff3
0001a8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001aa   ec65     call	0x1aca, 0           	CALL	__gptrput1
0001ac   f00d
                                           _00276_DS_:
0001ae   010f     movlb	0xf                	BANKSEL	_currentTime
                                           ;	.line	209; testint.c	if(currentTime[3]=='6'){
0001b0   5151     movf	0x51, 0, 0x1        	MOVF	_currentTime, W, B
0001b2   0f03     addlw	0x3                	ADDLW	0x03
0001b4   6e00     movwf	0, 0               	MOVWF	r0x00
0001b6   0e00     movlw	0                  	MOVLW	0x00
0001b8   010f     movlb	0xf                	BANKSEL	(_currentTime + 1)
0001ba   2152     addwfc	0x52, 0, 0x1      	ADDWFC	(_currentTime + 1), W, B
0001bc   6e01     movwf	0x1, 0             	MOVWF	r0x01
0001be   0e00     movlw	0                  	MOVLW	0x00
0001c0   010f     movlb	0xf                	BANKSEL	(_currentTime + 2)
0001c2   2153     addwfc	0x53, 0, 0x1      	ADDWFC	(_currentTime + 2), W, B
0001c4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0001c6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0001c8   ffe9
0001ca   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0001cc   fff3
0001ce   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001d0   ec39     call	0x1a72, 0           	CALL	__gptrget1
0001d2   f00d
0001d4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0001d6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0001d8   0a36     xorlw	0x36               	XORLW	0x36
0001da   e127     bnz	0x22a                	BNZ	_00278_DS_
                                           ;	.line	210; testint.c	currentTime[3]='0';
0001dc   0e30     movlw	0x30               	MOVLW	0x30
0001de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001e0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0001e2   ffe9
0001e4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0001e6   fff3
0001e8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001ea   ec65     call	0x1aca, 0           	CALL	__gptrput1
0001ec   f00d
0001ee   010f     movlb	0xf                	BANKSEL	_currentTime
                                           ;	.line	211; testint.c	currentTime[1]++;
0001f0   5151     movf	0x51, 0, 0x1        	MOVF	_currentTime, W, B
0001f2   0f01     addlw	0x1                	ADDLW	0x01
0001f4   6e00     movwf	0, 0               	MOVWF	r0x00
0001f6   0e00     movlw	0                  	MOVLW	0x00
0001f8   010f     movlb	0xf                	BANKSEL	(_currentTime + 1)
0001fa   2152     addwfc	0x52, 0, 0x1      	ADDWFC	(_currentTime + 1), W, B
0001fc   6e01     movwf	0x1, 0             	MOVWF	r0x01
0001fe   0e00     movlw	0                  	MOVLW	0x00
000200   010f     movlb	0xf                	BANKSEL	(_currentTime + 2)
000202   2153     addwfc	0x53, 0, 0x1      	ADDWFC	(_currentTime + 2), W, B
000204   6e02     movwf	0x2, 0             	MOVWF	r0x02
000206   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000208   ffe9
00020a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00020c   fff3
00020e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000210   ec39     call	0x1a72, 0           	CALL	__gptrget1
000212   f00d
000214   6e03     movwf	0x3, 0             	MOVWF	r0x03
000216   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000218   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00021a   ffe5
00021c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00021e   ffe9
000220   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000222   fff3
000224   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000226   ec65     call	0x1aca, 0           	CALL	__gptrput1
000228   f00d
                                           _00278_DS_:
00022a   010f     movlb	0xf                	BANKSEL	_currentTime
                                           ;	.line	213; testint.c	if(currentTime[1] == ':'){
00022c   5151     movf	0x51, 0, 0x1        	MOVF	_currentTime, W, B
00022e   0f01     addlw	0x1                	ADDLW	0x01
000230   6e00     movwf	0, 0               	MOVWF	r0x00
000232   0e00     movlw	0                  	MOVLW	0x00
000234   010f     movlb	0xf                	BANKSEL	(_currentTime + 1)
000236   2152     addwfc	0x52, 0, 0x1      	ADDWFC	(_currentTime + 1), W, B
000238   6e01     movwf	0x1, 0             	MOVWF	r0x01
00023a   0e00     movlw	0                  	MOVLW	0x00
00023c   010f     movlb	0xf                	BANKSEL	(_currentTime + 2)
00023e   2153     addwfc	0x53, 0, 0x1      	ADDWFC	(_currentTime + 2), W, B
000240   6e02     movwf	0x2, 0             	MOVWF	r0x02
000242   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000244   ffe9
000246   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000248   fff3
00024a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00024c   ec39     call	0x1a72, 0           	CALL	__gptrget1
00024e   f00d
000250   6e03     movwf	0x3, 0             	MOVWF	r0x03
000252   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000254   0a3a     xorlw	0x3a               	XORLW	0x3a
000256   e121     bnz	0x29a                	BNZ	_00280_DS_
                                           ;	.line	214; testint.c	currentTime[1] = '0';
000258   0e30     movlw	0x30               	MOVLW	0x30
00025a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00025c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00025e   ffe9
000260   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000262   fff3
000264   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000266   ec65     call	0x1aca, 0           	CALL	__gptrput1
000268   f00d
                                           ;	.line	215; testint.c	++currentTime[0];
00026a   cf51     movff	0xf51, 0x3         	MOVFF	_currentTime, r0x03
00026c   f003
00026e   cf52     movff	0xf52, 0x4         	MOVFF	(_currentTime + 1), r0x04
000270   f004
000272   cf53     movff	0xf53, 0x5         	MOVFF	(_currentTime + 2), r0x05
000274   f005
000276   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
000278   ffe9
00027a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00027c   fff3
00027e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000280   ec39     call	0x1a72, 0           	CALL	__gptrget1
000282   f00d
000284   6e06     movwf	0x6, 0             	MOVWF	r0x06
000286   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
000288   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00028a   ffe5
00028c   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00028e   ffe9
000290   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
000292   fff3
000294   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000296   ec65     call	0x1aca, 0           	CALL	__gptrput1
000298   f00d
                                           _00280_DS_:
                                           ;	.line	217; testint.c	if(currentTime[0]=='2' && currentTime[1]=='4'){
00029a   cf51     movff	0xf51, 0x3         	MOVFF	_currentTime, r0x03
00029c   f003
00029e   cf52     movff	0xf52, 0x4         	MOVFF	(_currentTime + 1), r0x04
0002a0   f004
0002a2   cf53     movff	0xf53, 0x5         	MOVFF	(_currentTime + 2), r0x05
0002a4   f005
0002a6   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0002a8   ffe9
0002aa   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0002ac   fff3
0002ae   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0002b0   ec39     call	0x1a72, 0           	CALL	__gptrget1
0002b2   f00d
0002b4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0002b6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002b8   0a32     xorlw	0x32               	XORLW	0x32
0002ba   e123     bnz	0x302                	BNZ	_00282_DS_
0002bc   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0002be   ffe9
0002c0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0002c2   fff3
0002c4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0002c6   ec39     call	0x1a72, 0           	CALL	__gptrget1
0002c8   f00d
0002ca   6e03     movwf	0x3, 0             	MOVWF	r0x03
0002cc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002ce   0a34     xorlw	0x34               	XORLW	0x34
0002d0   e118     bnz	0x302                	BNZ	_00282_DS_
                                           ;	.line	218; testint.c	currentTime[0]='0';
0002d2   cf51     movff	0xf51, 0x3         	MOVFF	_currentTime, r0x03
0002d4   f003
0002d6   cf52     movff	0xf52, 0x4         	MOVFF	(_currentTime + 1), r0x04
0002d8   f004
0002da   cf53     movff	0xf53, 0x5         	MOVFF	(_currentTime + 2), r0x05
0002dc   f005
0002de   0e30     movlw	0x30               	MOVLW	0x30
0002e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002e2   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0002e4   ffe9
0002e6   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0002e8   fff3
0002ea   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0002ec   ec65     call	0x1aca, 0           	CALL	__gptrput1
0002ee   f00d
                                           ;	.line	219; testint.c	currentTime[1]='0';
0002f0   0e30     movlw	0x30               	MOVLW	0x30
0002f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002f4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0002f6   ffe9
0002f8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0002fa   fff3
0002fc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0002fe   ec65     call	0x1aca, 0           	CALL	__gptrput1
000300   f00d
                                           _00282_DS_:
                                           ;	.line	221; testint.c	if(currentTime[0]=='3'){
000302   cf51     movff	0xf51, 0           	MOVFF	_currentTime, r0x00
000304   f000
000306   cf52     movff	0xf52, 0x1         	MOVFF	(_currentTime + 1), r0x01
000308   f001
00030a   cf53     movff	0xf53, 0x2         	MOVFF	(_currentTime + 2), r0x02
00030c   f002
00030e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000310   ffe9
000312   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000314   fff3
000316   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000318   ec39     call	0x1a72, 0           	CALL	__gptrget1
00031a   f00d
00031c   6e00     movwf	0, 0               	MOVWF	r0x00
00031e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000320   0a33     xorlw	0x33               	XORLW	0x33
000322   e10f     bnz	0x342                	BNZ	_00286_DS_
                                           ;	.line	222; testint.c	currentTime[0]='0';
000324   cf51     movff	0xf51, 0           	MOVFF	_currentTime, r0x00
000326   f000
000328   cf52     movff	0xf52, 0x1         	MOVFF	(_currentTime + 1), r0x01
00032a   f001
00032c   cf53     movff	0xf53, 0x2         	MOVFF	(_currentTime + 2), r0x02
00032e   f002
000330   0e30     movlw	0x30               	MOVLW	0x30
000332   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000334   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000336   ffe9
000338   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00033a   fff3
00033c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00033e   ec65     call	0x1aca, 0           	CALL	__gptrput1
000340   f00d
                                           _00286_DS_:
000342   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000344   f006
000346   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000348   f005
00034a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00034c   f004
00034e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000350   f003
000352   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000354   f002
000356   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000358   f001
00035a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00035c   f000
00035e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000360   ffd9
000362   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__alarm	code
                                           _alarm:
                                           ;	.line	171; testint.c	void alarm(){
000eda   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000edc   ffe5
000ede   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000ee0   ffd9
000ee2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000ee4   ffe5
000ee6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000ee8   ffe5
000eea   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000eec   ffe5
000eee   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000ef0   ffe5
000ef2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000ef4   ffe5
000ef6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000ef8   ffe5
000efa   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000efc   ffe5
                                           ;	.line	172; testint.c	int blink = 1;
000efe   0e01     movlw	0x1                	MOVLW	0x01
000f00   6e00     movwf	0, 0               	MOVWF	r0x00
000f02   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	173; testint.c	int i = 0;
000f04   6a02     clrf	0x2, 0              	CLRF	r0x02
000f06   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00240_DS_:
                                           ;	.line	176; testint.c	for(i; i<5; i++){
000f08   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000f0a   0f80     addlw	0x80               	ADDLW	0x80
000f0c   0f80     addlw	0x80               	ADDLW	0x80
000f0e   e102     bnz	0xf14                	BNZ	_00263_DS_
000f10   0e05     movlw	0x5                	MOVLW	0x05
000f12   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00263_DS_:
000f14   e22e     bc	0xf72                 	BC	_00243_DS_
                                           ;	.line	177; testint.c	if(currentTime[i]!=time[i]){
000f16   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000f18   010f     movlb	0xf                	BANKSEL	_currentTime
000f1a   2551     addwf	0x51, 0, 0x1       	ADDWF	_currentTime, W, B
000f1c   6e04     movwf	0x4, 0             	MOVWF	r0x04
000f1e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000f20   010f     movlb	0xf                	BANKSEL	(_currentTime + 1)
000f22   2152     addwfc	0x52, 0, 0x1      	ADDWFC	(_currentTime + 1), W, B
000f24   6e05     movwf	0x5, 0             	MOVWF	r0x05
000f26   6ae8     clrf	0xe8, 0             	CLRF	WREG
000f28   be03     btfsc	0x3, 0x7, 0        	BTFSC	r0x03, 7
000f2a   68e8     setf	0xe8, 0             	SETF	WREG
000f2c   010f     movlb	0xf                	BANKSEL	(_currentTime + 2)
000f2e   2153     addwfc	0x53, 0, 0x1      	ADDWFC	(_currentTime + 2), W, B
000f30   6e06     movwf	0x6, 0             	MOVWF	r0x06
000f32   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
000f34   ffe9
000f36   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
000f38   fff3
000f3a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000f3c   ec39     call	0x1a72, 0           	CALL	__gptrget1
000f3e   f00d
000f40   6e04     movwf	0x4, 0             	MOVWF	r0x04
000f42   0e41     movlw	0x41               	MOVLW	LOW(_time)
000f44   2402     addwf	0x2, 0, 0          	ADDWF	r0x02, W
000f46   6e05     movwf	0x5, 0             	MOVWF	r0x05
000f48   0e0f     movlw	0xf                	MOVLW	HIGH(_time)
000f4a   2003     addwfc	0x3, 0, 0         	ADDWFC	r0x03, W
000f4c   6e06     movwf	0x6, 0             	MOVWF	r0x06
000f4e   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
000f50   ffe9
000f52   c006     movff	0x6, 0xfea         	MOVFF	r0x06, FSR0H
000f54   ffea
000f56   cfef     movff	0xfef, 0x5         	MOVFF	INDF0, r0x05
000f58   f005
000f5a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000f5c   1805     xorwf	0x5, 0, 0          	XORWF	r0x05, W
000f5e   e005     bz	0xf6a                 	BZ	_00242_DS_
                                           ;	.line	178; testint.c	blink = 0;
000f60   6a00     clrf	0, 0                	CLRF	r0x00
000f62   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	179; testint.c	i = 5;
000f64   0e05     movlw	0x5                	MOVLW	0x05
000f66   6e02     movwf	0x2, 0             	MOVWF	r0x02
000f68   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00242_DS_:
                                           ;	.line	176; testint.c	for(i; i<5; i++){
000f6a   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000f6c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000f6e   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000f70   d7cb     bra	0xf08                	BRA	_00240_DS_
                                           _00243_DS_:
                                           ;	.line	182; testint.c	if(blink){
000f72   5000     movf	0, 0, 0             	MOVF	r0x00, W
000f74   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
000f76   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000f78   d04b     bra	0x1010               	BRA	_00239_DS_
                                           ;	.line	183; testint.c	display_string(0,"    Wake up!    ");
000f7a   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
000f7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f7e   0e06     movlw	0x6                	MOVLW	HIGH(__str_0)
000f80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f82   0e2e     movlw	0x2e               	MOVLW	LOW(__str_0)
000f84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f86   0e00     movlw	0                  	MOVLW	0x00
000f88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f8a   eccb     call	0x1396, 0           	CALL	_display_string
000f8c   f009
000f8e   0e04     movlw	0x4                	MOVLW	0x04
000f90   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	184; testint.c	display_string(16, "                ");
000f92   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
000f94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f96   0e06     movlw	0x6                	MOVLW	HIGH(__str_1)
000f98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f9a   0e40     movlw	0x40               	MOVLW	LOW(__str_1)
000f9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f9e   0e10     movlw	0x10               	MOVLW	0x10
000fa0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fa2   eccb     call	0x1396, 0           	CALL	_display_string
000fa4   f009
000fa6   0e04     movlw	0x4                	MOVLW	0x04
000fa8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	185; testint.c	for(j; j<30; j++){
000faa   6a00     clrf	0, 0                	CLRF	r0x00
000fac   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00247_DS_:
000fae   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000fb0   0f80     addlw	0x80               	ADDLW	0x80
000fb2   0f80     addlw	0x80               	ADDLW	0x80
000fb4   e102     bnz	0xfba                	BNZ	_00266_DS_
000fb6   0e1e     movlw	0x1e               	MOVLW	0x1e
000fb8   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00266_DS_:
000fba   e21d     bc	0xff6                 	BC	_00250_DS_
                                           ;	.line	186; testint.c	LED1_IO ^=1;
000fbc   6a02     clrf	0x2, 0              	CLRF	r0x02
000fbe   b291     btfsc	0x91, 0x1, 0       	BTFSC	_LATJbits, 1
000fc0   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000fc2   0e01     movlw	0x1                	MOVLW	0x01
000fc4   1a02     xorwf	0x2, 0x1, 0        	XORWF	r0x02, F
000fc6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000fc8   0b01     andlw	0x1                	ANDLW	0x01
000fca   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
000fcc   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000fce   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
000fd0   0bfd     andlw	0xfd               	ANDLW	0xfd
000fd2   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
000fd4   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
                                           ;	.line	187; testint.c	for(k=0; k<40;++k) 
000fd6   0e28     movlw	0x28               	MOVLW	0x28
000fd8   6e02     movwf	0x2, 0             	MOVWF	r0x02
000fda   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00246_DS_:
                                           ;	.line	188; testint.c	dumb_delay1ms();
000fdc   ec25     call	0x1a4a, 0           	CALL	_dumb_delay1ms
000fde   f00d
000fe0   0eff     movlw	0xff               	MOVLW	0xff
000fe2   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
000fe4   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000fe6   0603     decf	0x3, 0x1, 0         	DECF	r0x03, F
                                           ;	.line	187; testint.c	for(k=0; k<40;++k) 
000fe8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000fea   1003     iorwf	0x3, 0, 0          	IORWF	r0x03, W
000fec   e1f7     bnz	0xfdc                	BNZ	_00246_DS_
                                           ;	.line	185; testint.c	for(j; j<30; j++){
000fee   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000ff0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000ff2   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000ff4   d7dc     bra	0xfae                	BRA	_00247_DS_
                                           _00250_DS_:
                                           ;	.line	190; testint.c	LED1_IO ^=1;
000ff6   6a00     clrf	0, 0                	CLRF	r0x00
000ff8   b291     btfsc	0x91, 0x1, 0       	BTFSC	_LATJbits, 1
000ffa   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000ffc   0e01     movlw	0x1                	MOVLW	0x01
000ffe   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
001000   5000     movf	0, 0, 0             	MOVF	r0x00, W
001002   0b01     andlw	0x1                	ANDLW	0x01
001004   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
001006   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
001008   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
00100a   0bfd     andlw	0xfd               	ANDLW	0xfd
00100c   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00100e   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
                                           _00239_DS_:
001010   010f     movlb	0xf                	BANKSEL	_alarmflag
                                           ;	.line	192; testint.c	alarmflag = 0;
001012   6b56     clrf	0x56, 0x1           	CLRF	_alarmflag, B
001014   010f     movlb	0xf                	BANKSEL	(_alarmflag + 1)
001016   6b57     clrf	0x57, 0x1           	CLRF	(_alarmflag + 1), B
001018   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00101a   f006
00101c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00101e   f005
001020   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001022   f004
001024   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001026   f003
001028   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00102a   f002
00102c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00102e   f001
001030   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001032   f000
001034   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001036   ffd9
001038   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__increment_time	code
                                           _increment_time:
                                           ;	.line	147; testint.c	void increment_time(){
00146c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00146e   ffe5
001470   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001472   ffd9
001474   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001476   ffe5
001478   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00147a   ffe5
00147c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00147e   ffe5
                                           ;	.line	148; testint.c	time[position]++;
001480   0e41     movlw	0x41               	MOVLW	LOW(_time)
001482   010f     movlb	0xf                	BANKSEL	_position
001484   2554     addwf	0x54, 0, 0x1       	ADDWF	_position, W, B
001486   6e00     movwf	0, 0               	MOVWF	r0x00
001488   0e0f     movlw	0xf                	MOVLW	HIGH(_time)
00148a   010f     movlb	0xf                	BANKSEL	(_position + 1)
00148c   2155     addwfc	0x55, 0, 0x1      	ADDWFC	(_position + 1), W, B
00148e   6e01     movwf	0x1, 0             	MOVWF	r0x01
001490   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001492   ffe9
001494   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
001496   ffea
001498   cfef     movff	0xfef, 0x2         	MOVFF	INDF0, r0x02
00149a   f002
00149c   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
00149e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0014a0   ffe9
0014a2   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
0014a4   ffea
0014a6   c002     movff	0x2, 0xfef         	MOVFF	r0x02, INDF0
0014a8   ffef
0014aa   010f     movlb	0xf                	BANKSEL	(_time + 4)
                                           ;	.line	149; testint.c	if(time[4] == ':'){
0014ac   5145     movf	0x45, 0, 0x1        	MOVF	(_time + 4), W, B
0014ae   0a3a     xorlw	0x3a               	XORLW	0x3a
0014b0   e109     bnz	0x14c4               	BNZ	_00201_DS_
                                           ;	.line	150; testint.c	time[4] = '0';
0014b2   0e30     movlw	0x30               	MOVLW	0x30
0014b4   010f     movlb	0xf                	BANKSEL	(_time + 4)
0014b6   6f45     movwf	0x45, 0x1          	MOVWF	(_time + 4), B
0014b8   010f     movlb	0xf                	BANKSEL	(_time + 3)
                                           ;	.line	151; testint.c	++time[3];
0014ba   2944     incf	0x44, 0, 0x1        	INCF	(_time + 3), W, B
0014bc   6e00     movwf	0, 0               	MOVWF	r0x00
0014be   5000     movf	0, 0, 0             	MOVF	r0x00, W
0014c0   010f     movlb	0xf                	BANKSEL	(_time + 3)
0014c2   6f44     movwf	0x44, 0x1          	MOVWF	(_time + 3), B
                                           _00201_DS_:
0014c4   010f     movlb	0xf                	BANKSEL	(_time + 3)
                                           ;	.line	153; testint.c	if(time[3]=='6'){
0014c6   5144     movf	0x44, 0, 0x1        	MOVF	(_time + 3), W, B
0014c8   0a36     xorlw	0x36               	XORLW	0x36
0014ca   e109     bnz	0x14de               	BNZ	_00203_DS_
                                           ;	.line	154; testint.c	time[3]='0';
0014cc   0e30     movlw	0x30               	MOVLW	0x30
0014ce   010f     movlb	0xf                	BANKSEL	(_time + 3)
0014d0   6f44     movwf	0x44, 0x1          	MOVWF	(_time + 3), B
                                           ;	.line	155; testint.c	time[1]++;
0014d2   cf42     movff	0xf42, 0           	MOVFF	(_time + 1), r0x00
0014d4   f000
0014d6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0014d8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0014da   010f     movlb	0xf                	BANKSEL	(_time + 1)
0014dc   6f42     movwf	0x42, 0x1          	MOVWF	(_time + 1), B
                                           _00203_DS_:
                                           ;	.line	157; testint.c	if(time[1] == ':'){
0014de   cf42     movff	0xf42, 0           	MOVFF	(_time + 1), r0x00
0014e0   f000
0014e2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0014e4   0a3a     xorlw	0x3a               	XORLW	0x3a
0014e6   e10a     bnz	0x14fc               	BNZ	_00211_DS_
                                           ;	.line	158; testint.c	time[1] = '0';
0014e8   0e30     movlw	0x30               	MOVLW	0x30
0014ea   010f     movlb	0xf                	BANKSEL	(_time + 1)
0014ec   6f42     movwf	0x42, 0x1          	MOVWF	(_time + 1), B
0014ee   010f     movlb	0xf                	BANKSEL	_time
                                           ;	.line	159; testint.c	++time[0];
0014f0   2941     incf	0x41, 0, 0x1        	INCF	_time, W, B
0014f2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0014f4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0014f6   010f     movlb	0xf                	BANKSEL	_time
0014f8   6f41     movwf	0x41, 0x1          	MOVWF	_time, B
0014fa   d016     bra	0x1528               	BRA	_00213_DS_
                                           _00211_DS_:
                                           ;	.line	161; testint.c	else if(time[0]=='2' && time[1]>='4'){
0014fc   cf41     movff	0xf41, 0x1         	MOVFF	_time, r0x01
0014fe   f001
001500   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001502   0a32     xorlw	0x32               	XORLW	0x32
001504   e10b     bnz	0x151c               	BNZ	_00207_DS_
001506   5000     movf	0, 0, 0             	MOVF	r0x00, W
001508   0f80     addlw	0x80               	ADDLW	0x80
00150a   0f4c     addlw	0x4c               	ADDLW	0x4c
00150c   e307     bnc	0x151c               	BNC	_00207_DS_
                                           ;	.line	162; testint.c	time[0]='0';
00150e   0e30     movlw	0x30               	MOVLW	0x30
001510   010f     movlb	0xf                	BANKSEL	_time
001512   6f41     movwf	0x41, 0x1          	MOVWF	_time, B
                                           ;	.line	163; testint.c	time[1]='0';
001514   0e30     movlw	0x30               	MOVLW	0x30
001516   010f     movlb	0xf                	BANKSEL	(_time + 1)
001518   6f42     movwf	0x42, 0x1          	MOVWF	(_time + 1), B
00151a   d006     bra	0x1528               	BRA	_00213_DS_
                                           _00207_DS_:
                                           ;	.line	165; testint.c	else if(time[0]=='3'){
00151c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00151e   0a33     xorlw	0x33               	XORLW	0x33
001520   e103     bnz	0x1528               	BNZ	_00213_DS_
                                           ;	.line	166; testint.c	time[0]='0';
001522   0e30     movlw	0x30               	MOVLW	0x30
001524   010f     movlb	0xf                	BANKSEL	_time
001526   6f41     movwf	0x41, 0x1          	MOVWF	_time, B
                                           _00213_DS_:
001528   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00152a   f002
00152c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00152e   f001
001530   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001532   f000
001534   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001536   ffd9
001538   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__high_isr	code
                                           _high_isr:
                                           ;	.line	38; testint.c	void high_isr (void) __interrupt 1
000364   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
000366   ffe5
000368   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
00036a   ffe5
00036c   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
00036e   ffe5
000370   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
000372   ffe5
000374   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
000376   ffe5
000378   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
00037a   ffe5
00037c   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
00037e   ffe5
000380   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
000382   ffe5
000384   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
000386   ffe5
000388   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00038a   ffe5
00038c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00038e   ffd9
000390   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000392   ffe5
000394   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000396   ffe5
000398   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00039a   ffe5
00039c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00039e   ffe5
                                           ;	.line	41; testint.c	if (INT3F)
0003a0   a4f0     btfss	0xf0, 0x2, 0       	BTFSS	_INTCON3bits, 2
0003a2   d081     bra	0x4a6                	BRA	_00117_DS_
0003a4   010f     movlb	0xf                	BANKSEL	(_position + 1)
                                           ;	.line	43; testint.c	if(position<2 || (position>2 && position<5))
0003a6   5155     movf	0x55, 0, 0x1        	MOVF	(_position + 1), W, B
0003a8   0f80     addlw	0x80               	ADDLW	0x80
0003aa   0f80     addlw	0x80               	ADDLW	0x80
0003ac   e103     bnz	0x3b4                	BNZ	_00150_DS_
0003ae   0e02     movlw	0x2                	MOVLW	0x02
0003b0   010f     movlb	0xf                	BANKSEL	_position
0003b2   5d54     subwf	0x54, 0, 0x1       	SUBWF	_position, W, B
                                           _00150_DS_:
0003b4   e312     bnc	0x3da                	BNC	_00105_DS_
0003b6   010f     movlb	0xf                	BANKSEL	(_position + 1)
0003b8   5155     movf	0x55, 0, 0x1        	MOVF	(_position + 1), W, B
0003ba   0f80     addlw	0x80               	ADDLW	0x80
0003bc   0f80     addlw	0x80               	ADDLW	0x80
0003be   e103     bnz	0x3c6                	BNZ	_00151_DS_
0003c0   0e03     movlw	0x3                	MOVLW	0x03
0003c2   010f     movlb	0xf                	BANKSEL	_position
0003c4   5d54     subwf	0x54, 0, 0x1       	SUBWF	_position, W, B
                                           _00151_DS_:
0003c6   e30b     bnc	0x3de                	BNC	_00106_DS_
0003c8   010f     movlb	0xf                	BANKSEL	(_position + 1)
0003ca   5155     movf	0x55, 0, 0x1        	MOVF	(_position + 1), W, B
0003cc   0f80     addlw	0x80               	ADDLW	0x80
0003ce   0f80     addlw	0x80               	ADDLW	0x80
0003d0   e103     bnz	0x3d8                	BNZ	_00152_DS_
0003d2   0e05     movlw	0x5                	MOVLW	0x05
0003d4   010f     movlb	0xf                	BANKSEL	_position
0003d6   5d54     subwf	0x54, 0, 0x1       	SUBWF	_position, W, B
                                           _00152_DS_:
0003d8   e202     bc	0x3de                 	BC	_00106_DS_
                                           _00105_DS_:
                                           ;	.line	44; testint.c	increment_time();
0003da   ec36     call	0x146c, 0           	CALL	_increment_time
0003dc   f00a
                                           _00106_DS_:
0003de   010f     movlb	0xf                	BANKSEL	(_position + 1)
                                           ;	.line	46; testint.c	if((position>6 && position<9) || (position>9 && position<12) || (position>12 && position<15)){
0003e0   5155     movf	0x55, 0, 0x1        	MOVF	(_position + 1), W, B
0003e2   0f80     addlw	0x80               	ADDLW	0x80
0003e4   0f80     addlw	0x80               	ADDLW	0x80
0003e6   e103     bnz	0x3ee                	BNZ	_00153_DS_
0003e8   0e07     movlw	0x7                	MOVLW	0x07
0003ea   010f     movlb	0xf                	BANKSEL	_position
0003ec   5d54     subwf	0x54, 0, 0x1       	SUBWF	_position, W, B
                                           _00153_DS_:
0003ee   e309     bnc	0x402                	BNC	_00113_DS_
0003f0   010f     movlb	0xf                	BANKSEL	(_position + 1)
0003f2   5155     movf	0x55, 0, 0x1        	MOVF	(_position + 1), W, B
0003f4   0f80     addlw	0x80               	ADDLW	0x80
0003f6   0f80     addlw	0x80               	ADDLW	0x80
0003f8   e103     bnz	0x400                	BNZ	_00154_DS_
0003fa   0e09     movlw	0x9                	MOVLW	0x09
0003fc   010f     movlb	0xf                	BANKSEL	_position
0003fe   5d54     subwf	0x54, 0, 0x1       	SUBWF	_position, W, B
                                           _00154_DS_:
000400   e324     bnc	0x44a                	BNC	_00109_DS_
                                           _00113_DS_:
000402   010f     movlb	0xf                	BANKSEL	(_position + 1)
000404   5155     movf	0x55, 0, 0x1        	MOVF	(_position + 1), W, B
000406   0f80     addlw	0x80               	ADDLW	0x80
000408   0f80     addlw	0x80               	ADDLW	0x80
00040a   e103     bnz	0x412                	BNZ	_00155_DS_
00040c   0e0a     movlw	0xa                	MOVLW	0x0a
00040e   010f     movlb	0xf                	BANKSEL	_position
000410   5d54     subwf	0x54, 0, 0x1       	SUBWF	_position, W, B
                                           _00155_DS_:
000412   e309     bnc	0x426                	BNC	_00115_DS_
000414   010f     movlb	0xf                	BANKSEL	(_position + 1)
000416   5155     movf	0x55, 0, 0x1        	MOVF	(_position + 1), W, B
000418   0f80     addlw	0x80               	ADDLW	0x80
00041a   0f80     addlw	0x80               	ADDLW	0x80
00041c   e103     bnz	0x424                	BNZ	_00156_DS_
00041e   0e0c     movlw	0xc                	MOVLW	0x0c
000420   010f     movlb	0xf                	BANKSEL	_position
000422   5d54     subwf	0x54, 0, 0x1       	SUBWF	_position, W, B
                                           _00156_DS_:
000424   e312     bnc	0x44a                	BNC	_00109_DS_
                                           _00115_DS_:
000426   010f     movlb	0xf                	BANKSEL	(_position + 1)
000428   5155     movf	0x55, 0, 0x1        	MOVF	(_position + 1), W, B
00042a   0f80     addlw	0x80               	ADDLW	0x80
00042c   0f80     addlw	0x80               	ADDLW	0x80
00042e   e103     bnz	0x436                	BNZ	_00157_DS_
000430   0e0d     movlw	0xd                	MOVLW	0x0d
000432   010f     movlb	0xf                	BANKSEL	_position
000434   5d54     subwf	0x54, 0, 0x1       	SUBWF	_position, W, B
                                           _00157_DS_:
000436   e331     bnc	0x49a                	BNC	_00110_DS_
000438   010f     movlb	0xf                	BANKSEL	(_position + 1)
00043a   5155     movf	0x55, 0, 0x1        	MOVF	(_position + 1), W, B
00043c   0f80     addlw	0x80               	ADDLW	0x80
00043e   0f80     addlw	0x80               	ADDLW	0x80
000440   e103     bnz	0x448                	BNZ	_00158_DS_
000442   0e0f     movlw	0xf                	MOVLW	0x0f
000444   010f     movlb	0xf                	BANKSEL	_position
000446   5d54     subwf	0x54, 0, 0x1       	SUBWF	_position, W, B
                                           _00158_DS_:
000448   e228     bc	0x49a                 	BC	_00110_DS_
                                           _00109_DS_:
00044a   010f     movlb	0xf                	BANKSEL	_position
                                           ;	.line	47; testint.c	currentTime[position-7]++;
00044c   5154     movf	0x54, 0, 0x1        	MOVF	_position, W, B
00044e   0ff9     addlw	0xf9               	ADDLW	0xf9
000450   6e00     movwf	0, 0               	MOVWF	r0x00
000452   0eff     movlw	0xff               	MOVLW	0xff
000454   010f     movlb	0xf                	BANKSEL	(_position + 1)
000456   2155     addwfc	0x55, 0, 0x1      	ADDWFC	(_position + 1), W, B
000458   6e01     movwf	0x1, 0             	MOVWF	r0x01
00045a   6a02     clrf	0x2, 0              	CLRF	r0x02
00045c   be01     btfsc	0x1, 0x7, 0        	BTFSC	r0x01, 7
00045e   6802     setf	0x2, 0              	SETF	r0x02
000460   010f     movlb	0xf                	BANKSEL	_currentTime
000462   5151     movf	0x51, 0, 0x1        	MOVF	_currentTime, W, B
000464   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000466   010f     movlb	0xf                	BANKSEL	(_currentTime + 1)
000468   5152     movf	0x52, 0, 0x1        	MOVF	(_currentTime + 1), W, B
00046a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00046c   010f     movlb	0xf                	BANKSEL	(_currentTime + 2)
00046e   5153     movf	0x53, 0, 0x1        	MOVF	(_currentTime + 2), W, B
000470   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000472   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000474   ffe9
000476   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000478   fff3
00047a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00047c   ec39     call	0x1a72, 0           	CALL	__gptrget1
00047e   f00d
000480   6e03     movwf	0x3, 0             	MOVWF	r0x03
000482   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000484   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000486   ffe5
000488   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00048a   ffe9
00048c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00048e   fff3
000490   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000492   ec65     call	0x1aca, 0           	CALL	__gptrput1
000494   f00d
                                           ;	.line	48; testint.c	test_inc_current_time();
000496   ec06     call	0xc, 0              	CALL	_test_inc_current_time
000498   f000
                                           _00110_DS_:
                                           ;	.line	51; testint.c	INT3F = 0;
00049a   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
                                           ;	.line	52; testint.c	refresh = 1;
00049c   0e01     movlw	0x1                	MOVLW	0x01
00049e   010f     movlb	0xf                	BANKSEL	_refresh
0004a0   6f58     movwf	0x58, 0x1          	MOVWF	_refresh, B
0004a2   010f     movlb	0xf                	BANKSEL	(_refresh + 1)
0004a4   6b59     clrf	0x59, 0x1           	CLRF	(_refresh + 1), B
                                           _00117_DS_:
                                           ;	.line	55; testint.c	if ( INT1F ) {
0004a6   a0f0     btfss	0xf0, 0, 0         	BTFSS	_INTCON3bits, 0
0004a8   d04b     bra	0x540                	BRA	_00129_DS_
0004aa   010f     movlb	0xf                	BANKSEL	_position
                                           ;	.line	57; testint.c	position++;
0004ac   2b54     incf	0x54, 0x1, 0x1      	INCF	_position, F, B
0004ae   e302     bnc	0x4b4                	BNC	_10378_DS_
0004b0   010f     movlb	0xf                	BANKSEL	(_position + 1)
0004b2   2b55     incf	0x55, 0x1, 0x1      	INCF	(_position + 1), F, B
                                           _10378_DS_:
0004b4   010f     movlb	0xf                	BANKSEL	_position
                                           ;	.line	58; testint.c	if(position == 2) position = 3;
0004b6   5154     movf	0x54, 0, 0x1        	MOVF	_position, W, B
0004b8   0a02     xorlw	0x2                	XORLW	0x02
0004ba   e103     bnz	0x4c2                	BNZ	_00159_DS_
0004bc   010f     movlb	0xf                	BANKSEL	(_position + 1)
0004be   5155     movf	0x55, 0, 0x1        	MOVF	(_position + 1), W, B
0004c0   e001     bz	0x4c4                 	BZ	_00160_DS_
                                           _00159_DS_:
0004c2   d005     bra	0x4ce                	BRA	_00119_DS_
                                           _00160_DS_:
0004c4   0e03     movlw	0x3                	MOVLW	0x03
0004c6   010f     movlb	0xf                	BANKSEL	_position
0004c8   6f54     movwf	0x54, 0x1          	MOVWF	_position, B
0004ca   010f     movlb	0xf                	BANKSEL	(_position + 1)
0004cc   6b55     clrf	0x55, 0x1           	CLRF	(_position + 1), B
                                           _00119_DS_:
0004ce   010f     movlb	0xf                	BANKSEL	_position
                                           ;	.line	59; testint.c	if(position == 5) position = 7;
0004d0   5154     movf	0x54, 0, 0x1        	MOVF	_position, W, B
0004d2   0a05     xorlw	0x5                	XORLW	0x05
0004d4   e103     bnz	0x4dc                	BNZ	_00161_DS_
0004d6   010f     movlb	0xf                	BANKSEL	(_position + 1)
0004d8   5155     movf	0x55, 0, 0x1        	MOVF	(_position + 1), W, B
0004da   e001     bz	0x4de                 	BZ	_00162_DS_
                                           _00161_DS_:
0004dc   d005     bra	0x4e8                	BRA	_00121_DS_
                                           _00162_DS_:
0004de   0e07     movlw	0x7                	MOVLW	0x07
0004e0   010f     movlb	0xf                	BANKSEL	_position
0004e2   6f54     movwf	0x54, 0x1          	MOVWF	_position, B
0004e4   010f     movlb	0xf                	BANKSEL	(_position + 1)
0004e6   6b55     clrf	0x55, 0x1           	CLRF	(_position + 1), B
                                           _00121_DS_:
0004e8   010f     movlb	0xf                	BANKSEL	_position
                                           ;	.line	60; testint.c	if(position == 9) position = 10;
0004ea   5154     movf	0x54, 0, 0x1        	MOVF	_position, W, B
0004ec   0a09     xorlw	0x9                	XORLW	0x09
0004ee   e103     bnz	0x4f6                	BNZ	_00163_DS_
0004f0   010f     movlb	0xf                	BANKSEL	(_position + 1)
0004f2   5155     movf	0x55, 0, 0x1        	MOVF	(_position + 1), W, B
0004f4   e001     bz	0x4f8                 	BZ	_00164_DS_
                                           _00163_DS_:
0004f6   d005     bra	0x502                	BRA	_00123_DS_
                                           _00164_DS_:
0004f8   0e0a     movlw	0xa                	MOVLW	0x0a
0004fa   010f     movlb	0xf                	BANKSEL	_position
0004fc   6f54     movwf	0x54, 0x1          	MOVWF	_position, B
0004fe   010f     movlb	0xf                	BANKSEL	(_position + 1)
000500   6b55     clrf	0x55, 0x1           	CLRF	(_position + 1), B
                                           _00123_DS_:
000502   010f     movlb	0xf                	BANKSEL	_position
                                           ;	.line	61; testint.c	if(position == 12) position = 13;
000504   5154     movf	0x54, 0, 0x1        	MOVF	_position, W, B
000506   0a0c     xorlw	0xc                	XORLW	0x0c
000508   e103     bnz	0x510                	BNZ	_00165_DS_
00050a   010f     movlb	0xf                	BANKSEL	(_position + 1)
00050c   5155     movf	0x55, 0, 0x1        	MOVF	(_position + 1), W, B
00050e   e001     bz	0x512                 	BZ	_00166_DS_
                                           _00165_DS_:
000510   d005     bra	0x51c                	BRA	_00125_DS_
                                           _00166_DS_:
000512   0e0d     movlw	0xd                	MOVLW	0x0d
000514   010f     movlb	0xf                	BANKSEL	_position
000516   6f54     movwf	0x54, 0x1          	MOVWF	_position, B
000518   010f     movlb	0xf                	BANKSEL	(_position + 1)
00051a   6b55     clrf	0x55, 0x1           	CLRF	(_position + 1), B
                                           _00125_DS_:
00051c   010f     movlb	0xf                	BANKSEL	_position
                                           ;	.line	62; testint.c	if(position == 15) position = 0;
00051e   5154     movf	0x54, 0, 0x1        	MOVF	_position, W, B
000520   0a0f     xorlw	0xf                	XORLW	0x0f
000522   e103     bnz	0x52a                	BNZ	_00167_DS_
000524   010f     movlb	0xf                	BANKSEL	(_position + 1)
000526   5155     movf	0x55, 0, 0x1        	MOVF	(_position + 1), W, B
000528   e001     bz	0x52c                 	BZ	_00168_DS_
                                           _00167_DS_:
00052a   d004     bra	0x534                	BRA	_00127_DS_
                                           _00168_DS_:
00052c   010f     movlb	0xf                	BANKSEL	_position
00052e   6b54     clrf	0x54, 0x1           	CLRF	_position, B
000530   010f     movlb	0xf                	BANKSEL	(_position + 1)
000532   6b55     clrf	0x55, 0x1           	CLRF	(_position + 1), B
                                           _00127_DS_:
                                           ;	.line	63; testint.c	refresh = 1;
000534   0e01     movlw	0x1                	MOVLW	0x01
000536   010f     movlb	0xf                	BANKSEL	_refresh
000538   6f58     movwf	0x58, 0x1          	MOVWF	_refresh, B
00053a   010f     movlb	0xf                	BANKSEL	(_refresh + 1)
00053c   6b59     clrf	0x59, 0x1           	CLRF	(_refresh + 1), B
                                           ;	.line	65; testint.c	INT1F  = 0;	
00053e   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           _00129_DS_:
                                           ;	.line	69; testint.c	if ( TMR0F ){        
000540   a4f2     btfss	0xf2, 0x2, 0       	BTFSS	_INTCONbits, 2
000542   d058     bra	0x5f4                	BRA	_00134_DS_
                                           ;	.line	70; testint.c	bres += 4096;  
000544   0e10     movlw	0x10               	MOVLW	0x10
000546   010f     movlb	0xf                	BANKSEL	(_bres + 1)
000548   275b     addwf	0x5b, 0x1, 0x1     	ADDWF	(_bres + 1), F, B
00054a   0e00     movlw	0                  	MOVLW	0x00
00054c   010f     movlb	0xf                	BANKSEL	(_bres + 2)
00054e   235c     addwfc	0x5c, 0x1, 0x1    	ADDWFC	(_bres + 2), F, B
000550   0e00     movlw	0                  	MOVLW	0x00
000552   010f     movlb	0xf                	BANKSEL	(_bres + 3)
000554   235d     addwfc	0x5d, 0x1, 0x1    	ADDWFC	(_bres + 3), F, B
                                           ;	.line	71; testint.c	if(bres >= 390625)
000556   0e00     movlw	0                  	MOVLW	0x00
000558   010f     movlb	0xf                	BANKSEL	(_bres + 3)
00055a   5d5d     subwf	0x5d, 0, 0x1       	SUBWF	(_bres + 3), W, B
00055c   e10b     bnz	0x574                	BNZ	_00169_DS_
00055e   0e05     movlw	0x5                	MOVLW	0x05
000560   010f     movlb	0xf                	BANKSEL	(_bres + 2)
000562   5d5c     subwf	0x5c, 0, 0x1       	SUBWF	(_bres + 2), W, B
000564   e107     bnz	0x574                	BNZ	_00169_DS_
000566   0ef5     movlw	0xf5               	MOVLW	0xf5
000568   010f     movlb	0xf                	BANKSEL	(_bres + 1)
00056a   5d5b     subwf	0x5b, 0, 0x1       	SUBWF	(_bres + 1), W, B
00056c   e103     bnz	0x574                	BNZ	_00169_DS_
00056e   0ee1     movlw	0xe1               	MOVLW	0xe1
000570   010f     movlb	0xf                	BANKSEL	_bres
000572   5d5a     subwf	0x5a, 0, 0x1       	SUBWF	_bres, W, B
                                           _00169_DS_:
000574   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000576   d038     bra	0x5e8                	BRA	_00131_DS_
                                           ;	.line	73; testint.c	bres -= 390625;	
000578   0e1f     movlw	0x1f               	MOVLW	0x1f
00057a   010f     movlb	0xf                	BANKSEL	_bres
00057c   275a     addwf	0x5a, 0x1, 0x1     	ADDWF	_bres, F, B
00057e   0e0a     movlw	0xa                	MOVLW	0x0a
000580   010f     movlb	0xf                	BANKSEL	(_bres + 1)
000582   235b     addwfc	0x5b, 0x1, 0x1    	ADDWFC	(_bres + 1), F, B
000584   0efa     movlw	0xfa               	MOVLW	0xfa
000586   010f     movlb	0xf                	BANKSEL	(_bres + 2)
000588   235c     addwfc	0x5c, 0x1, 0x1    	ADDWFC	(_bres + 2), F, B
00058a   0eff     movlw	0xff               	MOVLW	0xff
00058c   010f     movlb	0xf                	BANKSEL	(_bres + 3)
00058e   235d     addwfc	0x5d, 0x1, 0x1    	ADDWFC	(_bres + 3), F, B
                                           ;	.line	74; testint.c	LED0_IO ^= 1;
000590   6a00     clrf	0, 0                	CLRF	r0x00
000592   b091     btfsc	0x91, 0, 0         	BTFSC	_LATJbits, 0
000594   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000596   0e01     movlw	0x1                	MOVLW	0x01
000598   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
00059a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00059c   0b01     andlw	0x1                	ANDLW	0x01
00059e   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0005a0   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
0005a2   0bfe     andlw	0xfe               	ANDLW	0xfe
0005a4   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0005a6   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
0005a8   010f     movlb	0xf                	BANKSEL	_currentTime
                                           ;	.line	75; testint.c	currentTime[7]++;
0005aa   5151     movf	0x51, 0, 0x1        	MOVF	_currentTime, W, B
0005ac   0f07     addlw	0x7                	ADDLW	0x07
0005ae   6e00     movwf	0, 0               	MOVWF	r0x00
0005b0   0e00     movlw	0                  	MOVLW	0x00
0005b2   010f     movlb	0xf                	BANKSEL	(_currentTime + 1)
0005b4   2152     addwfc	0x52, 0, 0x1      	ADDWFC	(_currentTime + 1), W, B
0005b6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0005b8   0e00     movlw	0                  	MOVLW	0x00
0005ba   010f     movlb	0xf                	BANKSEL	(_currentTime + 2)
0005bc   2153     addwfc	0x53, 0, 0x1      	ADDWFC	(_currentTime + 2), W, B
0005be   6e02     movwf	0x2, 0             	MOVWF	r0x02
0005c0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0005c2   ffe9
0005c4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0005c6   fff3
0005c8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0005ca   ec39     call	0x1a72, 0           	CALL	__gptrget1
0005cc   f00d
0005ce   6e03     movwf	0x3, 0             	MOVWF	r0x03
0005d0   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0005d2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0005d4   ffe5
0005d6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0005d8   ffe9
0005da   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0005dc   fff3
0005de   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0005e0   ec65     call	0x1aca, 0           	CALL	__gptrput1
0005e2   f00d
                                           ;	.line	76; testint.c	test_inc_current_time();
0005e4   ec06     call	0xc, 0              	CALL	_test_inc_current_time
0005e6   f000
                                           _00131_DS_:
                                           ;	.line	78; testint.c	refresh = 1;
0005e8   0e01     movlw	0x1                	MOVLW	0x01
0005ea   010f     movlb	0xf                	BANKSEL	_refresh
0005ec   6f58     movwf	0x58, 0x1          	MOVWF	_refresh, B
0005ee   010f     movlb	0xf                	BANKSEL	(_refresh + 1)
0005f0   6b59     clrf	0x59, 0x1           	CLRF	(_refresh + 1), B
                                           ;	.line	79; testint.c	TMR0F = 0; 
0005f2   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           _00134_DS_:
0005f4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0005f6   f003
0005f8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0005fa   f002
0005fc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0005fe   f001
000600   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000602   f000
000604   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000606   ffd9
000608   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
00060a   fffb
00060c   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
00060e   fffa
000610   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
000612   ffea
000614   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
000616   ffe9
000618   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
00061a   fff4
00061c   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
00061e   fff3
000620   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
000622   ffe0
000624   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
000626   ffd8
000628   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
00062a   ffe8
00062c   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
00062e   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x57, 0x61, 0x6b, 0x65, 0x20, 0x75, 0x70, 0x21
000630   2020     addwfc	0x20, 0, 0        
000632   6157     cpfslt	0x57, 0x1         
000634   656b     cpfsgt	0x6b, 0x1         
000636   7520     btg	0x20, 0x2, 0x1       
000638   2170     addwfc	0x70, 0, 0x1      
00063a   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x00
00063c   2020     addwfc	0x20, 0, 0        
00063e   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
000640   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
000642   2020     addwfc	0x20, 0, 0        
000644   2020     addwfc	0x20, 0, 0        
000646   2020     addwfc	0x20, 0, 0        
000648   2020     addwfc	0x20, 0, 0        
00064a   2020     addwfc	0x20, 0, 0        
00064c   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x00
00064e   2020     addwfc	0x20, 0, 0        
000650   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
000652   5e20     subwf	0x20, 0x1, 0       	DB	0x20, 0x5e, 0x00
000654   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_3:
000656   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x5e, 0x00
000658   5e20     subwf	0x20, 0x1, 0       
00065a   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 3534 (0x0dce) bytes ( 2.70%)
                                           ;           	 1767 (0x06e7) words
                                           ; udata size:	   22 (0x0016) bytes ( 0.57%)
                                           ; access size:	   22 (0x0016) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Mar 13 2012) (UNIX)
                                           ; This file was generated Tue Mar 27 13:13:30 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; TCPIP_Stack/LCDBlocking.c	void LCDErase(void)
001786   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001788   ffe5
00178a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00178c   ffd9
00178e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001790   ffe5
001792   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001794   ffe5
001796   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001798   ffe5
00179a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00179c   ffe5
00179e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0017a0   ffe5
0017a2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0017a4   ffe5
0017a6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0017a8   ffe5
0017aa   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0017ac   ffe5
                                           ;	.line	395; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);
0017ae   0e01     movlw	0x1                	MOVLW	0x01
0017b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017b2   0e00     movlw	0                  	MOVLW	0x00
0017b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017b6   ecf4     call	0x19e8, 0           	CALL	_LCDWrite
0017b8   f00c
0017ba   0e02     movlw	0x2                	MOVLW	0x02
0017bc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
0017be   0e48     movlw	0x48               	MOVLW	0x48
0017c0   6e00     movwf	0, 0               	MOVWF	r0x00
0017c2   0e0d     movlw	0xd                	MOVLW	0x0d
0017c4   6e01     movwf	0x1, 0             	MOVWF	r0x01
0017c6   6a02     clrf	0x2, 0              	CLRF	r0x02
0017c8   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
0017ca   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0017cc   f004
0017ce   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0017d0   f005
0017d2   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0017d4   f006
0017d6   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0017d8   f007
0017da   0eff     movlw	0xff               	MOVLW	0xff
0017dc   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0017de   0eff     movlw	0xff               	MOVLW	0xff
0017e0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0017e2   0eff     movlw	0xff               	MOVLW	0xff
0017e4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0017e6   0eff     movlw	0xff               	MOVLW	0xff
0017e8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0017ea   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0017ec   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0017ee   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0017f0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0017f2   e1eb     bnz	0x17ca               	BNZ	_00305_DS_
                                           ;	.line	399; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', 32);
0017f4   0e00     movlw	0                  	MOVLW	0x00
0017f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017f8   0e20     movlw	0x20               	MOVLW	0x20
0017fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017fc   0e20     movlw	0x20               	MOVLW	0x20
0017fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001800   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001802   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001804   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
001806   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001808   ec9d     call	0x153a, 0           	CALL	_memset
00180a   f00a
00180c   0e05     movlw	0x5                	MOVLW	0x05
00180e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001810   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001812   f007
001814   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001816   f006
001818   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00181a   f005
00181c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00181e   f004
001820   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001822   f003
001824   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001826   f002
001828   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00182a   f001
00182c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00182e   f000
001830   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001832   ffd9
001834   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; TCPIP_Stack/LCDBlocking.c	void LCDUpdate(void)
00065c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00065e   ffe5
000660   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000662   ffd9
000664   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000666   ffe5
000668   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00066a   ffe5
00066c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00066e   ffe5
000670   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000672   ffe5
000674   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000676   ffe5
000678   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00067a   ffe5
00067c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00067e   ffe5
000680   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000682   ffe5
000684   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000686   ffe5
                                           ;	.line	337; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x02);
000688   0e02     movlw	0x2                	MOVLW	0x02
00068a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00068c   0e00     movlw	0                  	MOVLW	0x00
00068e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000690   ecf4     call	0x19e8, 0           	CALL	_LCDWrite
000692   f00c
000694   0e02     movlw	0x2                	MOVLW	0x02
000696   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
000698   0e48     movlw	0x48               	MOVLW	0x48
00069a   6e00     movwf	0, 0               	MOVWF	r0x00
00069c   0e0d     movlw	0xd                	MOVLW	0x0d
00069e   6e01     movwf	0x1, 0             	MOVWF	r0x01
0006a0   6a02     clrf	0x2, 0              	CLRF	r0x02
0006a2   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
0006a4   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0006a6   f004
0006a8   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0006aa   f005
0006ac   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0006ae   f006
0006b0   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0006b2   f007
0006b4   0eff     movlw	0xff               	MOVLW	0xff
0006b6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0006b8   0eff     movlw	0xff               	MOVLW	0xff
0006ba   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0006bc   0eff     movlw	0xff               	MOVLW	0xff
0006be   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0006c0   0eff     movlw	0xff               	MOVLW	0xff
0006c2   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0006c4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0006c6   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0006c8   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0006ca   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0006cc   e1eb     bnz	0x6a4                	BNZ	_00225_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
0006ce   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
0006d0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0006d2   f001
0006d4   6a02     clrf	0x2, 0              	CLRF	r0x02
0006d6   0e00     movlw	0                  	MOVLW	0x00
0006d8   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0006da   e102     bnz	0x6e0                	BNZ	_00297_DS_
0006dc   0e10     movlw	0x10               	MOVLW	0x10
0006de   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
0006e0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0006e2   d057     bra	0x792                	BRA	_00260_DS_
                                           ;	.line	345; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
0006e4   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0006e6   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0006e8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0006ea   6a02     clrf	0x2, 0              	CLRF	r0x02
0006ec   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0006ee   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0006f0   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0006f2   ffe9
0006f4   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0006f6   ffea
0006f8   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0006fa   f001
0006fc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0006fe   e119     bnz	0x732                	BNZ	_00232_DS_
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
000700   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000702   f001
                                           _00253_DS_:
000704   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
000706   f002
000708   6a03     clrf	0x3, 0              	CLRF	r0x03
00070a   0e00     movlw	0                  	MOVLW	0x00
00070c   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
00070e   e102     bnz	0x714                	BNZ	_00298_DS_
000710   0e10     movlw	0x10               	MOVLW	0x10
000712   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
000714   e20e     bc	0x732                 	BC	_00232_DS_
                                           ;	.line	349; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
000716   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000718   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
00071a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00071c   6a03     clrf	0x3, 0              	CLRF	r0x03
00071e   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000720   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000722   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000724   ffe9
000726   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
000728   ffea
00072a   0e20     movlw	0x20               	MOVLW	0x20
00072c   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
00072e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000730   d7e9     bra	0x704                	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
000732   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000734   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000736   6e01     movwf	0x1, 0             	MOVWF	r0x01
000738   6a02     clrf	0x2, 0              	CLRF	r0x02
00073a   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00073c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00073e   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000740   ffe9
000742   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000744   ffea
000746   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000748   f001
00074a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00074c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00074e   0e01     movlw	0x1                	MOVLW	0x01
000750   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000752   ecf4     call	0x19e8, 0           	CALL	_LCDWrite
000754   f00c
000756   0e02     movlw	0x2                	MOVLW	0x02
000758   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
00075a   0e55     movlw	0x55               	MOVLW	0x55
00075c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00075e   6a02     clrf	0x2, 0              	CLRF	r0x02
000760   6a03     clrf	0x3, 0              	CLRF	r0x03
000762   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
000764   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000766   f005
000768   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00076a   f006
00076c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00076e   f007
000770   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000772   f008
000774   0eff     movlw	0xff               	MOVLW	0xff
000776   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000778   0eff     movlw	0xff               	MOVLW	0xff
00077a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00077c   0eff     movlw	0xff               	MOVLW	0xff
00077e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000780   0eff     movlw	0xff               	MOVLW	0xff
000782   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000784   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000786   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000788   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00078a   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
00078c   e1eb     bnz	0x764                	BNZ	_00233_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
00078e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000790   d79f     bra	0x6d0                	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0xC0);
000792   0ec0     movlw	0xc0               	MOVLW	0xc0
000794   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000796   0e00     movlw	0                  	MOVLW	0x00
000798   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00079a   ecf4     call	0x19e8, 0           	CALL	_LCDWrite
00079c   f00c
00079e   0e02     movlw	0x2                	MOVLW	0x02
0007a0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0007a2   0e55     movlw	0x55               	MOVLW	0x55
0007a4   6e00     movwf	0, 0               	MOVWF	r0x00
0007a6   6a01     clrf	0x1, 0              	CLRF	r0x01
0007a8   6a02     clrf	0x2, 0              	CLRF	r0x02
0007aa   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
0007ac   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0007ae   f004
0007b0   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0007b2   f005
0007b4   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0007b6   f006
0007b8   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0007ba   f007
0007bc   0eff     movlw	0xff               	MOVLW	0xff
0007be   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0007c0   0eff     movlw	0xff               	MOVLW	0xff
0007c2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0007c4   0eff     movlw	0xff               	MOVLW	0xff
0007c6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0007c8   0eff     movlw	0xff               	MOVLW	0xff
0007ca   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0007cc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0007ce   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0007d0   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0007d2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0007d4   e1eb     bnz	0x7ac                	BNZ	_00239_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
0007d6   0e10     movlw	0x10               	MOVLW	0x10
0007d8   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
0007da   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0007dc   f001
0007de   6a02     clrf	0x2, 0              	CLRF	r0x02
0007e0   0e00     movlw	0                  	MOVLW	0x00
0007e2   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0007e4   e102     bnz	0x7ea                	BNZ	_00299_DS_
0007e6   0e20     movlw	0x20               	MOVLW	0x20
0007e8   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
0007ea   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0007ec   d057     bra	0x89c                	BRA	_00269_DS_
                                           ;	.line	365; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
0007ee   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0007f0   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0007f2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0007f4   6a02     clrf	0x2, 0              	CLRF	r0x02
0007f6   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0007f8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0007fa   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0007fc   ffe9
0007fe   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000800   ffea
000802   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000804   f001
000806   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000808   e119     bnz	0x83c                	BNZ	_00246_DS_
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
00080a   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00080c   f001
                                           _00261_DS_:
00080e   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
000810   f002
000812   6a03     clrf	0x3, 0              	CLRF	r0x03
000814   0e00     movlw	0                  	MOVLW	0x00
000816   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000818   e102     bnz	0x81e                	BNZ	_00300_DS_
00081a   0e20     movlw	0x20               	MOVLW	0x20
00081c   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
00081e   e20e     bc	0x83c                 	BC	_00246_DS_
                                           ;	.line	369; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
000820   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000822   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000824   6e02     movwf	0x2, 0             	MOVWF	r0x02
000826   6a03     clrf	0x3, 0              	CLRF	r0x03
000828   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00082a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00082c   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
00082e   ffe9
000830   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
000832   ffea
000834   0e20     movlw	0x20               	MOVLW	0x20
000836   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
000838   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00083a   d7e9     bra	0x80e                	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
00083c   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00083e   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000840   6e01     movwf	0x1, 0             	MOVWF	r0x01
000842   6a02     clrf	0x2, 0              	CLRF	r0x02
000844   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000846   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000848   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
00084a   ffe9
00084c   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
00084e   ffea
000850   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000852   f001
000854   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000856   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000858   0e01     movlw	0x1                	MOVLW	0x01
00085a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00085c   ecf4     call	0x19e8, 0           	CALL	_LCDWrite
00085e   f00c
000860   0e02     movlw	0x2                	MOVLW	0x02
000862   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
000864   0e55     movlw	0x55               	MOVLW	0x55
000866   6e01     movwf	0x1, 0             	MOVWF	r0x01
000868   6a02     clrf	0x2, 0              	CLRF	r0x02
00086a   6a03     clrf	0x3, 0              	CLRF	r0x03
00086c   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
00086e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000870   f005
000872   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000874   f006
000876   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000878   f007
00087a   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
00087c   f008
00087e   0eff     movlw	0xff               	MOVLW	0xff
000880   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000882   0eff     movlw	0xff               	MOVLW	0xff
000884   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000886   0eff     movlw	0xff               	MOVLW	0xff
000888   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00088a   0eff     movlw	0xff               	MOVLW	0xff
00088c   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00088e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000890   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000892   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000894   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000896   e1eb     bnz	0x86e                	BNZ	_00247_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
000898   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00089a   d79f     bra	0x7da                	BRA	_00265_DS_
                                           _00269_DS_:
00089c   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00089e   f008
0008a0   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0008a2   f007
0008a4   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0008a6   f006
0008a8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0008aa   f005
0008ac   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0008ae   f004
0008b0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0008b2   f003
0008b4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0008b6   f002
0008b8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0008ba   f001
0008bc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0008be   f000
0008c0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0008c2   ffd9
0008c4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; TCPIP_Stack/LCDBlocking.c	void LCDInit(void)
0008c6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0008c8   ffe5
0008ca   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0008cc   ffd9
0008ce   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0008d0   ffe5
0008d2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0008d4   ffe5
0008d6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0008d8   ffe5
0008da   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0008dc   ffe5
0008de   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0008e0   ffe5
0008e2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0008e4   ffe5
0008e6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0008e8   ffe5
0008ea   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0008ec   ffe5
0008ee   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0008f0   ffe5
                                           ;	.line	211; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
0008f2   0e00     movlw	0                  	MOVLW	0x00
0008f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008f6   0e20     movlw	0x20               	MOVLW	0x20
0008f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008fa   0e20     movlw	0x20               	MOVLW	0x20
0008fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008fe   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000900   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000902   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000904   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000906   ec9d     call	0x153a, 0           	CALL	_memset
000908   f00a
00090a   0e05     movlw	0x5                	MOVLW	0x05
00090c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00090e   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; TCPIP_Stack/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
000910   6b20     clrf	0x20, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
000912   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
000914   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
000916   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
000918   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
00091a   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; TCPIP_Stack/LCDBlocking.c	LCD_E_TRIS = 0;
00091c   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; TCPIP_Stack/LCDBlocking.c	DelayMs(40);
00091e   0ea0     movlw	0xa0               	MOVLW	0xa0
000920   6e00     movwf	0, 0               	MOVWF	r0x00
000922   0e09     movlw	0x9                	MOVLW	0x09
000924   6e01     movwf	0x1, 0             	MOVWF	r0x01
000926   0e01     movlw	0x1                	MOVLW	0x01
000928   6e02     movwf	0x2, 0             	MOVWF	r0x02
00092a   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
00092c   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00092e   f004
000930   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000932   f005
000934   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000936   f006
000938   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00093a   f007
00093c   0eff     movlw	0xff               	MOVLW	0xff
00093e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000940   0eff     movlw	0xff               	MOVLW	0xff
000942   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000944   0eff     movlw	0xff               	MOVLW	0xff
000946   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000948   0eff     movlw	0xff               	MOVLW	0xff
00094a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00094c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00094e   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000950   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000952   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000954   e1eb     bnz	0x92c                	BNZ	_00143_DS_
                                           ;	.line	247; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = 0;
000956   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = 0x03;
000958   0e03     movlw	0x3                	MOVLW	0x03
00095a   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
00095c   0000     nop                      	nop 
00095e   0000     nop                      	nop 
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
000960   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
000962   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000964   f001
000966   6a02     clrf	0x2, 0              	CLRF	r0x02
000968   0e00     movlw	0                  	MOVLW	0x00
00096a   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00096c   e102     bnz	0x972                	BNZ	_00220_DS_
00096e   0e03     movlw	0x3                	MOVLW	0x03
000970   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
000972   e239     bc	0x9e6                 	BC	_00194_DS_
                                           ;	.line	266; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
000974   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; TCPIP_Stack/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
000976   0e11     movlw	0x11               	MOVLW	0x11
000978   6e01     movwf	0x1, 0             	MOVWF	r0x01
00097a   6a02     clrf	0x2, 0              	CLRF	r0x02
00097c   6a03     clrf	0x3, 0              	CLRF	r0x03
00097e   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
000980   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000982   f005
000984   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000986   f006
000988   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00098a   f007
00098c   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
00098e   f008
000990   0eff     movlw	0xff               	MOVLW	0xff
000992   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000994   0eff     movlw	0xff               	MOVLW	0xff
000996   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000998   0eff     movlw	0xff               	MOVLW	0xff
00099a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00099c   0eff     movlw	0xff               	MOVLW	0xff
00099e   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
0009a0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0009a2   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0009a4   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0009a6   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
0009a8   e1eb     bnz	0x980                	BNZ	_00155_DS_
                                           ;	.line	268; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
0009aa   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
0009ac   0e48     movlw	0x48               	MOVLW	0x48
0009ae   6e01     movwf	0x1, 0             	MOVWF	r0x01
0009b0   0e0d     movlw	0xd                	MOVLW	0x0d
0009b2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0009b4   6a03     clrf	0x3, 0              	CLRF	r0x03
0009b6   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
0009b8   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0009ba   f005
0009bc   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0009be   f006
0009c0   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0009c2   f007
0009c4   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
0009c6   f008
0009c8   0eff     movlw	0xff               	MOVLW	0xff
0009ca   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0009cc   0eff     movlw	0xff               	MOVLW	0xff
0009ce   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0009d0   0eff     movlw	0xff               	MOVLW	0xff
0009d2   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0009d4   0eff     movlw	0xff               	MOVLW	0xff
0009d6   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
0009d8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0009da   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0009dc   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0009de   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
0009e0   e1eb     bnz	0x9b8                	BNZ	_00161_DS_
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
0009e2   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0009e4   d7be     bra	0x962                	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x38);
0009e6   0e38     movlw	0x38               	MOVLW	0x38
0009e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009ea   0e00     movlw	0                  	MOVLW	0x00
0009ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009ee   ecf4     call	0x19e8, 0           	CALL	_LCDWrite
0009f0   f00c
0009f2   0e02     movlw	0x2                	MOVLW	0x02
0009f4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0009f6   0e55     movlw	0x55               	MOVLW	0x55
0009f8   6e00     movwf	0, 0               	MOVWF	r0x00
0009fa   6a01     clrf	0x1, 0              	CLRF	r0x01
0009fc   6a02     clrf	0x2, 0              	CLRF	r0x02
0009fe   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
000a00   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000a02   f004
000a04   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000a06   f005
000a08   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000a0a   f006
000a0c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000a0e   f007
000a10   0eff     movlw	0xff               	MOVLW	0xff
000a12   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000a14   0eff     movlw	0xff               	MOVLW	0xff
000a16   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000a18   0eff     movlw	0xff               	MOVLW	0xff
000a1a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a1c   0eff     movlw	0xff               	MOVLW	0xff
000a1e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a20   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000a22   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000a24   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000a26   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000a28   e1eb     bnz	0xa00                	BNZ	_00167_DS_
                                           ;	.line	300; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
000a2a   0e06     movlw	0x6                	MOVLW	0x06
000a2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a2e   0e00     movlw	0                  	MOVLW	0x00
000a30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a32   ecf4     call	0x19e8, 0           	CALL	_LCDWrite
000a34   f00c
000a36   0e02     movlw	0x2                	MOVLW	0x02
000a38   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
000a3a   0e55     movlw	0x55               	MOVLW	0x55
000a3c   6e00     movwf	0, 0               	MOVWF	r0x00
000a3e   6a01     clrf	0x1, 0              	CLRF	r0x01
000a40   6a02     clrf	0x2, 0              	CLRF	r0x02
000a42   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
000a44   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000a46   f004
000a48   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000a4a   f005
000a4c   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000a4e   f006
000a50   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000a52   f007
000a54   0eff     movlw	0xff               	MOVLW	0xff
000a56   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000a58   0eff     movlw	0xff               	MOVLW	0xff
000a5a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000a5c   0eff     movlw	0xff               	MOVLW	0xff
000a5e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a60   0eff     movlw	0xff               	MOVLW	0xff
000a62   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a64   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000a66   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000a68   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000a6a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000a6c   e1eb     bnz	0xa44                	BNZ	_00173_DS_
                                           ;	.line	304; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
000a6e   0e0c     movlw	0xc                	MOVLW	0x0c
000a70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a72   0e00     movlw	0                  	MOVLW	0x00
000a74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a76   ecf4     call	0x19e8, 0           	CALL	_LCDWrite
000a78   f00c
000a7a   0e02     movlw	0x2                	MOVLW	0x02
000a7c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
000a7e   0e55     movlw	0x55               	MOVLW	0x55
000a80   6e00     movwf	0, 0               	MOVWF	r0x00
000a82   6a01     clrf	0x1, 0              	CLRF	r0x01
000a84   6a02     clrf	0x2, 0              	CLRF	r0x02
000a86   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
000a88   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000a8a   f004
000a8c   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000a8e   f005
000a90   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000a92   f006
000a94   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000a96   f007
000a98   0eff     movlw	0xff               	MOVLW	0xff
000a9a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000a9c   0eff     movlw	0xff               	MOVLW	0xff
000a9e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000aa0   0eff     movlw	0xff               	MOVLW	0xff
000aa2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000aa4   0eff     movlw	0xff               	MOVLW	0xff
000aa6   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000aa8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000aaa   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000aac   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000aae   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000ab0   e1eb     bnz	0xa88                	BNZ	_00179_DS_
                                           ;	.line	308; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);	
000ab2   0e01     movlw	0x1                	MOVLW	0x01
000ab4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ab6   0e00     movlw	0                  	MOVLW	0x00
000ab8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aba   ecf4     call	0x19e8, 0           	CALL	_LCDWrite
000abc   f00c
000abe   0e02     movlw	0x2                	MOVLW	0x02
000ac0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
000ac2   0e48     movlw	0x48               	MOVLW	0x48
000ac4   6e00     movwf	0, 0               	MOVWF	r0x00
000ac6   0e0d     movlw	0xd                	MOVLW	0x0d
000ac8   6e01     movwf	0x1, 0             	MOVWF	r0x01
000aca   6a02     clrf	0x2, 0              	CLRF	r0x02
000acc   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
000ace   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000ad0   f004
000ad2   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000ad4   f005
000ad6   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000ad8   f006
000ada   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000adc   f007
000ade   0eff     movlw	0xff               	MOVLW	0xff
000ae0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000ae2   0eff     movlw	0xff               	MOVLW	0xff
000ae4   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000ae6   0eff     movlw	0xff               	MOVLW	0xff
000ae8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000aea   0eff     movlw	0xff               	MOVLW	0xff
000aec   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000aee   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000af0   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000af2   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000af4   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000af6   e1eb     bnz	0xace                	BNZ	_00185_DS_
000af8   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000afa   f008
000afc   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000afe   f007
000b00   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000b02   f006
000b04   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000b06   f005
000b08   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000b0a   f004
000b0c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000b0e   f003
000b10   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000b12   f002
000b14   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000b16   f001
000b18   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000b1a   f000
000b1c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000b1e   ffd9
000b20   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; TCPIP_Stack/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
0019e8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0019ea   ffe5
0019ec   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0019ee   ffd9
0019f0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0019f2   ffe5
0019f4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0019f6   ffe5
0019f8   0e02     movlw	0x2                	MOVLW	0x02
0019fa   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0019fc   f000
0019fe   0e03     movlw	0x3                	MOVLW	0x03
001a00   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001a02   f001
                                           ;	.line	97; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
001a04   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
001a06   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
001a08   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
001a0a   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = RS;
001a0c   5000     movf	0, 0, 0             	MOVF	r0x00, W
001a0e   0b01     andlw	0x1                	ANDLW	0x01
001a10   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
001a12   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
001a14   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
001a16   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
001a18   0bfb     andlw	0xfb               	ANDLW	0xfb
001a1a   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
001a1c   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = Data;
001a1e   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
001a20   ff8d
001a22   0000     nop                      	nop 
001a24   0000     nop                      	nop 
                                           ;	.line	155; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
001a26   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
001a28   0000     nop                      	nop 
001a2a   0000     nop                      	nop 
001a2c   0000     nop                      	nop 
001a2e   0000     nop                      	nop 
001a30   0000     nop                      	nop 
001a32   0000     nop                      	nop 
001a34   0000     nop                      	nop 
001a36   0000     nop                      	nop 
001a38   0000     nop                      	nop 
                                           ;	.line	165; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
001a3a   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
001a3c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001a3e   f001
001a40   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001a42   f000
001a44   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001a46   ffd9
001a48   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
