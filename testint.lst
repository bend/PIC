gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 3-27-2012  14:46:20
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Mar 13 2012) (UNIX)
                                           ; This file was generated Tue Mar 27 14:46:20 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _increment_time
                                           	global _alarm
                                           	global _test_inc_current_time
                                           	global _display_time
                                           	global _display_word
                                           	global _display_string
                                           	global _strlcpy
                                           	global _dumb_delay1ms
                                           	global _time
                                           	global _currentTime
                                           	global _position
                                           	global _alarmflag
                                           	global _refresh
                                           	global _bres
                                           	global _high_isr
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _ultoa
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _time	db	0x30, 0x30, 0x3a, 0x30, 0x30, 0x20, 0x20, 0x30, 0x30, 0x3a, 0x30, 0x30
                                           	db	0x3a, 0x30, 0x30, 0x00
                                           _currentTime	db	LOW((_time + 7)), HIGH((_time + 7)), 0x80
                                           _position	db	0x00, 0x00
                                           _alarmflag	db	0x00, 0x00
                                           _refresh	db	0x01, 0x00
                                           _bres	db	0x00, 0x00, 0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           
                                           udata_testint_0	udata
                                           _main_string_1_1	res	16
                                           
                                           udata_testint_1	udata
                                           _display_word_WDigit_1_1	res	6
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_testint_ivec_0x1_high_isr	code	0X000008
                                           ivec_0x1_high_isr:
000008   efb2     goto	0x364               	GOTO	_high_isr
00000a   f001
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_testint__main	code
                                           _main:
00167a   010e     movlb	0xe                	BANKSEL	_main_string_1_1
                                           ;	.line	85; testint.c	char string[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
00167c   6b00     clrf	0, 0x1              	CLRF	_main_string_1_1, B
00167e   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 1)
001680   6b01     clrf	0x1, 0x1            	CLRF	(_main_string_1_1 + 1), B
001682   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 2)
001684   6b02     clrf	0x2, 0x1            	CLRF	(_main_string_1_1 + 2), B
001686   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 3)
001688   6b03     clrf	0x3, 0x1            	CLRF	(_main_string_1_1 + 3), B
00168a   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 4)
00168c   6b04     clrf	0x4, 0x1            	CLRF	(_main_string_1_1 + 4), B
00168e   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 5)
001690   6b05     clrf	0x5, 0x1            	CLRF	(_main_string_1_1 + 5), B
001692   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 6)
001694   6b06     clrf	0x6, 0x1            	CLRF	(_main_string_1_1 + 6), B
001696   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 7)
001698   6b07     clrf	0x7, 0x1            	CLRF	(_main_string_1_1 + 7), B
00169a   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 8)
00169c   6b08     clrf	0x8, 0x1            	CLRF	(_main_string_1_1 + 8), B
00169e   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 9)
0016a0   6b09     clrf	0x9, 0x1            	CLRF	(_main_string_1_1 + 9), B
0016a2   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 10)
0016a4   6b0a     clrf	0xa, 0x1            	CLRF	(_main_string_1_1 + 10), B
0016a6   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 11)
0016a8   6b0b     clrf	0xb, 0x1            	CLRF	(_main_string_1_1 + 11), B
0016aa   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 12)
0016ac   6b0c     clrf	0xc, 0x1            	CLRF	(_main_string_1_1 + 12), B
0016ae   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 13)
0016b0   6b0d     clrf	0xd, 0x1            	CLRF	(_main_string_1_1 + 13), B
0016b2   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 14)
0016b4   6b0e     clrf	0xe, 0x1            	CLRF	(_main_string_1_1 + 14), B
0016b6   010e     movlb	0xe                	BANKSEL	(_main_string_1_1 + 15)
0016b8   6b0f     clrf	0xf, 0x1            	CLRF	(_main_string_1_1 + 15), B
                                           ;	.line	87; testint.c	LED0_TRIS = 0; //configure 1st led pin as output (yellow)
0016ba   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	88; testint.c	LED1_TRIS = 0; //configure 2nd led pin as output (red)
0016bc   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	89; testint.c	LED2_TRIS = 0; //configure 3rd led pin as output (red)
0016be   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	91; testint.c	BUTTON0_TRIS = 1; //configure button0 as input
0016c0   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	92; testint.c	BUTTON1_TRIS = 1; //configure button1 as input 
0016c2   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           ;	.line	94; testint.c	RCONbits.IPEN      = 1;   // Interrupts Priority ENable
0016c4   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	96; testint.c	INT1F  = 0;   //clear INT1 flag
0016c6   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           ;	.line	99; testint.c	INTCON3bits.INT1P  = 1; 
0016c8   8cf0     bsf	0xf0, 0x6, 0         	BSF	_INTCON3bits, 6
                                           ;	.line	101; testint.c	INTCON2bits.INTEDG1= 0;
0016ca   9af1     bcf	0xf1, 0x5, 0         	BCF	_INTCON2bits, 5
                                           ;	.line	104; testint.c	INTCONbits.GIE     = 1;
0016cc   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	107; testint.c	INTCON3bits.INT1E  = 1;
0016ce   86f0     bsf	0xf0, 0x3, 0         	BSF	_INTCON3bits, 3
                                           ;	.line	108; testint.c	INTCON3bits.INT3E  = 1;
0016d0   8af0     bsf	0xf0, 0x5, 0         	BSF	_INTCON3bits, 5
                                           ;	.line	110; testint.c	T0CONbits.T0CS     = 1;
0016d2   8ad5     bsf	0xd5, 0x5, 0         	BSF	_T0CONbits, 5
                                           ;	.line	112; testint.c	LCDInit();
0016d4   ec3a     call	0x874, 0            	CALL	_LCDInit
0016d6   f004
                                           ;	.line	113; testint.c	for(i=0;i<100;i++) dumb_delay1ms();
0016d8   0e64     movlw	0x64               	MOVLW	0x64
0016da   6e00     movwf	0, 0               	MOVWF	r0x00
0016dc   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00164_DS_:
0016de   ece5     call	0x19ca, 0           	CALL	_dumb_delay1ms
0016e0   f00c
0016e2   0eff     movlw	0xff               	MOVLW	0xff
0016e4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0016e6   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0016e8   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
0016ea   5000     movf	0, 0, 0             	MOVF	r0x00, W
0016ec   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
0016ee   e1f7     bnz	0x16de               	BNZ	_00164_DS_
                                           ;	.line	115; testint.c	display_time (); 
0016f0   ec7e     call	0x18fc, 0           	CALL	_display_time
0016f2   f00c
                                           ;	.line	118; testint.c	INTCON2bits.TMR0IP	 = 1; 
0016f4   84f1     bsf	0xf1, 0x2, 0         	BSF	_INTCON2bits, 2
                                           ;	.line	121; testint.c	TMR0F    = 0;
0016f6   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	124; testint.c	T0CONbits.T08BIT    = 0;
0016f8   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	126; testint.c	T0CONbits.PSA       = 1;
0016fa   86d5     bsf	0xd5, 0x3, 0         	BSF	_T0CONbits, 3
                                           ;	.line	128; testint.c	INTCONbits.TMR0IE   = 1;
0016fc   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	130; testint.c	T0CONbits.TMR0ON    = 1;
0016fe   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
                                           _00160_DS_:
001700   010f     movlb	0xf                	BANKSEL	_refresh
                                           ;	.line	135; testint.c	if ( refresh == 1){
001702   5158     movf	0x58, 0, 0x1        	MOVF	_refresh, W, B
001704   0a01     xorlw	0x1                	XORLW	0x01
001706   e103     bnz	0x170e               	BNZ	_00173_DS_
001708   010f     movlb	0xf                	BANKSEL	(_refresh + 1)
00170a   5159     movf	0x59, 0, 0x1        	MOVF	(_refresh + 1), W, B
00170c   e001     bz	0x1710                	BZ	_00174_DS_
                                           _00173_DS_:
00170e   d7f8     bra	0x1700               	BRA	_00160_DS_
                                           _00174_DS_:
001710   010f     movlb	0xf                	BANKSEL	_refresh
                                           ;	.line	136; testint.c	refresh = 0;
001712   6b58     clrf	0x58, 0x1           	CLRF	_refresh, B
001714   010f     movlb	0xf                	BANKSEL	(_refresh + 1)
001716   6b59     clrf	0x59, 0x1           	CLRF	(_refresh + 1), B
                                           ;	.line	137; testint.c	display_time();
001718   ec7e     call	0x18fc, 0           	CALL	_display_time
00171a   f00c
00171c   010f     movlb	0xf                	BANKSEL	_alarmflag
                                           ;	.line	138; testint.c	if ( alarmflag == 1){
00171e   5156     movf	0x56, 0, 0x1        	MOVF	_alarmflag, W, B
001720   0a01     xorlw	0x1                	XORLW	0x01
001722   e103     bnz	0x172a               	BNZ	_00175_DS_
001724   010f     movlb	0xf                	BANKSEL	(_alarmflag + 1)
001726   5157     movf	0x57, 0, 0x1        	MOVF	(_alarmflag + 1), W, B
001728   e001     bz	0x172c                	BZ	_00176_DS_
                                           _00175_DS_:
00172a   d7ea     bra	0x1700               	BRA	_00160_DS_
                                           _00176_DS_:
                                           ;	.line	139; testint.c	alarm();
00172c   ec44     call	0xe88, 0            	CALL	_alarm
00172e   f007
001730   d7e7     bra	0x1700               	BRA	_00160_DS_
001732   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__dumb_delay1ms	code
                                           _dumb_delay1ms:
                                           ;	.line	337; testint.c	void dumb_delay1ms (void)
0019ca   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0019cc   ffe5
0019ce   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0019d0   ffd9
                                           ;	.line	339; testint.c	TMR0H = HIGH (0x10000-EXEC_FREQ/1000);
0019d2   0ed8     movlw	0xd8               	MOVLW	0xd8
0019d4   6ed7     movwf	0xd7, 0            	MOVWF	_TMR0H
                                           ;	.line	340; testint.c	TMR0L = LOW  (0x10000-EXEC_FREQ/1000);
0019d6   0ef0     movlw	0xf0               	MOVLW	0xf0
0019d8   6ed6     movwf	0xd6, 0            	MOVWF	_TMR0L
                                           ;	.line	341; testint.c	T0CONbits.TMR0ON = 0;  //disable timer0
0019da   9ed5     bcf	0xd5, 0x7, 0         	BCF	_T0CONbits, 7
                                           ;	.line	342; testint.c	T0CONbits.T08BIT = 0;  //use timer0 16-bit counter
0019dc   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	343; testint.c	T0CONbits.T0CS   = 0;  //use timer0 instruction cycle clock
0019de   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	344; testint.c	T0CONbits.PSA    = 1;  //disable timer0 prescaler
0019e0   86d5     bsf	0xd5, 0x3, 0         	BSF	_T0CONbits, 3
                                           ;	.line	345; testint.c	INTCONbits.T0IF   = 0;  //clear timer0 overflow bit
0019e2   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	346; testint.c	T0CONbits.TMR0ON = 1;  //enable timer0
0019e4   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
                                           _00356_DS_:
                                           ;	.line	347; testint.c	while(!INTCONbits.T0IF){} //busy wait for timer0 to overflow
0019e6   a4f2     btfss	0xf2, 0x2, 0       	BTFSS	_INTCONbits, 2
0019e8   d7fe     bra	0x19e6               	BRA	_00356_DS_
                                           ;	.line	348; testint.c	INTCONbits.T0IF   = 0;  //clear timer0 overflow bit
0019ea   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
0019ec   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0019ee   ffd9
0019f0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__strlcpy	code
                                           _strlcpy:
                                           ;	.line	306; testint.c	strlcpy(char *dst, const char *src, size_t siz)
000ad0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000ad2   ffe5
000ad4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000ad6   ffd9
000ad8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000ada   ffe5
000adc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000ade   ffe5
000ae0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000ae2   ffe5
000ae4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000ae6   ffe5
000ae8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000aea   ffe5
000aec   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000aee   ffe5
000af0   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000af2   ffe5
000af4   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000af6   ffe5
000af8   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000afa   ffe5
000afc   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000afe   ffe5
000b00   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000b02   ffe5
000b04   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000b06   ffe5
000b08   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000b0a   ffe5
000b0c   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
000b0e   ffe5
000b10   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
000b12   ffe5
000b14   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
000b16   ffe5
000b18   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
000b1a   ffe5
000b1c   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
000b1e   ffe5
000b20   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
000b22   ffe5
000b24   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
000b26   ffe5
000b28   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
000b2a   ffe5
000b2c   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
000b2e   ffe5
000b30   0e02     movlw	0x2                	MOVLW	0x02
000b32   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000b34   f000
000b36   0e03     movlw	0x3                	MOVLW	0x03
000b38   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000b3a   f001
000b3c   0e04     movlw	0x4                	MOVLW	0x04
000b3e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000b40   f002
000b42   0e05     movlw	0x5                	MOVLW	0x05
000b44   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
000b46   f003
000b48   0e06     movlw	0x6                	MOVLW	0x06
000b4a   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
000b4c   f004
000b4e   0e07     movlw	0x7                	MOVLW	0x07
000b50   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
000b52   f005
000b54   0e08     movlw	0x8                	MOVLW	0x08
000b56   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
000b58   f006
000b5a   0e09     movlw	0x9                	MOVLW	0x09
000b5c   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
000b5e   f007
                                           ;	.line	308; testint.c	char       *d = dst;
000b60   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
000b62   f008
000b64   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
000b66   f009
000b68   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
000b6a   f00a
                                           ;	.line	309; testint.c	const char *s = src;
000b6c   c003     movff	0x3, 0xb           	MOVFF	r0x03, r0x0b
000b6e   f00b
000b70   c004     movff	0x4, 0xc           	MOVFF	r0x04, r0x0c
000b72   f00c
000b74   c005     movff	0x5, 0xd           	MOVFF	r0x05, r0x0d
000b76   f00d
                                           ;	.line	310; testint.c	size_t      n = siz;
000b78   c006     movff	0x6, 0xe           	MOVFF	r0x06, r0x0e
000b7a   f00e
000b7c   c007     movff	0x7, 0xf           	MOVFF	r0x07, r0x0f
000b7e   f00f
                                           ;	.line	313; testint.c	if (n != 0)
000b80   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000b82   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000b84   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000b86   d03e     bra	0xc04                	BRA	_00336_DS_
                                           ;	.line	315; testint.c	while (--n != 0)
000b88   c003     movff	0x3, 0x10          	MOVFF	r0x03, r0x10
000b8a   f010
000b8c   c004     movff	0x4, 0x11          	MOVFF	r0x04, r0x11
000b8e   f011
000b90   c005     movff	0x5, 0x12          	MOVFF	r0x05, r0x12
000b92   f012
000b94   c006     movff	0x6, 0x13          	MOVFF	r0x06, r0x13
000b96   f013
000b98   c007     movff	0x7, 0x14          	MOVFF	r0x07, r0x14
000b9a   f014
                                           _00332_DS_:
000b9c   0eff     movlw	0xff               	MOVLW	0xff
000b9e   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x13, F
000ba0   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000ba2   0614     decf	0x14, 0x1, 0        	DECF	r0x14, F
000ba4   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
000ba6   1014     iorwf	0x14, 0, 0         	IORWF	r0x14, W
000ba8   e01d     bz	0xbe4                 	BZ	_00351_DS_
                                           ;	.line	317; testint.c	if ((*d++ = *s++) == '\0')
000baa   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
000bac   ffe9
000bae   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
000bb0   fff3
000bb2   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
000bb4   ecf9     call	0x19f2, 0           	CALL	__gptrget1
000bb6   f00c
000bb8   6e15     movwf	0x15, 0            	MOVWF	r0x15
000bba   2a10     incf	0x10, 0x1, 0        	INCF	r0x10, F
000bbc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000bbe   2a11     incf	0x11, 0x1, 0        	INCF	r0x11, F
000bc0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000bc2   2a12     incf	0x12, 0x1, 0        	INCF	r0x12, F
000bc4   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
000bc6   ffe5
000bc8   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000bca   ffe9
000bcc   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000bce   fff3
000bd0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000bd2   ec25     call	0x1a4a, 0           	CALL	__gptrput1
000bd4   f00d
000bd6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000bd8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000bda   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000bdc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000bde   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000be0   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
000be2   e1dc     bnz	0xb9c                	BNZ	_00332_DS_
                                           _00351_DS_:
                                           ;	.line	318; testint.c	break;
000be4   c010     movff	0x10, 0xb          	MOVFF	r0x10, r0x0b
000be6   f00b
000be8   c011     movff	0x11, 0xc          	MOVFF	r0x11, r0x0c
000bea   f00c
000bec   c012     movff	0x12, 0xd          	MOVFF	r0x12, r0x0d
000bee   f00d
000bf0   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
000bf2   f008
000bf4   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
000bf6   f009
000bf8   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
000bfa   f00a
000bfc   c013     movff	0x13, 0xe          	MOVFF	r0x13, r0x0e
000bfe   f00e
000c00   c014     movff	0x14, 0xf          	MOVFF	r0x14, r0x0f
000c02   f00f
                                           _00336_DS_:
                                           ;	.line	323; testint.c	if (n == 0)
000c04   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000c06   100f     iorwf	0xf, 0, 0          	IORWF	r0x0f, W
000c08   e127     bnz	0xc58                	BNZ	_00343_DS_
                                           ;	.line	325; testint.c	if (siz != 0)
000c0a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000c0c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000c0e   e009     bz	0xc22                 	BZ	_00350_DS_
                                           ;	.line	326; testint.c	*d = '\0';          /* NUL-terminate dst */
000c10   0e00     movlw	0                  	MOVLW	0x00
000c12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c14   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
000c16   ffe9
000c18   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
000c1a   fff3
000c1c   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000c1e   ec25     call	0x1a4a, 0           	CALL	__gptrput1
000c20   f00d
                                           _00350_DS_:
                                           ;	.line	327; testint.c	while (*s++)
000c22   c00b     movff	0xb, 0             	MOVFF	r0x0b, r0x00
000c24   f000
000c26   c00c     movff	0xc, 0x1           	MOVFF	r0x0c, r0x01
000c28   f001
000c2a   c00d     movff	0xd, 0x2           	MOVFF	r0x0d, r0x02
000c2c   f002
                                           _00339_DS_:
000c2e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000c30   ffe9
000c32   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000c34   fff3
000c36   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c38   ecf9     call	0x19f2, 0           	CALL	__gptrget1
000c3a   f00c
000c3c   6e06     movwf	0x6, 0             	MOVWF	r0x06
000c3e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000c40   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000c42   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000c44   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000c46   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000c48   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000c4a   e1f1     bnz	0xc2e                	BNZ	_00339_DS_
000c4c   c000     movff	0, 0xb             	MOVFF	r0x00, r0x0b
000c4e   f00b
000c50   c001     movff	0x1, 0xc           	MOVFF	r0x01, r0x0c
000c52   f00c
000c54   c002     movff	0x2, 0xd           	MOVFF	r0x02, r0x0d
000c56   f00d
                                           _00343_DS_:
                                           ;	.line	333; testint.c	return (s - src - 1);       /* count does not include NUL */
000c58   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c5a   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
000c5c   6e03     movwf	0x3, 0             	MOVWF	r0x03
000c5e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c60   580c     subwfb	0xc, 0, 0         	SUBWFB	r0x0c, W
000c62   6e04     movwf	0x4, 0             	MOVWF	r0x04
000c64   0eff     movlw	0xff               	MOVLW	0xff
000c66   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
000c68   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000c6a   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
000c6c   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
000c6e   fff3
000c70   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c72   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
000c74   f015
000c76   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
000c78   f014
000c7a   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
000c7c   f013
000c7e   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
000c80   f012
000c82   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
000c84   f011
000c86   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
000c88   f010
000c8a   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
000c8c   f00f
000c8e   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
000c90   f00e
000c92   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
000c94   f00d
000c96   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
000c98   f00c
000c9a   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
000c9c   f00b
000c9e   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
000ca0   f00a
000ca2   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
000ca4   f009
000ca6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000ca8   f008
000caa   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000cac   f007
000cae   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000cb0   f006
000cb2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000cb4   f005
000cb6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000cb8   f004
000cba   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000cbc   f003
000cbe   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000cc0   f002
000cc2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000cc4   f001
000cc6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000cc8   f000
000cca   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000ccc   ffd9
000cce   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__display_string	code
                                           _display_string:
                                           ;	.line	261; testint.c	void display_string(BYTE pos, char* text)
001344   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001346   ffe5
001348   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00134a   ffd9
00134c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00134e   ffe5
001350   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001352   ffe5
001354   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001356   ffe5
001358   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00135a   ffe5
00135c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00135e   ffe5
001360   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001362   ffe5
001364   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001366   ffe5
001368   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00136a   ffe5
00136c   0e02     movlw	0x2                	MOVLW	0x02
00136e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001370   f000
001372   0e03     movlw	0x3                	MOVLW	0x03
001374   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001376   f001
001378   0e04     movlw	0x4                	MOVLW	0x04
00137a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00137c   f002
00137e   0e05     movlw	0x5                	MOVLW	0x05
001380   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001382   f003
                                           ;	.line	263; testint.c	BYTE l= strlen(text)+1;
001384   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001386   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001388   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00138a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00138c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00138e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001390   ec3e     call	0x187c, 0           	CALL	_strlen
001392   f00c
001394   6e04     movwf	0x4, 0             	MOVWF	r0x04
001396   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
001398   f005
00139a   0e03     movlw	0x3                	MOVLW	0x03
00139c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00139e   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
                                           ;	.line	264; testint.c	BYTE max= 32-pos;
0013a0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0013a2   0820     sublw	0x20               	SUBLW	0x20
0013a4   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	265; testint.c	strlcpy((char*)&LCDText[pos], text,(l<max)?l:max );
0013a6   6a06     clrf	0x6, 0              	CLRF	r0x06
0013a8   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0013aa   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0013ac   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0013ae   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
0013b0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0013b2   6e06     movwf	0x6, 0             	MOVWF	r0x06
0013b4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0013b6   6e00     movwf	0, 0               	MOVWF	r0x00
0013b8   0e80     movlw	0x80               	MOVLW	0x80
0013ba   6e07     movwf	0x7, 0             	MOVWF	r0x07
0013bc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0013be   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
0013c0   e302     bnc	0x13c6               	BNC	_00323_DS_
0013c2   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
0013c4   f004
                                           _00323_DS_:
0013c6   6a05     clrf	0x5, 0              	CLRF	r0x05
0013c8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0013ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013cc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0013ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013d0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0013d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013d4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0013d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013d8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0013da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013dc   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0013de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013e0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0013e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013e4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0013e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013e8   ec68     call	0xad0, 0            	CALL	_strlcpy
0013ea   f005
0013ec   0e08     movlw	0x8                	MOVLW	0x08
0013ee   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	266; testint.c	LCDUpdate();
0013f0   ec05     call	0x60a, 0            	CALL	_LCDUpdate
0013f2   f003
0013f4   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0013f6   f007
0013f8   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0013fa   f006
0013fc   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0013fe   f005
001400   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001402   f004
001404   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001406   f003
001408   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00140a   f002
00140c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00140e   f001
001410   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001412   f000
001414   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001416   ffd9
001418   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__display_word	code
                                           _display_word:
                                           ;	.line	239; testint.c	void display_word(BYTE pos, WORD w) //WORD is a 16 bits unsigned
00110c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00110e   ffe5
001110   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001112   ffd9
001114   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001116   ffe5
001118   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00111a   ffe5
00111c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00111e   ffe5
001120   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001122   ffe5
001124   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001126   ffe5
001128   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00112a   ffe5
00112c   0e02     movlw	0x2                	MOVLW	0x02
00112e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001130   f000
001132   0e03     movlw	0x3                	MOVLW	0x03
001134   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001136   f001
001138   0e04     movlw	0x4                	MOVLW	0x04
00113a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00113c   f002
                                           ;	.line	247; testint.c	ultoa(w, WDigit, radix);      
00113e   6a03     clrf	0x3, 0              	CLRF	r0x03
001140   6a04     clrf	0x4, 0              	CLRF	r0x04
001142   0e0a     movlw	0xa                	MOVLW	0x0a
001144   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001146   0e0e     movlw	0xe                	MOVLW	HIGH(_display_word_WDigit_1_1)
001148   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00114a   0e10     movlw	0x10               	MOVLW	LOW(_display_word_WDigit_1_1)
00114c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00114e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001150   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001152   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001154   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001156   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001158   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00115a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00115c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00115e   ec68     call	0xcd0, 0            	CALL	_ultoa
001160   f006
001162   0e07     movlw	0x7                	MOVLW	0x07
001164   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	248; testint.c	for(j = 0; j < strlen((char*)WDigit); j++)
001166   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00304_DS_:
001168   0e0e     movlw	0xe                	MOVLW	HIGH(_display_word_WDigit_1_1)
00116a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00116c   0e10     movlw	0x10               	MOVLW	LOW(_display_word_WDigit_1_1)
00116e   6e02     movwf	0x2, 0             	MOVWF	r0x02
001170   0e80     movlw	0x80               	MOVLW	0x80
001172   6e04     movwf	0x4, 0             	MOVWF	r0x04
001174   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001176   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001178   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00117a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00117c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00117e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001180   ec3e     call	0x187c, 0           	CALL	_strlen
001182   f00c
001184   6e02     movwf	0x2, 0             	MOVWF	r0x02
001186   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
001188   f003
00118a   0e03     movlw	0x3                	MOVLW	0x03
00118c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00118e   c001     movff	0x1, 0x4           	MOVFF	r0x01, r0x04
001190   f004
001192   6a05     clrf	0x5, 0              	CLRF	r0x05
001194   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001196   0f80     addlw	0x80               	ADDLW	0x80
001198   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
00119a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00119c   0f80     addlw	0x80               	ADDLW	0x80
00119e   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
0011a0   e102     bnz	0x11a6               	BNZ	_00314_DS_
0011a2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0011a4   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00314_DS_:
0011a6   e21c     bc	0x11e0                	BC	_00307_DS_
                                           ;	.line	250; testint.c	LCDText[LCDPos++] = WDigit[j];
0011a8   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
0011aa   f002
0011ac   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0011ae   6a03     clrf	0x3, 0              	CLRF	r0x03
0011b0   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0011b2   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
0011b4   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0011b6   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0011b8   0e10     movlw	0x10               	MOVLW	LOW(_display_word_WDigit_1_1)
0011ba   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0011bc   6e04     movwf	0x4, 0             	MOVWF	r0x04
0011be   6a05     clrf	0x5, 0              	CLRF	r0x05
0011c0   0e0e     movlw	0xe                	MOVLW	HIGH(_display_word_WDigit_1_1)
0011c2   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
0011c4   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
0011c6   ffe9
0011c8   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
0011ca   ffea
0011cc   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
0011ce   f004
0011d0   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
0011d2   ffe9
0011d4   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
0011d6   ffea
0011d8   c004     movff	0x4, 0xfef         	MOVFF	r0x04, INDF0
0011da   ffef
                                           ;	.line	248; testint.c	for(j = 0; j < strlen((char*)WDigit); j++)
0011dc   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0011de   d7c4     bra	0x1168               	BRA	_00304_DS_
                                           _00307_DS_:
                                           ;	.line	252; testint.c	if(LCDPos < 32u)
0011e0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0011e2   f001
0011e4   6a02     clrf	0x2, 0              	CLRF	r0x02
0011e6   0e00     movlw	0                  	MOVLW	0x00
0011e8   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0011ea   e102     bnz	0x11f0               	BNZ	_00315_DS_
0011ec   0e20     movlw	0x20               	MOVLW	0x20
0011ee   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00315_DS_:
0011f0   e20b     bc	0x1208                	BC	_00303_DS_
                                           ;	.line	253; testint.c	LCDText[LCDPos] = 0;
0011f2   6a01     clrf	0x1, 0              	CLRF	r0x01
0011f4   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0011f6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0011f8   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0011fa   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0011fc   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0011fe   ffe9
001200   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
001202   ffea
001204   0e00     movlw	0                  	MOVLW	0x00
001206   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           _00303_DS_:
                                           ;	.line	254; testint.c	LCDUpdate();
001208   ec05     call	0x60a, 0            	CALL	_LCDUpdate
00120a   f003
00120c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00120e   f005
001210   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001212   f004
001214   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001216   f003
001218   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00121a   f002
00121c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00121e   f001
001220   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001222   f000
001224   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001226   ffd9
001228   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__display_time	code
                                           _display_time:
                                           ;	.line	224; testint.c	void display_time(){    
0018fc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0018fe   ffe5
001900   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001902   ffd9
001904   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001906   ffe5
001908   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00190a   ffe5
00190c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00190e   ffe5
                                           ;	.line	225; testint.c	display_string(0,time);             
001910   0e0f     movlw	0xf                	MOVLW	HIGH(_time)
001912   6e01     movwf	0x1, 0             	MOVWF	r0x01
001914   0e41     movlw	0x41               	MOVLW	LOW(_time)
001916   6e00     movwf	0, 0               	MOVWF	r0x00
001918   0e80     movlw	0x80               	MOVLW	0x80
00191a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00191c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00191e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001920   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001922   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001924   5000     movf	0, 0, 0             	MOVF	r0x00, W
001926   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001928   0e00     movlw	0                  	MOVLW	0x00
00192a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00192c   eca2     call	0x1344, 0           	CALL	_display_string
00192e   f009
001930   0e04     movlw	0x4                	MOVLW	0x04
001932   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001934   010f     movlb	0xf                	BANKSEL	_position
                                           ;	.line	226; testint.c	display_string(16+position-1," ^");
001936   5154     movf	0x54, 0, 0x1        	MOVF	_position, W, B
001938   6e00     movwf	0, 0               	MOVWF	r0x00
00193a   0e0f     movlw	0xf                	MOVLW	0x0f
00193c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00193e   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
001940   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001942   0e06     movlw	0x6                	MOVLW	HIGH(__str_2)
001944   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001946   0e06     movlw	0x6                	MOVLW	LOW(__str_2)
001948   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00194a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00194c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00194e   eca2     call	0x1344, 0           	CALL	_display_string
001950   f009
001952   0e04     movlw	0x4                	MOVLW	0x04
001954   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001956   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001958   f002
00195a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00195c   f001
00195e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001960   f000
001962   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001964   ffd9
001966   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__test_inc_current_time	code
                                           _test_inc_current_time:
                                           ;	.line	193; testint.c	void test_inc_current_time(){        
00000c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00000e   ffe5
000010   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000012   ffd9
000014   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000016   ffe5
000018   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00001a   ffe5
00001c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00001e   ffe5
000020   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000022   ffe5
000024   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000026   ffe5
000028   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00002a   ffe5
00002c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00002e   ffe5
000030   010f     movlb	0xf                	BANKSEL	_currentTime
                                           ;	.line	194; testint.c	if(currentTime[7] == ':'){
000032   5151     movf	0x51, 0, 0x1        	MOVF	_currentTime, W, B
000034   0f07     addlw	0x7                	ADDLW	0x07
000036   6e00     movwf	0, 0               	MOVWF	r0x00
000038   0e00     movlw	0                  	MOVLW	0x00
00003a   010f     movlb	0xf                	BANKSEL	(_currentTime + 1)
00003c   2152     addwfc	0x52, 0, 0x1      	ADDWFC	(_currentTime + 1), W, B
00003e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000040   0e00     movlw	0                  	MOVLW	0x00
000042   010f     movlb	0xf                	BANKSEL	(_currentTime + 2)
000044   2153     addwfc	0x53, 0, 0x1      	ADDWFC	(_currentTime + 2), W, B
000046   6e02     movwf	0x2, 0             	MOVWF	r0x02
000048   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00004a   ffe9
00004c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00004e   fff3
000050   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000052   ecf9     call	0x19f2, 0           	CALL	__gptrget1
000054   f00c
000056   6e03     movwf	0x3, 0             	MOVWF	r0x03
000058   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00005a   0a3a     xorlw	0x3a               	XORLW	0x3a
00005c   e127     bnz	0xac                 	BNZ	_00253_DS_
                                           ;	.line	195; testint.c	currentTime[7] = '0';
00005e   0e30     movlw	0x30               	MOVLW	0x30
000060   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000062   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000064   ffe9
000066   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000068   fff3
00006a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00006c   ec25     call	0x1a4a, 0           	CALL	__gptrput1
00006e   f00d
000070   010f     movlb	0xf                	BANKSEL	_currentTime
                                           ;	.line	196; testint.c	++currentTime[6];
000072   5151     movf	0x51, 0, 0x1        	MOVF	_currentTime, W, B
000074   0f06     addlw	0x6                	ADDLW	0x06
000076   6e00     movwf	0, 0               	MOVWF	r0x00
000078   0e00     movlw	0                  	MOVLW	0x00
00007a   010f     movlb	0xf                	BANKSEL	(_currentTime + 1)
00007c   2152     addwfc	0x52, 0, 0x1      	ADDWFC	(_currentTime + 1), W, B
00007e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000080   0e00     movlw	0                  	MOVLW	0x00
000082   010f     movlb	0xf                	BANKSEL	(_currentTime + 2)
000084   2153     addwfc	0x53, 0, 0x1      	ADDWFC	(_currentTime + 2), W, B
000086   6e02     movwf	0x2, 0             	MOVWF	r0x02
000088   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00008a   ffe9
00008c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00008e   fff3
000090   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000092   ecf9     call	0x19f2, 0           	CALL	__gptrget1
000094   f00c
000096   6e03     movwf	0x3, 0             	MOVWF	r0x03
000098   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
00009a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00009c   ffe5
00009e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0000a0   ffe9
0000a2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0000a4   fff3
0000a6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0000a8   ec25     call	0x1a4a, 0           	CALL	__gptrput1
0000aa   f00d
                                           _00253_DS_:
0000ac   010f     movlb	0xf                	BANKSEL	_currentTime
                                           ;	.line	198; testint.c	if(currentTime[6]=='6'){
0000ae   5151     movf	0x51, 0, 0x1        	MOVF	_currentTime, W, B
0000b0   0f06     addlw	0x6                	ADDLW	0x06
0000b2   6e00     movwf	0, 0               	MOVWF	r0x00
0000b4   0e00     movlw	0                  	MOVLW	0x00
0000b6   010f     movlb	0xf                	BANKSEL	(_currentTime + 1)
0000b8   2152     addwfc	0x52, 0, 0x1      	ADDWFC	(_currentTime + 1), W, B
0000ba   6e01     movwf	0x1, 0             	MOVWF	r0x01
0000bc   0e00     movlw	0                  	MOVLW	0x00
0000be   010f     movlb	0xf                	BANKSEL	(_currentTime + 2)
0000c0   2153     addwfc	0x53, 0, 0x1      	ADDWFC	(_currentTime + 2), W, B
0000c2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0000c4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0000c6   ffe9
0000c8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0000ca   fff3
0000cc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0000ce   ecf9     call	0x19f2, 0           	CALL	__gptrget1
0000d0   f00c
0000d2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0000d4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0000d6   0a36     xorlw	0x36               	XORLW	0x36
0000d8   e12c     bnz	0x132                	BNZ	_00255_DS_
                                           ;	.line	199; testint.c	currentTime[6]='0';
0000da   0e30     movlw	0x30               	MOVLW	0x30
0000dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000de   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0000e0   ffe9
0000e2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0000e4   fff3
0000e6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0000e8   ec25     call	0x1a4a, 0           	CALL	__gptrput1
0000ea   f00d
0000ec   010f     movlb	0xf                	BANKSEL	_currentTime
                                           ;	.line	200; testint.c	currentTime[4]++;
0000ee   5151     movf	0x51, 0, 0x1        	MOVF	_currentTime, W, B
0000f0   0f04     addlw	0x4                	ADDLW	0x04
0000f2   6e00     movwf	0, 0               	MOVWF	r0x00
0000f4   0e00     movlw	0                  	MOVLW	0x00
0000f6   010f     movlb	0xf                	BANKSEL	(_currentTime + 1)
0000f8   2152     addwfc	0x52, 0, 0x1      	ADDWFC	(_currentTime + 1), W, B
0000fa   6e01     movwf	0x1, 0             	MOVWF	r0x01
0000fc   0e00     movlw	0                  	MOVLW	0x00
0000fe   010f     movlb	0xf                	BANKSEL	(_currentTime + 2)
000100   2153     addwfc	0x53, 0, 0x1      	ADDWFC	(_currentTime + 2), W, B
000102   6e02     movwf	0x2, 0             	MOVWF	r0x02
000104   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000106   ffe9
000108   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00010a   fff3
00010c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00010e   ecf9     call	0x19f2, 0           	CALL	__gptrget1
000110   f00c
000112   6e03     movwf	0x3, 0             	MOVWF	r0x03
000114   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000116   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000118   ffe5
00011a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00011c   ffe9
00011e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000120   fff3
000122   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000124   ec25     call	0x1a4a, 0           	CALL	__gptrput1
000126   f00d
                                           ;	.line	201; testint.c	alarmflag = 1;
000128   0e01     movlw	0x1                	MOVLW	0x01
00012a   010f     movlb	0xf                	BANKSEL	_alarmflag
00012c   6f56     movwf	0x56, 0x1          	MOVWF	_alarmflag, B
00012e   010f     movlb	0xf                	BANKSEL	(_alarmflag + 1)
000130   6b57     clrf	0x57, 0x1           	CLRF	(_alarmflag + 1), B
                                           _00255_DS_:
000132   010f     movlb	0xf                	BANKSEL	_currentTime
                                           ;	.line	203; testint.c	if(currentTime[4] == ':'){
000134   5151     movf	0x51, 0, 0x1        	MOVF	_currentTime, W, B
000136   0f04     addlw	0x4                	ADDLW	0x04
000138   6e00     movwf	0, 0               	MOVWF	r0x00
00013a   0e00     movlw	0                  	MOVLW	0x00
00013c   010f     movlb	0xf                	BANKSEL	(_currentTime + 1)
00013e   2152     addwfc	0x52, 0, 0x1      	ADDWFC	(_currentTime + 1), W, B
000140   6e01     movwf	0x1, 0             	MOVWF	r0x01
000142   0e00     movlw	0                  	MOVLW	0x00
000144   010f     movlb	0xf                	BANKSEL	(_currentTime + 2)
000146   2153     addwfc	0x53, 0, 0x1      	ADDWFC	(_currentTime + 2), W, B
000148   6e02     movwf	0x2, 0             	MOVWF	r0x02
00014a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00014c   ffe9
00014e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000150   fff3
000152   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000154   ecf9     call	0x19f2, 0           	CALL	__gptrget1
000156   f00c
000158   6e03     movwf	0x3, 0             	MOVWF	r0x03
00015a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00015c   0a3a     xorlw	0x3a               	XORLW	0x3a
00015e   e127     bnz	0x1ae                	BNZ	_00257_DS_
                                           ;	.line	204; testint.c	currentTime[4] = '0';
000160   0e30     movlw	0x30               	MOVLW	0x30
000162   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000164   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000166   ffe9
000168   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00016a   fff3
00016c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00016e   ec25     call	0x1a4a, 0           	CALL	__gptrput1
000170   f00d
000172   010f     movlb	0xf                	BANKSEL	_currentTime
                                           ;	.line	205; testint.c	++currentTime[3];
000174   5151     movf	0x51, 0, 0x1        	MOVF	_currentTime, W, B
000176   0f03     addlw	0x3                	ADDLW	0x03
000178   6e00     movwf	0, 0               	MOVWF	r0x00
00017a   0e00     movlw	0                  	MOVLW	0x00
00017c   010f     movlb	0xf                	BANKSEL	(_currentTime + 1)
00017e   2152     addwfc	0x52, 0, 0x1      	ADDWFC	(_currentTime + 1), W, B
000180   6e01     movwf	0x1, 0             	MOVWF	r0x01
000182   0e00     movlw	0                  	MOVLW	0x00
000184   010f     movlb	0xf                	BANKSEL	(_currentTime + 2)
000186   2153     addwfc	0x53, 0, 0x1      	ADDWFC	(_currentTime + 2), W, B
000188   6e02     movwf	0x2, 0             	MOVWF	r0x02
00018a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00018c   ffe9
00018e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000190   fff3
000192   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000194   ecf9     call	0x19f2, 0           	CALL	__gptrget1
000196   f00c
000198   6e03     movwf	0x3, 0             	MOVWF	r0x03
00019a   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
00019c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00019e   ffe5
0001a0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0001a2   ffe9
0001a4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0001a6   fff3
0001a8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001aa   ec25     call	0x1a4a, 0           	CALL	__gptrput1
0001ac   f00d
                                           _00257_DS_:
0001ae   010f     movlb	0xf                	BANKSEL	_currentTime
                                           ;	.line	207; testint.c	if(currentTime[3]=='6'){
0001b0   5151     movf	0x51, 0, 0x1        	MOVF	_currentTime, W, B
0001b2   0f03     addlw	0x3                	ADDLW	0x03
0001b4   6e00     movwf	0, 0               	MOVWF	r0x00
0001b6   0e00     movlw	0                  	MOVLW	0x00
0001b8   010f     movlb	0xf                	BANKSEL	(_currentTime + 1)
0001ba   2152     addwfc	0x52, 0, 0x1      	ADDWFC	(_currentTime + 1), W, B
0001bc   6e01     movwf	0x1, 0             	MOVWF	r0x01
0001be   0e00     movlw	0                  	MOVLW	0x00
0001c0   010f     movlb	0xf                	BANKSEL	(_currentTime + 2)
0001c2   2153     addwfc	0x53, 0, 0x1      	ADDWFC	(_currentTime + 2), W, B
0001c4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0001c6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0001c8   ffe9
0001ca   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0001cc   fff3
0001ce   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001d0   ecf9     call	0x19f2, 0           	CALL	__gptrget1
0001d2   f00c
0001d4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0001d6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0001d8   0a36     xorlw	0x36               	XORLW	0x36
0001da   e127     bnz	0x22a                	BNZ	_00259_DS_
                                           ;	.line	208; testint.c	currentTime[3]='0';
0001dc   0e30     movlw	0x30               	MOVLW	0x30
0001de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001e0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0001e2   ffe9
0001e4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0001e6   fff3
0001e8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001ea   ec25     call	0x1a4a, 0           	CALL	__gptrput1
0001ec   f00d
0001ee   010f     movlb	0xf                	BANKSEL	_currentTime
                                           ;	.line	209; testint.c	currentTime[1]++;
0001f0   5151     movf	0x51, 0, 0x1        	MOVF	_currentTime, W, B
0001f2   0f01     addlw	0x1                	ADDLW	0x01
0001f4   6e00     movwf	0, 0               	MOVWF	r0x00
0001f6   0e00     movlw	0                  	MOVLW	0x00
0001f8   010f     movlb	0xf                	BANKSEL	(_currentTime + 1)
0001fa   2152     addwfc	0x52, 0, 0x1      	ADDWFC	(_currentTime + 1), W, B
0001fc   6e01     movwf	0x1, 0             	MOVWF	r0x01
0001fe   0e00     movlw	0                  	MOVLW	0x00
000200   010f     movlb	0xf                	BANKSEL	(_currentTime + 2)
000202   2153     addwfc	0x53, 0, 0x1      	ADDWFC	(_currentTime + 2), W, B
000204   6e02     movwf	0x2, 0             	MOVWF	r0x02
000206   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000208   ffe9
00020a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00020c   fff3
00020e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000210   ecf9     call	0x19f2, 0           	CALL	__gptrget1
000212   f00c
000214   6e03     movwf	0x3, 0             	MOVWF	r0x03
000216   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000218   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00021a   ffe5
00021c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00021e   ffe9
000220   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000222   fff3
000224   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000226   ec25     call	0x1a4a, 0           	CALL	__gptrput1
000228   f00d
                                           _00259_DS_:
00022a   010f     movlb	0xf                	BANKSEL	_currentTime
                                           ;	.line	211; testint.c	if(currentTime[1] == ':'){
00022c   5151     movf	0x51, 0, 0x1        	MOVF	_currentTime, W, B
00022e   0f01     addlw	0x1                	ADDLW	0x01
000230   6e00     movwf	0, 0               	MOVWF	r0x00
000232   0e00     movlw	0                  	MOVLW	0x00
000234   010f     movlb	0xf                	BANKSEL	(_currentTime + 1)
000236   2152     addwfc	0x52, 0, 0x1      	ADDWFC	(_currentTime + 1), W, B
000238   6e01     movwf	0x1, 0             	MOVWF	r0x01
00023a   0e00     movlw	0                  	MOVLW	0x00
00023c   010f     movlb	0xf                	BANKSEL	(_currentTime + 2)
00023e   2153     addwfc	0x53, 0, 0x1      	ADDWFC	(_currentTime + 2), W, B
000240   6e02     movwf	0x2, 0             	MOVWF	r0x02
000242   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000244   ffe9
000246   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000248   fff3
00024a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00024c   ecf9     call	0x19f2, 0           	CALL	__gptrget1
00024e   f00c
000250   6e03     movwf	0x3, 0             	MOVWF	r0x03
000252   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000254   0a3a     xorlw	0x3a               	XORLW	0x3a
000256   e121     bnz	0x29a                	BNZ	_00261_DS_
                                           ;	.line	212; testint.c	currentTime[1] = '0';
000258   0e30     movlw	0x30               	MOVLW	0x30
00025a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00025c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00025e   ffe9
000260   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000262   fff3
000264   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000266   ec25     call	0x1a4a, 0           	CALL	__gptrput1
000268   f00d
                                           ;	.line	213; testint.c	++currentTime[0];
00026a   cf51     movff	0xf51, 0x3         	MOVFF	_currentTime, r0x03
00026c   f003
00026e   cf52     movff	0xf52, 0x4         	MOVFF	(_currentTime + 1), r0x04
000270   f004
000272   cf53     movff	0xf53, 0x5         	MOVFF	(_currentTime + 2), r0x05
000274   f005
000276   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
000278   ffe9
00027a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00027c   fff3
00027e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000280   ecf9     call	0x19f2, 0           	CALL	__gptrget1
000282   f00c
000284   6e06     movwf	0x6, 0             	MOVWF	r0x06
000286   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
000288   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00028a   ffe5
00028c   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00028e   ffe9
000290   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
000292   fff3
000294   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000296   ec25     call	0x1a4a, 0           	CALL	__gptrput1
000298   f00d
                                           _00261_DS_:
                                           ;	.line	215; testint.c	if(currentTime[0]=='2' && currentTime[1]=='4'){
00029a   cf51     movff	0xf51, 0x3         	MOVFF	_currentTime, r0x03
00029c   f003
00029e   cf52     movff	0xf52, 0x4         	MOVFF	(_currentTime + 1), r0x04
0002a0   f004
0002a2   cf53     movff	0xf53, 0x5         	MOVFF	(_currentTime + 2), r0x05
0002a4   f005
0002a6   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0002a8   ffe9
0002aa   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0002ac   fff3
0002ae   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0002b0   ecf9     call	0x19f2, 0           	CALL	__gptrget1
0002b2   f00c
0002b4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0002b6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002b8   0a32     xorlw	0x32               	XORLW	0x32
0002ba   e123     bnz	0x302                	BNZ	_00263_DS_
0002bc   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0002be   ffe9
0002c0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0002c2   fff3
0002c4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0002c6   ecf9     call	0x19f2, 0           	CALL	__gptrget1
0002c8   f00c
0002ca   6e03     movwf	0x3, 0             	MOVWF	r0x03
0002cc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002ce   0a34     xorlw	0x34               	XORLW	0x34
0002d0   e118     bnz	0x302                	BNZ	_00263_DS_
                                           ;	.line	216; testint.c	currentTime[0]='0';
0002d2   cf51     movff	0xf51, 0x3         	MOVFF	_currentTime, r0x03
0002d4   f003
0002d6   cf52     movff	0xf52, 0x4         	MOVFF	(_currentTime + 1), r0x04
0002d8   f004
0002da   cf53     movff	0xf53, 0x5         	MOVFF	(_currentTime + 2), r0x05
0002dc   f005
0002de   0e30     movlw	0x30               	MOVLW	0x30
0002e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002e2   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0002e4   ffe9
0002e6   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0002e8   fff3
0002ea   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0002ec   ec25     call	0x1a4a, 0           	CALL	__gptrput1
0002ee   f00d
                                           ;	.line	217; testint.c	currentTime[1]='0';
0002f0   0e30     movlw	0x30               	MOVLW	0x30
0002f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002f4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0002f6   ffe9
0002f8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0002fa   fff3
0002fc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0002fe   ec25     call	0x1a4a, 0           	CALL	__gptrput1
000300   f00d
                                           _00263_DS_:
                                           ;	.line	219; testint.c	if(currentTime[0]=='3'){
000302   cf51     movff	0xf51, 0           	MOVFF	_currentTime, r0x00
000304   f000
000306   cf52     movff	0xf52, 0x1         	MOVFF	(_currentTime + 1), r0x01
000308   f001
00030a   cf53     movff	0xf53, 0x2         	MOVFF	(_currentTime + 2), r0x02
00030c   f002
00030e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000310   ffe9
000312   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000314   fff3
000316   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000318   ecf9     call	0x19f2, 0           	CALL	__gptrget1
00031a   f00c
00031c   6e00     movwf	0, 0               	MOVWF	r0x00
00031e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000320   0a33     xorlw	0x33               	XORLW	0x33
000322   e10f     bnz	0x342                	BNZ	_00267_DS_
                                           ;	.line	220; testint.c	currentTime[0]='0';
000324   cf51     movff	0xf51, 0           	MOVFF	_currentTime, r0x00
000326   f000
000328   cf52     movff	0xf52, 0x1         	MOVFF	(_currentTime + 1), r0x01
00032a   f001
00032c   cf53     movff	0xf53, 0x2         	MOVFF	(_currentTime + 2), r0x02
00032e   f002
000330   0e30     movlw	0x30               	MOVLW	0x30
000332   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000334   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000336   ffe9
000338   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00033a   fff3
00033c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00033e   ec25     call	0x1a4a, 0           	CALL	__gptrput1
000340   f00d
                                           _00267_DS_:
000342   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000344   f006
000346   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000348   f005
00034a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00034c   f004
00034e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000350   f003
000352   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000354   f002
000356   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000358   f001
00035a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00035c   f000
00035e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000360   ffd9
000362   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__alarm	code
                                           _alarm:
                                           ;	.line	169; testint.c	void alarm(){
000e88   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000e8a   ffe5
000e8c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000e8e   ffd9
000e90   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000e92   ffe5
000e94   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000e96   ffe5
000e98   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000e9a   ffe5
000e9c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000e9e   ffe5
000ea0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000ea2   ffe5
000ea4   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000ea6   ffe5
000ea8   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000eaa   ffe5
                                           ;	.line	170; testint.c	int blink = 1;
000eac   0e01     movlw	0x1                	MOVLW	0x01
000eae   6e00     movwf	0, 0               	MOVWF	r0x00
000eb0   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	171; testint.c	int i = 0;
000eb2   6a02     clrf	0x2, 0              	CLRF	r0x02
000eb4   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00221_DS_:
                                           ;	.line	174; testint.c	for(i; i<5; i++){
000eb6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000eb8   0f80     addlw	0x80               	ADDLW	0x80
000eba   0f80     addlw	0x80               	ADDLW	0x80
000ebc   e102     bnz	0xec2                	BNZ	_00244_DS_
000ebe   0e05     movlw	0x5                	MOVLW	0x05
000ec0   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00244_DS_:
000ec2   e22e     bc	0xf20                 	BC	_00224_DS_
                                           ;	.line	175; testint.c	if(currentTime[i]!=time[i]){
000ec4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ec6   010f     movlb	0xf                	BANKSEL	_currentTime
000ec8   2551     addwf	0x51, 0, 0x1       	ADDWF	_currentTime, W, B
000eca   6e04     movwf	0x4, 0             	MOVWF	r0x04
000ecc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000ece   010f     movlb	0xf                	BANKSEL	(_currentTime + 1)
000ed0   2152     addwfc	0x52, 0, 0x1      	ADDWFC	(_currentTime + 1), W, B
000ed2   6e05     movwf	0x5, 0             	MOVWF	r0x05
000ed4   6ae8     clrf	0xe8, 0             	CLRF	WREG
000ed6   be03     btfsc	0x3, 0x7, 0        	BTFSC	r0x03, 7
000ed8   68e8     setf	0xe8, 0             	SETF	WREG
000eda   010f     movlb	0xf                	BANKSEL	(_currentTime + 2)
000edc   2153     addwfc	0x53, 0, 0x1      	ADDWFC	(_currentTime + 2), W, B
000ede   6e06     movwf	0x6, 0             	MOVWF	r0x06
000ee0   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
000ee2   ffe9
000ee4   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
000ee6   fff3
000ee8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000eea   ecf9     call	0x19f2, 0           	CALL	__gptrget1
000eec   f00c
000eee   6e04     movwf	0x4, 0             	MOVWF	r0x04
000ef0   0e41     movlw	0x41               	MOVLW	LOW(_time)
000ef2   2402     addwf	0x2, 0, 0          	ADDWF	r0x02, W
000ef4   6e05     movwf	0x5, 0             	MOVWF	r0x05
000ef6   0e0f     movlw	0xf                	MOVLW	HIGH(_time)
000ef8   2003     addwfc	0x3, 0, 0         	ADDWFC	r0x03, W
000efa   6e06     movwf	0x6, 0             	MOVWF	r0x06
000efc   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
000efe   ffe9
000f00   c006     movff	0x6, 0xfea         	MOVFF	r0x06, FSR0H
000f02   ffea
000f04   cfef     movff	0xfef, 0x5         	MOVFF	INDF0, r0x05
000f06   f005
000f08   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000f0a   1805     xorwf	0x5, 0, 0          	XORWF	r0x05, W
000f0c   e005     bz	0xf18                 	BZ	_00223_DS_
                                           ;	.line	176; testint.c	blink = 0;
000f0e   6a00     clrf	0, 0                	CLRF	r0x00
000f10   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	177; testint.c	i = 5;
000f12   0e05     movlw	0x5                	MOVLW	0x05
000f14   6e02     movwf	0x2, 0             	MOVWF	r0x02
000f16   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00223_DS_:
                                           ;	.line	174; testint.c	for(i; i<5; i++){
000f18   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000f1a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000f1c   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000f1e   d7cb     bra	0xeb6                	BRA	_00221_DS_
                                           _00224_DS_:
                                           ;	.line	180; testint.c	if(blink){
000f20   5000     movf	0, 0, 0             	MOVF	r0x00, W
000f22   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
000f24   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000f26   d04b     bra	0xfbe                	BRA	_00220_DS_
                                           ;	.line	181; testint.c	display_string(0,"    Wake up!    ");
000f28   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
000f2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f2c   0e05     movlw	0x5                	MOVLW	HIGH(__str_0)
000f2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f30   0ee2     movlw	0xe2               	MOVLW	LOW(__str_0)
000f32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f34   0e00     movlw	0                  	MOVLW	0x00
000f36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f38   eca2     call	0x1344, 0           	CALL	_display_string
000f3a   f009
000f3c   0e04     movlw	0x4                	MOVLW	0x04
000f3e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	182; testint.c	display_string(16, "                ");
000f40   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
000f42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f44   0e05     movlw	0x5                	MOVLW	HIGH(__str_1)
000f46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f48   0ef4     movlw	0xf4               	MOVLW	LOW(__str_1)
000f4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f4c   0e10     movlw	0x10               	MOVLW	0x10
000f4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f50   eca2     call	0x1344, 0           	CALL	_display_string
000f52   f009
000f54   0e04     movlw	0x4                	MOVLW	0x04
000f56   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	183; testint.c	for(j; j<30; j++){
000f58   6a00     clrf	0, 0                	CLRF	r0x00
000f5a   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00228_DS_:
000f5c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000f5e   0f80     addlw	0x80               	ADDLW	0x80
000f60   0f80     addlw	0x80               	ADDLW	0x80
000f62   e102     bnz	0xf68                	BNZ	_00247_DS_
000f64   0e1e     movlw	0x1e               	MOVLW	0x1e
000f66   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00247_DS_:
000f68   e21d     bc	0xfa4                 	BC	_00231_DS_
                                           ;	.line	184; testint.c	LED1_IO ^=1;
000f6a   6a02     clrf	0x2, 0              	CLRF	r0x02
000f6c   b291     btfsc	0x91, 0x1, 0       	BTFSC	_LATJbits, 1
000f6e   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000f70   0e01     movlw	0x1                	MOVLW	0x01
000f72   1a02     xorwf	0x2, 0x1, 0        	XORWF	r0x02, F
000f74   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000f76   0b01     andlw	0x1                	ANDLW	0x01
000f78   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
000f7a   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000f7c   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
000f7e   0bfd     andlw	0xfd               	ANDLW	0xfd
000f80   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
000f82   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
                                           ;	.line	185; testint.c	for(k=0; k<40;++k) 
000f84   0e28     movlw	0x28               	MOVLW	0x28
000f86   6e02     movwf	0x2, 0             	MOVWF	r0x02
000f88   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00227_DS_:
                                           ;	.line	186; testint.c	dumb_delay1ms();
000f8a   ece5     call	0x19ca, 0           	CALL	_dumb_delay1ms
000f8c   f00c
000f8e   0eff     movlw	0xff               	MOVLW	0xff
000f90   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
000f92   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000f94   0603     decf	0x3, 0x1, 0         	DECF	r0x03, F
                                           ;	.line	185; testint.c	for(k=0; k<40;++k) 
000f96   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000f98   1003     iorwf	0x3, 0, 0          	IORWF	r0x03, W
000f9a   e1f7     bnz	0xf8a                	BNZ	_00227_DS_
                                           ;	.line	183; testint.c	for(j; j<30; j++){
000f9c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000f9e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000fa0   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000fa2   d7dc     bra	0xf5c                	BRA	_00228_DS_
                                           _00231_DS_:
                                           ;	.line	188; testint.c	LED1_IO ^=1;
000fa4   6a00     clrf	0, 0                	CLRF	r0x00
000fa6   b291     btfsc	0x91, 0x1, 0       	BTFSC	_LATJbits, 1
000fa8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000faa   0e01     movlw	0x1                	MOVLW	0x01
000fac   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
000fae   5000     movf	0, 0, 0             	MOVF	r0x00, W
000fb0   0b01     andlw	0x1                	ANDLW	0x01
000fb2   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
000fb4   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000fb6   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
000fb8   0bfd     andlw	0xfd               	ANDLW	0xfd
000fba   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
000fbc   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
                                           _00220_DS_:
000fbe   010f     movlb	0xf                	BANKSEL	_alarmflag
                                           ;	.line	190; testint.c	alarmflag = 0;
000fc0   6b56     clrf	0x56, 0x1           	CLRF	_alarmflag, B
000fc2   010f     movlb	0xf                	BANKSEL	(_alarmflag + 1)
000fc4   6b57     clrf	0x57, 0x1           	CLRF	(_alarmflag + 1), B
000fc6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000fc8   f006
000fca   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000fcc   f005
000fce   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000fd0   f004
000fd2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000fd4   f003
000fd6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000fd8   f002
000fda   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000fdc   f001
000fde   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000fe0   f000
000fe2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000fe4   ffd9
000fe6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__increment_time	code
                                           _increment_time:
                                           ;	.line	145; testint.c	void increment_time(){
00141a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00141c   ffe5
00141e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001420   ffd9
001422   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001424   ffe5
001426   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001428   ffe5
00142a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00142c   ffe5
                                           ;	.line	146; testint.c	time[position]++;
00142e   0e41     movlw	0x41               	MOVLW	LOW(_time)
001430   010f     movlb	0xf                	BANKSEL	_position
001432   2554     addwf	0x54, 0, 0x1       	ADDWF	_position, W, B
001434   6e00     movwf	0, 0               	MOVWF	r0x00
001436   0e0f     movlw	0xf                	MOVLW	HIGH(_time)
001438   010f     movlb	0xf                	BANKSEL	(_position + 1)
00143a   2155     addwfc	0x55, 0, 0x1      	ADDWFC	(_position + 1), W, B
00143c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00143e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001440   ffe9
001442   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
001444   ffea
001446   cfef     movff	0xfef, 0x2         	MOVFF	INDF0, r0x02
001448   f002
00144a   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
00144c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00144e   ffe9
001450   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
001452   ffea
001454   c002     movff	0x2, 0xfef         	MOVFF	r0x02, INDF0
001456   ffef
001458   010f     movlb	0xf                	BANKSEL	(_time + 4)
                                           ;	.line	147; testint.c	if(time[4] == ':'){
00145a   5145     movf	0x45, 0, 0x1        	MOVF	(_time + 4), W, B
00145c   0a3a     xorlw	0x3a               	XORLW	0x3a
00145e   e109     bnz	0x1472               	BNZ	_00182_DS_
                                           ;	.line	148; testint.c	time[4] = '0';
001460   0e30     movlw	0x30               	MOVLW	0x30
001462   010f     movlb	0xf                	BANKSEL	(_time + 4)
001464   6f45     movwf	0x45, 0x1          	MOVWF	(_time + 4), B
001466   010f     movlb	0xf                	BANKSEL	(_time + 3)
                                           ;	.line	149; testint.c	++time[3];
001468   2944     incf	0x44, 0, 0x1        	INCF	(_time + 3), W, B
00146a   6e00     movwf	0, 0               	MOVWF	r0x00
00146c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00146e   010f     movlb	0xf                	BANKSEL	(_time + 3)
001470   6f44     movwf	0x44, 0x1          	MOVWF	(_time + 3), B
                                           _00182_DS_:
001472   010f     movlb	0xf                	BANKSEL	(_time + 3)
                                           ;	.line	151; testint.c	if(time[3]=='6'){
001474   5144     movf	0x44, 0, 0x1        	MOVF	(_time + 3), W, B
001476   0a36     xorlw	0x36               	XORLW	0x36
001478   e109     bnz	0x148c               	BNZ	_00184_DS_
                                           ;	.line	152; testint.c	time[3]='0';
00147a   0e30     movlw	0x30               	MOVLW	0x30
00147c   010f     movlb	0xf                	BANKSEL	(_time + 3)
00147e   6f44     movwf	0x44, 0x1          	MOVWF	(_time + 3), B
                                           ;	.line	153; testint.c	time[1]++;
001480   cf42     movff	0xf42, 0           	MOVFF	(_time + 1), r0x00
001482   f000
001484   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001486   5000     movf	0, 0, 0             	MOVF	r0x00, W
001488   010f     movlb	0xf                	BANKSEL	(_time + 1)
00148a   6f42     movwf	0x42, 0x1          	MOVWF	(_time + 1), B
                                           _00184_DS_:
                                           ;	.line	155; testint.c	if(time[1] == ':'){
00148c   cf42     movff	0xf42, 0           	MOVFF	(_time + 1), r0x00
00148e   f000
001490   5000     movf	0, 0, 0             	MOVF	r0x00, W
001492   0a3a     xorlw	0x3a               	XORLW	0x3a
001494   e10a     bnz	0x14aa               	BNZ	_00192_DS_
                                           ;	.line	156; testint.c	time[1] = '0';
001496   0e30     movlw	0x30               	MOVLW	0x30
001498   010f     movlb	0xf                	BANKSEL	(_time + 1)
00149a   6f42     movwf	0x42, 0x1          	MOVWF	(_time + 1), B
00149c   010f     movlb	0xf                	BANKSEL	_time
                                           ;	.line	157; testint.c	++time[0];
00149e   2941     incf	0x41, 0, 0x1        	INCF	_time, W, B
0014a0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0014a2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0014a4   010f     movlb	0xf                	BANKSEL	_time
0014a6   6f41     movwf	0x41, 0x1          	MOVWF	_time, B
0014a8   d016     bra	0x14d6               	BRA	_00194_DS_
                                           _00192_DS_:
                                           ;	.line	159; testint.c	else if(time[0]=='2' && time[1]>='4'){
0014aa   cf41     movff	0xf41, 0x1         	MOVFF	_time, r0x01
0014ac   f001
0014ae   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0014b0   0a32     xorlw	0x32               	XORLW	0x32
0014b2   e10b     bnz	0x14ca               	BNZ	_00188_DS_
0014b4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0014b6   0f80     addlw	0x80               	ADDLW	0x80
0014b8   0f4c     addlw	0x4c               	ADDLW	0x4c
0014ba   e307     bnc	0x14ca               	BNC	_00188_DS_
                                           ;	.line	160; testint.c	time[0]='0';
0014bc   0e30     movlw	0x30               	MOVLW	0x30
0014be   010f     movlb	0xf                	BANKSEL	_time
0014c0   6f41     movwf	0x41, 0x1          	MOVWF	_time, B
                                           ;	.line	161; testint.c	time[1]='0';
0014c2   0e30     movlw	0x30               	MOVLW	0x30
0014c4   010f     movlb	0xf                	BANKSEL	(_time + 1)
0014c6   6f42     movwf	0x42, 0x1          	MOVWF	(_time + 1), B
0014c8   d006     bra	0x14d6               	BRA	_00194_DS_
                                           _00188_DS_:
                                           ;	.line	163; testint.c	else if(time[0]=='3'){
0014ca   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0014cc   0a33     xorlw	0x33               	XORLW	0x33
0014ce   e103     bnz	0x14d6               	BNZ	_00194_DS_
                                           ;	.line	164; testint.c	time[0]='0';
0014d0   0e30     movlw	0x30               	MOVLW	0x30
0014d2   010f     movlb	0xf                	BANKSEL	_time
0014d4   6f41     movwf	0x41, 0x1          	MOVWF	_time, B
                                           _00194_DS_:
0014d6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0014d8   f002
0014da   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0014dc   f001
0014de   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0014e0   f000
0014e2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0014e4   ffd9
0014e6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__high_isr	code
                                           _high_isr:
                                           ;	.line	38; testint.c	void high_isr (void) __interrupt 1
000364   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
000366   ffe5
000368   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
00036a   ffe5
00036c   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
00036e   ffe5
000370   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
000372   ffe5
000374   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
000376   ffe5
000378   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
00037a   ffe5
00037c   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
00037e   ffe5
000380   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
000382   ffe5
000384   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
000386   ffe5
000388   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00038a   ffe5
00038c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00038e   ffd9
000390   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000392   ffe5
000394   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000396   ffe5
000398   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00039a   ffe5
00039c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00039e   ffe5
                                           ;	.line	41; testint.c	if (INT3F)
0003a0   a4f0     btfss	0xf0, 0x2, 0       	BTFSS	_INTCON3bits, 2
0003a2   d081     bra	0x4a6                	BRA	_00117_DS_
0003a4   010f     movlb	0xf                	BANKSEL	(_position + 1)
                                           ;	.line	43; testint.c	if(position<2 || (position>2 && position<5))
0003a6   5155     movf	0x55, 0, 0x1        	MOVF	(_position + 1), W, B
0003a8   0f80     addlw	0x80               	ADDLW	0x80
0003aa   0f80     addlw	0x80               	ADDLW	0x80
0003ac   e103     bnz	0x3b4                	BNZ	_00138_DS_
0003ae   0e02     movlw	0x2                	MOVLW	0x02
0003b0   010f     movlb	0xf                	BANKSEL	_position
0003b2   5d54     subwf	0x54, 0, 0x1       	SUBWF	_position, W, B
                                           _00138_DS_:
0003b4   e312     bnc	0x3da                	BNC	_00105_DS_
0003b6   010f     movlb	0xf                	BANKSEL	(_position + 1)
0003b8   5155     movf	0x55, 0, 0x1        	MOVF	(_position + 1), W, B
0003ba   0f80     addlw	0x80               	ADDLW	0x80
0003bc   0f80     addlw	0x80               	ADDLW	0x80
0003be   e103     bnz	0x3c6                	BNZ	_00139_DS_
0003c0   0e03     movlw	0x3                	MOVLW	0x03
0003c2   010f     movlb	0xf                	BANKSEL	_position
0003c4   5d54     subwf	0x54, 0, 0x1       	SUBWF	_position, W, B
                                           _00139_DS_:
0003c6   e30b     bnc	0x3de                	BNC	_00106_DS_
0003c8   010f     movlb	0xf                	BANKSEL	(_position + 1)
0003ca   5155     movf	0x55, 0, 0x1        	MOVF	(_position + 1), W, B
0003cc   0f80     addlw	0x80               	ADDLW	0x80
0003ce   0f80     addlw	0x80               	ADDLW	0x80
0003d0   e103     bnz	0x3d8                	BNZ	_00140_DS_
0003d2   0e05     movlw	0x5                	MOVLW	0x05
0003d4   010f     movlb	0xf                	BANKSEL	_position
0003d6   5d54     subwf	0x54, 0, 0x1       	SUBWF	_position, W, B
                                           _00140_DS_:
0003d8   e202     bc	0x3de                 	BC	_00106_DS_
                                           _00105_DS_:
                                           ;	.line	44; testint.c	increment_time();
0003da   ec0d     call	0x141a, 0           	CALL	_increment_time
0003dc   f00a
                                           _00106_DS_:
0003de   010f     movlb	0xf                	BANKSEL	(_position + 1)
                                           ;	.line	46; testint.c	if((position>6 && position<9) || (position>9 && position<12) || (position>12 && position<15)){
0003e0   5155     movf	0x55, 0, 0x1        	MOVF	(_position + 1), W, B
0003e2   0f80     addlw	0x80               	ADDLW	0x80
0003e4   0f80     addlw	0x80               	ADDLW	0x80
0003e6   e103     bnz	0x3ee                	BNZ	_00141_DS_
0003e8   0e07     movlw	0x7                	MOVLW	0x07
0003ea   010f     movlb	0xf                	BANKSEL	_position
0003ec   5d54     subwf	0x54, 0, 0x1       	SUBWF	_position, W, B
                                           _00141_DS_:
0003ee   e309     bnc	0x402                	BNC	_00113_DS_
0003f0   010f     movlb	0xf                	BANKSEL	(_position + 1)
0003f2   5155     movf	0x55, 0, 0x1        	MOVF	(_position + 1), W, B
0003f4   0f80     addlw	0x80               	ADDLW	0x80
0003f6   0f80     addlw	0x80               	ADDLW	0x80
0003f8   e103     bnz	0x400                	BNZ	_00142_DS_
0003fa   0e09     movlw	0x9                	MOVLW	0x09
0003fc   010f     movlb	0xf                	BANKSEL	_position
0003fe   5d54     subwf	0x54, 0, 0x1       	SUBWF	_position, W, B
                                           _00142_DS_:
000400   e324     bnc	0x44a                	BNC	_00109_DS_
                                           _00113_DS_:
000402   010f     movlb	0xf                	BANKSEL	(_position + 1)
000404   5155     movf	0x55, 0, 0x1        	MOVF	(_position + 1), W, B
000406   0f80     addlw	0x80               	ADDLW	0x80
000408   0f80     addlw	0x80               	ADDLW	0x80
00040a   e103     bnz	0x412                	BNZ	_00143_DS_
00040c   0e0a     movlw	0xa                	MOVLW	0x0a
00040e   010f     movlb	0xf                	BANKSEL	_position
000410   5d54     subwf	0x54, 0, 0x1       	SUBWF	_position, W, B
                                           _00143_DS_:
000412   e309     bnc	0x426                	BNC	_00115_DS_
000414   010f     movlb	0xf                	BANKSEL	(_position + 1)
000416   5155     movf	0x55, 0, 0x1        	MOVF	(_position + 1), W, B
000418   0f80     addlw	0x80               	ADDLW	0x80
00041a   0f80     addlw	0x80               	ADDLW	0x80
00041c   e103     bnz	0x424                	BNZ	_00144_DS_
00041e   0e0c     movlw	0xc                	MOVLW	0x0c
000420   010f     movlb	0xf                	BANKSEL	_position
000422   5d54     subwf	0x54, 0, 0x1       	SUBWF	_position, W, B
                                           _00144_DS_:
000424   e312     bnc	0x44a                	BNC	_00109_DS_
                                           _00115_DS_:
000426   010f     movlb	0xf                	BANKSEL	(_position + 1)
000428   5155     movf	0x55, 0, 0x1        	MOVF	(_position + 1), W, B
00042a   0f80     addlw	0x80               	ADDLW	0x80
00042c   0f80     addlw	0x80               	ADDLW	0x80
00042e   e103     bnz	0x436                	BNZ	_00145_DS_
000430   0e0d     movlw	0xd                	MOVLW	0x0d
000432   010f     movlb	0xf                	BANKSEL	_position
000434   5d54     subwf	0x54, 0, 0x1       	SUBWF	_position, W, B
                                           _00145_DS_:
000436   e331     bnc	0x49a                	BNC	_00110_DS_
000438   010f     movlb	0xf                	BANKSEL	(_position + 1)
00043a   5155     movf	0x55, 0, 0x1        	MOVF	(_position + 1), W, B
00043c   0f80     addlw	0x80               	ADDLW	0x80
00043e   0f80     addlw	0x80               	ADDLW	0x80
000440   e103     bnz	0x448                	BNZ	_00146_DS_
000442   0e0f     movlw	0xf                	MOVLW	0x0f
000444   010f     movlb	0xf                	BANKSEL	_position
000446   5d54     subwf	0x54, 0, 0x1       	SUBWF	_position, W, B
                                           _00146_DS_:
000448   e228     bc	0x49a                 	BC	_00110_DS_
                                           _00109_DS_:
00044a   010f     movlb	0xf                	BANKSEL	_position
                                           ;	.line	47; testint.c	currentTime[position-7]++;
00044c   5154     movf	0x54, 0, 0x1        	MOVF	_position, W, B
00044e   0ff9     addlw	0xf9               	ADDLW	0xf9
000450   6e00     movwf	0, 0               	MOVWF	r0x00
000452   0eff     movlw	0xff               	MOVLW	0xff
000454   010f     movlb	0xf                	BANKSEL	(_position + 1)
000456   2155     addwfc	0x55, 0, 0x1      	ADDWFC	(_position + 1), W, B
000458   6e01     movwf	0x1, 0             	MOVWF	r0x01
00045a   6a02     clrf	0x2, 0              	CLRF	r0x02
00045c   be01     btfsc	0x1, 0x7, 0        	BTFSC	r0x01, 7
00045e   6802     setf	0x2, 0              	SETF	r0x02
000460   010f     movlb	0xf                	BANKSEL	_currentTime
000462   5151     movf	0x51, 0, 0x1        	MOVF	_currentTime, W, B
000464   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000466   010f     movlb	0xf                	BANKSEL	(_currentTime + 1)
000468   5152     movf	0x52, 0, 0x1        	MOVF	(_currentTime + 1), W, B
00046a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00046c   010f     movlb	0xf                	BANKSEL	(_currentTime + 2)
00046e   5153     movf	0x53, 0, 0x1        	MOVF	(_currentTime + 2), W, B
000470   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000472   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000474   ffe9
000476   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000478   fff3
00047a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00047c   ecf9     call	0x19f2, 0           	CALL	__gptrget1
00047e   f00c
000480   6e03     movwf	0x3, 0             	MOVWF	r0x03
000482   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000484   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000486   ffe5
000488   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00048a   ffe9
00048c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00048e   fff3
000490   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000492   ec25     call	0x1a4a, 0           	CALL	__gptrput1
000494   f00d
                                           ;	.line	48; testint.c	test_inc_current_time();
000496   ec06     call	0xc, 0              	CALL	_test_inc_current_time
000498   f000
                                           _00110_DS_:
                                           ;	.line	51; testint.c	INT3F = 0;
00049a   94f0     bcf	0xf0, 0x2, 0         	BCF	_INTCON3bits, 2
                                           ;	.line	52; testint.c	refresh = 1;
00049c   0e01     movlw	0x1                	MOVLW	0x01
00049e   010f     movlb	0xf                	BANKSEL	_refresh
0004a0   6f58     movwf	0x58, 0x1          	MOVWF	_refresh, B
0004a2   010f     movlb	0xf                	BANKSEL	(_refresh + 1)
0004a4   6b59     clrf	0x59, 0x1           	CLRF	(_refresh + 1), B
                                           _00117_DS_:
                                           ;	.line	55; testint.c	if ( INT1F ) {
0004a6   a0f0     btfss	0xf0, 0, 0         	BTFSS	_INTCON3bits, 0
0004a8   d025     bra	0x4f4                	BRA	_00121_DS_
                                           ;	.line	56; testint.c	LED2_IO ^= 1; 
0004aa   6a00     clrf	0, 0                	CLRF	r0x00
0004ac   b491     btfsc	0x91, 0x2, 0       	BTFSC	_LATJbits, 2
0004ae   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0004b0   0e01     movlw	0x1                	MOVLW	0x01
0004b2   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
0004b4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004b6   0b01     andlw	0x1                	ANDLW	0x01
0004b8   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0004ba   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0004bc   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0004be   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
0004c0   0bfb     andlw	0xfb               	ANDLW	0xfb
0004c2   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0004c4   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
0004c6   010f     movlb	0xf                	BANKSEL	_position
                                           ;	.line	57; testint.c	position++;
0004c8   2b54     incf	0x54, 0x1, 0x1      	INCF	_position, F, B
0004ca   e302     bnc	0x4d0                	BNC	_10356_DS_
0004cc   010f     movlb	0xf                	BANKSEL	(_position + 1)
0004ce   2b55     incf	0x55, 0x1, 0x1      	INCF	(_position + 1), F, B
                                           _10356_DS_:
0004d0   010f     movlb	0xf                	BANKSEL	_position
                                           ;	.line	58; testint.c	if(position == 15){
0004d2   5154     movf	0x54, 0, 0x1        	MOVF	_position, W, B
0004d4   0a0f     xorlw	0xf                	XORLW	0x0f
0004d6   e103     bnz	0x4de                	BNZ	_00148_DS_
0004d8   010f     movlb	0xf                	BANKSEL	(_position + 1)
0004da   5155     movf	0x55, 0, 0x1        	MOVF	(_position + 1), W, B
0004dc   e001     bz	0x4e0                 	BZ	_00149_DS_
                                           _00148_DS_:
0004de   d004     bra	0x4e8                	BRA	_00119_DS_
                                           _00149_DS_:
0004e0   010f     movlb	0xf                	BANKSEL	_position
                                           ;	.line	59; testint.c	position = 0;
0004e2   6b54     clrf	0x54, 0x1           	CLRF	_position, B
0004e4   010f     movlb	0xf                	BANKSEL	(_position + 1)
0004e6   6b55     clrf	0x55, 0x1           	CLRF	(_position + 1), B
                                           _00119_DS_:
                                           ;	.line	61; testint.c	refresh = 1;
0004e8   0e01     movlw	0x1                	MOVLW	0x01
0004ea   010f     movlb	0xf                	BANKSEL	_refresh
0004ec   6f58     movwf	0x58, 0x1          	MOVWF	_refresh, B
0004ee   010f     movlb	0xf                	BANKSEL	(_refresh + 1)
0004f0   6b59     clrf	0x59, 0x1           	CLRF	(_refresh + 1), B
                                           ;	.line	63; testint.c	INT1F  = 0;	
0004f2   90f0     bcf	0xf0, 0, 0           	BCF	_INTCON3bits, 0
                                           _00121_DS_:
                                           ;	.line	67; testint.c	if ( TMR0F ){        
0004f4   a4f2     btfss	0xf2, 0x2, 0       	BTFSS	_INTCONbits, 2
0004f6   d058     bra	0x5a8                	BRA	_00126_DS_
                                           ;	.line	68; testint.c	bres += 4096;  
0004f8   0e10     movlw	0x10               	MOVLW	0x10
0004fa   010f     movlb	0xf                	BANKSEL	(_bres + 1)
0004fc   275b     addwf	0x5b, 0x1, 0x1     	ADDWF	(_bres + 1), F, B
0004fe   0e00     movlw	0                  	MOVLW	0x00
000500   010f     movlb	0xf                	BANKSEL	(_bres + 2)
000502   235c     addwfc	0x5c, 0x1, 0x1    	ADDWFC	(_bres + 2), F, B
000504   0e00     movlw	0                  	MOVLW	0x00
000506   010f     movlb	0xf                	BANKSEL	(_bres + 3)
000508   235d     addwfc	0x5d, 0x1, 0x1    	ADDWFC	(_bres + 3), F, B
                                           ;	.line	69; testint.c	if(bres >= 390625)
00050a   0e00     movlw	0                  	MOVLW	0x00
00050c   010f     movlb	0xf                	BANKSEL	(_bres + 3)
00050e   5d5d     subwf	0x5d, 0, 0x1       	SUBWF	(_bres + 3), W, B
000510   e10b     bnz	0x528                	BNZ	_00150_DS_
000512   0e05     movlw	0x5                	MOVLW	0x05
000514   010f     movlb	0xf                	BANKSEL	(_bres + 2)
000516   5d5c     subwf	0x5c, 0, 0x1       	SUBWF	(_bres + 2), W, B
000518   e107     bnz	0x528                	BNZ	_00150_DS_
00051a   0ef5     movlw	0xf5               	MOVLW	0xf5
00051c   010f     movlb	0xf                	BANKSEL	(_bres + 1)
00051e   5d5b     subwf	0x5b, 0, 0x1       	SUBWF	(_bres + 1), W, B
000520   e103     bnz	0x528                	BNZ	_00150_DS_
000522   0ee1     movlw	0xe1               	MOVLW	0xe1
000524   010f     movlb	0xf                	BANKSEL	_bres
000526   5d5a     subwf	0x5a, 0, 0x1       	SUBWF	_bres, W, B
                                           _00150_DS_:
000528   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00052a   d038     bra	0x59c                	BRA	_00123_DS_
                                           ;	.line	71; testint.c	bres -= 390625;	
00052c   0e1f     movlw	0x1f               	MOVLW	0x1f
00052e   010f     movlb	0xf                	BANKSEL	_bres
000530   275a     addwf	0x5a, 0x1, 0x1     	ADDWF	_bres, F, B
000532   0e0a     movlw	0xa                	MOVLW	0x0a
000534   010f     movlb	0xf                	BANKSEL	(_bres + 1)
000536   235b     addwfc	0x5b, 0x1, 0x1    	ADDWFC	(_bres + 1), F, B
000538   0efa     movlw	0xfa               	MOVLW	0xfa
00053a   010f     movlb	0xf                	BANKSEL	(_bres + 2)
00053c   235c     addwfc	0x5c, 0x1, 0x1    	ADDWFC	(_bres + 2), F, B
00053e   0eff     movlw	0xff               	MOVLW	0xff
000540   010f     movlb	0xf                	BANKSEL	(_bres + 3)
000542   235d     addwfc	0x5d, 0x1, 0x1    	ADDWFC	(_bres + 3), F, B
                                           ;	.line	72; testint.c	LED0_IO ^= 1;
000544   6a00     clrf	0, 0                	CLRF	r0x00
000546   b091     btfsc	0x91, 0, 0         	BTFSC	_LATJbits, 0
000548   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00054a   0e01     movlw	0x1                	MOVLW	0x01
00054c   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
00054e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000550   0b01     andlw	0x1                	ANDLW	0x01
000552   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000554   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
000556   0bfe     andlw	0xfe               	ANDLW	0xfe
000558   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00055a   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
00055c   010f     movlb	0xf                	BANKSEL	_currentTime
                                           ;	.line	73; testint.c	currentTime[7]++;
00055e   5151     movf	0x51, 0, 0x1        	MOVF	_currentTime, W, B
000560   0f07     addlw	0x7                	ADDLW	0x07
000562   6e00     movwf	0, 0               	MOVWF	r0x00
000564   0e00     movlw	0                  	MOVLW	0x00
000566   010f     movlb	0xf                	BANKSEL	(_currentTime + 1)
000568   2152     addwfc	0x52, 0, 0x1      	ADDWFC	(_currentTime + 1), W, B
00056a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00056c   0e00     movlw	0                  	MOVLW	0x00
00056e   010f     movlb	0xf                	BANKSEL	(_currentTime + 2)
000570   2153     addwfc	0x53, 0, 0x1      	ADDWFC	(_currentTime + 2), W, B
000572   6e02     movwf	0x2, 0             	MOVWF	r0x02
000574   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000576   ffe9
000578   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00057a   fff3
00057c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00057e   ecf9     call	0x19f2, 0           	CALL	__gptrget1
000580   f00c
000582   6e03     movwf	0x3, 0             	MOVWF	r0x03
000584   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000586   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000588   ffe5
00058a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00058c   ffe9
00058e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000590   fff3
000592   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000594   ec25     call	0x1a4a, 0           	CALL	__gptrput1
000596   f00d
                                           ;	.line	74; testint.c	test_inc_current_time();
000598   ec06     call	0xc, 0              	CALL	_test_inc_current_time
00059a   f000
                                           _00123_DS_:
                                           ;	.line	76; testint.c	refresh = 1;
00059c   0e01     movlw	0x1                	MOVLW	0x01
00059e   010f     movlb	0xf                	BANKSEL	_refresh
0005a0   6f58     movwf	0x58, 0x1          	MOVWF	_refresh, B
0005a2   010f     movlb	0xf                	BANKSEL	(_refresh + 1)
0005a4   6b59     clrf	0x59, 0x1           	CLRF	(_refresh + 1), B
                                           ;	.line	77; testint.c	TMR0F = 0; 
0005a6   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           _00126_DS_:
0005a8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0005aa   f003
0005ac   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0005ae   f002
0005b0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0005b2   f001
0005b4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0005b6   f000
0005b8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0005ba   ffd9
0005bc   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
0005be   fffb
0005c0   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
0005c2   fffa
0005c4   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
0005c6   ffea
0005c8   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
0005ca   ffe9
0005cc   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
0005ce   fff4
0005d0   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
0005d2   fff3
0005d4   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
0005d6   ffe0
0005d8   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
0005da   ffd8
0005dc   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
0005de   ffe8
0005e0   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
0005e2   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x57, 0x61, 0x6b, 0x65, 0x20, 0x75, 0x70, 0x21
0005e4   2020     addwfc	0x20, 0, 0        
0005e6   6157     cpfslt	0x57, 0x1         
0005e8   656b     cpfsgt	0x6b, 0x1         
0005ea   7520     btg	0x20, 0x2, 0x1       
0005ec   2170     addwfc	0x70, 0, 0x1      
0005ee   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x00
0005f0   2020     addwfc	0x20, 0, 0        
0005f2   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
0005f4   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
0005f6   2020     addwfc	0x20, 0, 0        
0005f8   2020     addwfc	0x20, 0, 0        
0005fa   2020     addwfc	0x20, 0, 0        
0005fc   2020     addwfc	0x20, 0, 0        
0005fe   2020     addwfc	0x20, 0, 0        
000600   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x00
000602   2020     addwfc	0x20, 0, 0        
000604   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
000606   5e20     subwf	0x20, 0x1, 0       	DB	0x20, 0x5e, 0x00
000608   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 3410 (0x0d52) bytes ( 2.60%)
                                           ;           	 1705 (0x06a9) words
                                           ; udata size:	   22 (0x0016) bytes ( 0.57%)
                                           ; access size:	   22 (0x0016) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Mar 13 2012) (UNIX)
                                           ; This file was generated Tue Mar 27 13:13:30 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; TCPIP_Stack/LCDBlocking.c	void LCDErase(void)
001734   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001736   ffe5
001738   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00173a   ffd9
00173c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00173e   ffe5
001740   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001742   ffe5
001744   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001746   ffe5
001748   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00174a   ffe5
00174c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00174e   ffe5
001750   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001752   ffe5
001754   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001756   ffe5
001758   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00175a   ffe5
                                           ;	.line	395; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);
00175c   0e01     movlw	0x1                	MOVLW	0x01
00175e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001760   0e00     movlw	0                  	MOVLW	0x00
001762   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001764   ecb4     call	0x1968, 0           	CALL	_LCDWrite
001766   f00c
001768   0e02     movlw	0x2                	MOVLW	0x02
00176a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
00176c   0e48     movlw	0x48               	MOVLW	0x48
00176e   6e00     movwf	0, 0               	MOVWF	r0x00
001770   0e0d     movlw	0xd                	MOVLW	0x0d
001772   6e01     movwf	0x1, 0             	MOVWF	r0x01
001774   6a02     clrf	0x2, 0              	CLRF	r0x02
001776   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
001778   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00177a   f004
00177c   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00177e   f005
001780   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001782   f006
001784   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001786   f007
001788   0eff     movlw	0xff               	MOVLW	0xff
00178a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00178c   0eff     movlw	0xff               	MOVLW	0xff
00178e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001790   0eff     movlw	0xff               	MOVLW	0xff
001792   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001794   0eff     movlw	0xff               	MOVLW	0xff
001796   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001798   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00179a   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00179c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00179e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0017a0   e1eb     bnz	0x1778               	BNZ	_00305_DS_
                                           ;	.line	399; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', 32);
0017a2   0e00     movlw	0                  	MOVLW	0x00
0017a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017a6   0e20     movlw	0x20               	MOVLW	0x20
0017a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017aa   0e20     movlw	0x20               	MOVLW	0x20
0017ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017ae   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0017b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017b2   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0017b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017b6   ec74     call	0x14e8, 0           	CALL	_memset
0017b8   f00a
0017ba   0e05     movlw	0x5                	MOVLW	0x05
0017bc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0017be   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0017c0   f007
0017c2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0017c4   f006
0017c6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0017c8   f005
0017ca   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0017cc   f004
0017ce   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0017d0   f003
0017d2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0017d4   f002
0017d6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0017d8   f001
0017da   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0017dc   f000
0017de   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0017e0   ffd9
0017e2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; TCPIP_Stack/LCDBlocking.c	void LCDUpdate(void)
00060a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00060c   ffe5
00060e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000610   ffd9
000612   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000614   ffe5
000616   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000618   ffe5
00061a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00061c   ffe5
00061e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000620   ffe5
000622   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000624   ffe5
000626   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000628   ffe5
00062a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00062c   ffe5
00062e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000630   ffe5
000632   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000634   ffe5
                                           ;	.line	337; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x02);
000636   0e02     movlw	0x2                	MOVLW	0x02
000638   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00063a   0e00     movlw	0                  	MOVLW	0x00
00063c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00063e   ecb4     call	0x1968, 0           	CALL	_LCDWrite
000640   f00c
000642   0e02     movlw	0x2                	MOVLW	0x02
000644   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
000646   0e48     movlw	0x48               	MOVLW	0x48
000648   6e00     movwf	0, 0               	MOVWF	r0x00
00064a   0e0d     movlw	0xd                	MOVLW	0x0d
00064c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00064e   6a02     clrf	0x2, 0              	CLRF	r0x02
000650   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
000652   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000654   f004
000656   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000658   f005
00065a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00065c   f006
00065e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000660   f007
000662   0eff     movlw	0xff               	MOVLW	0xff
000664   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000666   0eff     movlw	0xff               	MOVLW	0xff
000668   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00066a   0eff     movlw	0xff               	MOVLW	0xff
00066c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00066e   0eff     movlw	0xff               	MOVLW	0xff
000670   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000672   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000674   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000676   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000678   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00067a   e1eb     bnz	0x652                	BNZ	_00225_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
00067c   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
00067e   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000680   f001
000682   6a02     clrf	0x2, 0              	CLRF	r0x02
000684   0e00     movlw	0                  	MOVLW	0x00
000686   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000688   e102     bnz	0x68e                	BNZ	_00297_DS_
00068a   0e10     movlw	0x10               	MOVLW	0x10
00068c   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
00068e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000690   d057     bra	0x740                	BRA	_00260_DS_
                                           ;	.line	345; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
000692   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
000694   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000696   6e01     movwf	0x1, 0             	MOVWF	r0x01
000698   6a02     clrf	0x2, 0              	CLRF	r0x02
00069a   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00069c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00069e   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0006a0   ffe9
0006a2   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0006a4   ffea
0006a6   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0006a8   f001
0006aa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0006ac   e119     bnz	0x6e0                	BNZ	_00232_DS_
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
0006ae   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0006b0   f001
                                           _00253_DS_:
0006b2   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0006b4   f002
0006b6   6a03     clrf	0x3, 0              	CLRF	r0x03
0006b8   0e00     movlw	0                  	MOVLW	0x00
0006ba   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0006bc   e102     bnz	0x6c2                	BNZ	_00298_DS_
0006be   0e10     movlw	0x10               	MOVLW	0x10
0006c0   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
0006c2   e20e     bc	0x6e0                 	BC	_00232_DS_
                                           ;	.line	349; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
0006c4   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0006c6   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0006c8   6e02     movwf	0x2, 0             	MOVWF	r0x02
0006ca   6a03     clrf	0x3, 0              	CLRF	r0x03
0006cc   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0006ce   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0006d0   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
0006d2   ffe9
0006d4   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
0006d6   ffea
0006d8   0e20     movlw	0x20               	MOVLW	0x20
0006da   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
0006dc   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0006de   d7e9     bra	0x6b2                	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
0006e0   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0006e2   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0006e4   6e01     movwf	0x1, 0             	MOVWF	r0x01
0006e6   6a02     clrf	0x2, 0              	CLRF	r0x02
0006e8   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0006ea   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0006ec   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0006ee   ffe9
0006f0   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0006f2   ffea
0006f4   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0006f6   f001
0006f8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0006fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006fc   0e01     movlw	0x1                	MOVLW	0x01
0006fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000700   ecb4     call	0x1968, 0           	CALL	_LCDWrite
000702   f00c
000704   0e02     movlw	0x2                	MOVLW	0x02
000706   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
000708   0e55     movlw	0x55               	MOVLW	0x55
00070a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00070c   6a02     clrf	0x2, 0              	CLRF	r0x02
00070e   6a03     clrf	0x3, 0              	CLRF	r0x03
000710   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
000712   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000714   f005
000716   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000718   f006
00071a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00071c   f007
00071e   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000720   f008
000722   0eff     movlw	0xff               	MOVLW	0xff
000724   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000726   0eff     movlw	0xff               	MOVLW	0xff
000728   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00072a   0eff     movlw	0xff               	MOVLW	0xff
00072c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00072e   0eff     movlw	0xff               	MOVLW	0xff
000730   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000732   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000734   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000736   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000738   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
00073a   e1eb     bnz	0x712                	BNZ	_00233_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
00073c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00073e   d79f     bra	0x67e                	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0xC0);
000740   0ec0     movlw	0xc0               	MOVLW	0xc0
000742   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000744   0e00     movlw	0                  	MOVLW	0x00
000746   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000748   ecb4     call	0x1968, 0           	CALL	_LCDWrite
00074a   f00c
00074c   0e02     movlw	0x2                	MOVLW	0x02
00074e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
000750   0e55     movlw	0x55               	MOVLW	0x55
000752   6e00     movwf	0, 0               	MOVWF	r0x00
000754   6a01     clrf	0x1, 0              	CLRF	r0x01
000756   6a02     clrf	0x2, 0              	CLRF	r0x02
000758   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
00075a   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00075c   f004
00075e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000760   f005
000762   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000764   f006
000766   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000768   f007
00076a   0eff     movlw	0xff               	MOVLW	0xff
00076c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00076e   0eff     movlw	0xff               	MOVLW	0xff
000770   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000772   0eff     movlw	0xff               	MOVLW	0xff
000774   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000776   0eff     movlw	0xff               	MOVLW	0xff
000778   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00077a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00077c   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00077e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000780   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000782   e1eb     bnz	0x75a                	BNZ	_00239_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
000784   0e10     movlw	0x10               	MOVLW	0x10
000786   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
000788   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00078a   f001
00078c   6a02     clrf	0x2, 0              	CLRF	r0x02
00078e   0e00     movlw	0                  	MOVLW	0x00
000790   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000792   e102     bnz	0x798                	BNZ	_00299_DS_
000794   0e20     movlw	0x20               	MOVLW	0x20
000796   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
000798   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00079a   d057     bra	0x84a                	BRA	_00269_DS_
                                           ;	.line	365; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
00079c   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
00079e   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0007a0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0007a2   6a02     clrf	0x2, 0              	CLRF	r0x02
0007a4   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0007a6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0007a8   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0007aa   ffe9
0007ac   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0007ae   ffea
0007b0   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0007b2   f001
0007b4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0007b6   e119     bnz	0x7ea                	BNZ	_00246_DS_
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
0007b8   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0007ba   f001
                                           _00261_DS_:
0007bc   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0007be   f002
0007c0   6a03     clrf	0x3, 0              	CLRF	r0x03
0007c2   0e00     movlw	0                  	MOVLW	0x00
0007c4   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0007c6   e102     bnz	0x7cc                	BNZ	_00300_DS_
0007c8   0e20     movlw	0x20               	MOVLW	0x20
0007ca   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
0007cc   e20e     bc	0x7ea                 	BC	_00246_DS_
                                           ;	.line	369; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
0007ce   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0007d0   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0007d2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0007d4   6a03     clrf	0x3, 0              	CLRF	r0x03
0007d6   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0007d8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0007da   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
0007dc   ffe9
0007de   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
0007e0   ffea
0007e2   0e20     movlw	0x20               	MOVLW	0x20
0007e4   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
0007e6   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0007e8   d7e9     bra	0x7bc                	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
0007ea   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0007ec   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0007ee   6e01     movwf	0x1, 0             	MOVWF	r0x01
0007f0   6a02     clrf	0x2, 0              	CLRF	r0x02
0007f2   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0007f4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0007f6   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0007f8   ffe9
0007fa   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0007fc   ffea
0007fe   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000800   f001
000802   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000804   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000806   0e01     movlw	0x1                	MOVLW	0x01
000808   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00080a   ecb4     call	0x1968, 0           	CALL	_LCDWrite
00080c   f00c
00080e   0e02     movlw	0x2                	MOVLW	0x02
000810   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
000812   0e55     movlw	0x55               	MOVLW	0x55
000814   6e01     movwf	0x1, 0             	MOVWF	r0x01
000816   6a02     clrf	0x2, 0              	CLRF	r0x02
000818   6a03     clrf	0x3, 0              	CLRF	r0x03
00081a   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
00081c   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00081e   f005
000820   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000822   f006
000824   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000826   f007
000828   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
00082a   f008
00082c   0eff     movlw	0xff               	MOVLW	0xff
00082e   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000830   0eff     movlw	0xff               	MOVLW	0xff
000832   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000834   0eff     movlw	0xff               	MOVLW	0xff
000836   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000838   0eff     movlw	0xff               	MOVLW	0xff
00083a   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00083c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00083e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000840   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000842   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000844   e1eb     bnz	0x81c                	BNZ	_00247_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
000846   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000848   d79f     bra	0x788                	BRA	_00265_DS_
                                           _00269_DS_:
00084a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00084c   f008
00084e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000850   f007
000852   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000854   f006
000856   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000858   f005
00085a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00085c   f004
00085e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000860   f003
000862   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000864   f002
000866   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000868   f001
00086a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00086c   f000
00086e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000870   ffd9
000872   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; TCPIP_Stack/LCDBlocking.c	void LCDInit(void)
000874   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000876   ffe5
000878   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00087a   ffd9
00087c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00087e   ffe5
000880   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000882   ffe5
000884   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000886   ffe5
000888   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00088a   ffe5
00088c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00088e   ffe5
000890   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000892   ffe5
000894   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000896   ffe5
000898   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00089a   ffe5
00089c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00089e   ffe5
                                           ;	.line	211; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
0008a0   0e00     movlw	0                  	MOVLW	0x00
0008a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008a4   0e20     movlw	0x20               	MOVLW	0x20
0008a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008a8   0e20     movlw	0x20               	MOVLW	0x20
0008aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008ac   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0008ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008b0   0e00     movlw	0                  	MOVLW	LOW(_LCDText)
0008b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008b4   ec74     call	0x14e8, 0           	CALL	_memset
0008b6   f00a
0008b8   0e05     movlw	0x5                	MOVLW	0x05
0008ba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0008bc   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; TCPIP_Stack/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
0008be   6b20     clrf	0x20, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
0008c0   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
0008c2   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
0008c4   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
0008c6   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
0008c8   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; TCPIP_Stack/LCDBlocking.c	LCD_E_TRIS = 0;
0008ca   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; TCPIP_Stack/LCDBlocking.c	DelayMs(40);
0008cc   0ea0     movlw	0xa0               	MOVLW	0xa0
0008ce   6e00     movwf	0, 0               	MOVWF	r0x00
0008d0   0e09     movlw	0x9                	MOVLW	0x09
0008d2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0008d4   0e01     movlw	0x1                	MOVLW	0x01
0008d6   6e02     movwf	0x2, 0             	MOVWF	r0x02
0008d8   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
0008da   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0008dc   f004
0008de   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0008e0   f005
0008e2   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0008e4   f006
0008e6   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0008e8   f007
0008ea   0eff     movlw	0xff               	MOVLW	0xff
0008ec   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0008ee   0eff     movlw	0xff               	MOVLW	0xff
0008f0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0008f2   0eff     movlw	0xff               	MOVLW	0xff
0008f4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0008f6   0eff     movlw	0xff               	MOVLW	0xff
0008f8   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0008fa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0008fc   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0008fe   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000900   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000902   e1eb     bnz	0x8da                	BNZ	_00143_DS_
                                           ;	.line	247; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = 0;
000904   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = 0x03;
000906   0e03     movlw	0x3                	MOVLW	0x03
000908   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
00090a   0000     nop                      	nop 
00090c   0000     nop                      	nop 
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
00090e   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
000910   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000912   f001
000914   6a02     clrf	0x2, 0              	CLRF	r0x02
000916   0e00     movlw	0                  	MOVLW	0x00
000918   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00091a   e102     bnz	0x920                	BNZ	_00220_DS_
00091c   0e03     movlw	0x3                	MOVLW	0x03
00091e   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
000920   e239     bc	0x994                 	BC	_00194_DS_
                                           ;	.line	266; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
000922   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; TCPIP_Stack/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
000924   0e11     movlw	0x11               	MOVLW	0x11
000926   6e01     movwf	0x1, 0             	MOVWF	r0x01
000928   6a02     clrf	0x2, 0              	CLRF	r0x02
00092a   6a03     clrf	0x3, 0              	CLRF	r0x03
00092c   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
00092e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000930   f005
000932   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000934   f006
000936   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000938   f007
00093a   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
00093c   f008
00093e   0eff     movlw	0xff               	MOVLW	0xff
000940   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000942   0eff     movlw	0xff               	MOVLW	0xff
000944   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000946   0eff     movlw	0xff               	MOVLW	0xff
000948   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00094a   0eff     movlw	0xff               	MOVLW	0xff
00094c   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00094e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000950   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000952   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000954   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000956   e1eb     bnz	0x92e                	BNZ	_00155_DS_
                                           ;	.line	268; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
000958   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
00095a   0e48     movlw	0x48               	MOVLW	0x48
00095c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00095e   0e0d     movlw	0xd                	MOVLW	0x0d
000960   6e02     movwf	0x2, 0             	MOVWF	r0x02
000962   6a03     clrf	0x3, 0              	CLRF	r0x03
000964   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
000966   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000968   f005
00096a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00096c   f006
00096e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000970   f007
000972   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000974   f008
000976   0eff     movlw	0xff               	MOVLW	0xff
000978   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00097a   0eff     movlw	0xff               	MOVLW	0xff
00097c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00097e   0eff     movlw	0xff               	MOVLW	0xff
000980   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000982   0eff     movlw	0xff               	MOVLW	0xff
000984   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000986   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000988   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00098a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00098c   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
00098e   e1eb     bnz	0x966                	BNZ	_00161_DS_
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
000990   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000992   d7be     bra	0x910                	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x38);
000994   0e38     movlw	0x38               	MOVLW	0x38
000996   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000998   0e00     movlw	0                  	MOVLW	0x00
00099a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00099c   ecb4     call	0x1968, 0           	CALL	_LCDWrite
00099e   f00c
0009a0   0e02     movlw	0x2                	MOVLW	0x02
0009a2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0009a4   0e55     movlw	0x55               	MOVLW	0x55
0009a6   6e00     movwf	0, 0               	MOVWF	r0x00
0009a8   6a01     clrf	0x1, 0              	CLRF	r0x01
0009aa   6a02     clrf	0x2, 0              	CLRF	r0x02
0009ac   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
0009ae   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0009b0   f004
0009b2   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0009b4   f005
0009b6   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0009b8   f006
0009ba   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0009bc   f007
0009be   0eff     movlw	0xff               	MOVLW	0xff
0009c0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0009c2   0eff     movlw	0xff               	MOVLW	0xff
0009c4   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0009c6   0eff     movlw	0xff               	MOVLW	0xff
0009c8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0009ca   0eff     movlw	0xff               	MOVLW	0xff
0009cc   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0009ce   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0009d0   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0009d2   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0009d4   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0009d6   e1eb     bnz	0x9ae                	BNZ	_00167_DS_
                                           ;	.line	300; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
0009d8   0e06     movlw	0x6                	MOVLW	0x06
0009da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009dc   0e00     movlw	0                  	MOVLW	0x00
0009de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009e0   ecb4     call	0x1968, 0           	CALL	_LCDWrite
0009e2   f00c
0009e4   0e02     movlw	0x2                	MOVLW	0x02
0009e6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0009e8   0e55     movlw	0x55               	MOVLW	0x55
0009ea   6e00     movwf	0, 0               	MOVWF	r0x00
0009ec   6a01     clrf	0x1, 0              	CLRF	r0x01
0009ee   6a02     clrf	0x2, 0              	CLRF	r0x02
0009f0   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
0009f2   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0009f4   f004
0009f6   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0009f8   f005
0009fa   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0009fc   f006
0009fe   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000a00   f007
000a02   0eff     movlw	0xff               	MOVLW	0xff
000a04   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000a06   0eff     movlw	0xff               	MOVLW	0xff
000a08   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000a0a   0eff     movlw	0xff               	MOVLW	0xff
000a0c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a0e   0eff     movlw	0xff               	MOVLW	0xff
000a10   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a12   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000a14   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000a16   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000a18   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000a1a   e1eb     bnz	0x9f2                	BNZ	_00173_DS_
                                           ;	.line	304; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
000a1c   0e0c     movlw	0xc                	MOVLW	0x0c
000a1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a20   0e00     movlw	0                  	MOVLW	0x00
000a22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a24   ecb4     call	0x1968, 0           	CALL	_LCDWrite
000a26   f00c
000a28   0e02     movlw	0x2                	MOVLW	0x02
000a2a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
000a2c   0e55     movlw	0x55               	MOVLW	0x55
000a2e   6e00     movwf	0, 0               	MOVWF	r0x00
000a30   6a01     clrf	0x1, 0              	CLRF	r0x01
000a32   6a02     clrf	0x2, 0              	CLRF	r0x02
000a34   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
000a36   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000a38   f004
000a3a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000a3c   f005
000a3e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000a40   f006
000a42   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000a44   f007
000a46   0eff     movlw	0xff               	MOVLW	0xff
000a48   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000a4a   0eff     movlw	0xff               	MOVLW	0xff
000a4c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000a4e   0eff     movlw	0xff               	MOVLW	0xff
000a50   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a52   0eff     movlw	0xff               	MOVLW	0xff
000a54   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a56   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000a58   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000a5a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000a5c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000a5e   e1eb     bnz	0xa36                	BNZ	_00179_DS_
                                           ;	.line	308; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);	
000a60   0e01     movlw	0x1                	MOVLW	0x01
000a62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a64   0e00     movlw	0                  	MOVLW	0x00
000a66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a68   ecb4     call	0x1968, 0           	CALL	_LCDWrite
000a6a   f00c
000a6c   0e02     movlw	0x2                	MOVLW	0x02
000a6e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
000a70   0e48     movlw	0x48               	MOVLW	0x48
000a72   6e00     movwf	0, 0               	MOVWF	r0x00
000a74   0e0d     movlw	0xd                	MOVLW	0x0d
000a76   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a78   6a02     clrf	0x2, 0              	CLRF	r0x02
000a7a   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
000a7c   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000a7e   f004
000a80   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000a82   f005
000a84   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000a86   f006
000a88   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000a8a   f007
000a8c   0eff     movlw	0xff               	MOVLW	0xff
000a8e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000a90   0eff     movlw	0xff               	MOVLW	0xff
000a92   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000a94   0eff     movlw	0xff               	MOVLW	0xff
000a96   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000a98   0eff     movlw	0xff               	MOVLW	0xff
000a9a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000a9c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000a9e   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000aa0   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000aa2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000aa4   e1eb     bnz	0xa7c                	BNZ	_00185_DS_
000aa6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000aa8   f008
000aaa   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000aac   f007
000aae   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000ab0   f006
000ab2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000ab4   f005
000ab6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000ab8   f004
000aba   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000abc   f003
000abe   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000ac0   f002
000ac2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000ac4   f001
000ac6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000ac8   f000
000aca   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000acc   ffd9
000ace   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; TCPIP_Stack/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
001968   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00196a   ffe5
00196c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00196e   ffd9
001970   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001972   ffe5
001974   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001976   ffe5
001978   0e02     movlw	0x2                	MOVLW	0x02
00197a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00197c   f000
00197e   0e03     movlw	0x3                	MOVLW	0x03
001980   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001982   f001
                                           ;	.line	97; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
001984   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
001986   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
001988   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
00198a   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = RS;
00198c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00198e   0b01     andlw	0x1                	ANDLW	0x01
001990   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
001992   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
001994   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
001996   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
001998   0bfb     andlw	0xfb               	ANDLW	0xfb
00199a   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00199c   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = Data;
00199e   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
0019a0   ff8d
0019a2   0000     nop                      	nop 
0019a4   0000     nop                      	nop 
                                           ;	.line	155; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
0019a6   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
0019a8   0000     nop                      	nop 
0019aa   0000     nop                      	nop 
0019ac   0000     nop                      	nop 
0019ae   0000     nop                      	nop 
0019b0   0000     nop                      	nop 
0019b2   0000     nop                      	nop 
0019b4   0000     nop                      	nop 
0019b6   0000     nop                      	nop 
0019b8   0000     nop                      	nop 
                                           ;	.line	165; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
0019ba   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
0019bc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0019be   f001
0019c0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0019c2   f000
0019c4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0019c6   ffd9
0019c8   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
