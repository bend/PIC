gplink-0.14.1 (Jan 11 2012)
Copyright (c) 1998-2011 gputils project
Listing File Generated: 3-20-2012  13:24:25
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Mar 13 2012) (UNIX)
                                           ; This file was generated Tue Mar 20 13:24:25 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _increment_time
                                           	global _alarm
                                           	global _test_inc_current_time
                                           	global _display_time
                                           	global _display_word
                                           	global _display_string
                                           	global _strlcpy
                                           	global _dumb_delay1ms
                                           	global _time
                                           	global _currentTime
                                           	global _position
                                           	global _refresh
                                           	global _bres
                                           	global _high_isr
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _ultoa
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _time	db	0x30, 0x30, 0x3a, 0x30, 0x30, 0x20, 0x20, 0x30, 0x30, 0x3a, 0x30, 0x30
                                           	db	0x3a, 0x30, 0x30, 0x00
                                           _currentTime	db	LOW((_time + 7)), HIGH((_time + 7)), 0x80
                                           _position	db	0x00, 0x00
                                           _refresh	db	0x01, 0x00
                                           _bres	db	0x00, 0x00, 0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           
                                           udata_testint_0	udata
                                           _main_string_1_1	res	16
                                           
                                           udata_testint_1	udata
                                           _display_word_WDigit_1_1	res	6
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_testint_ivec_0x1_high_isr	code	0X000008
                                           ivec_0x1_high_isr:
000008   efaf     goto    0x35e            	GOTO	_high_isr
00000a   f001
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_testint__main	code
                                           _main:
0016e0   010e     movlb   0xe              	BANKSEL	_main_string_1_1
                                           ;	.line	84; testint.c	char string[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
0016e2   6b00     clrf    0, 0x1           	CLRF	_main_string_1_1, B
0016e4   010e     movlb   0xe              	BANKSEL	(_main_string_1_1 + 1)
0016e6   6b01     clrf    0x1, 0x1         	CLRF	(_main_string_1_1 + 1), B
0016e8   010e     movlb   0xe              	BANKSEL	(_main_string_1_1 + 2)
0016ea   6b02     clrf    0x2, 0x1         	CLRF	(_main_string_1_1 + 2), B
0016ec   010e     movlb   0xe              	BANKSEL	(_main_string_1_1 + 3)
0016ee   6b03     clrf    0x3, 0x1         	CLRF	(_main_string_1_1 + 3), B
0016f0   010e     movlb   0xe              	BANKSEL	(_main_string_1_1 + 4)
0016f2   6b04     clrf    0x4, 0x1         	CLRF	(_main_string_1_1 + 4), B
0016f4   010e     movlb   0xe              	BANKSEL	(_main_string_1_1 + 5)
0016f6   6b05     clrf    0x5, 0x1         	CLRF	(_main_string_1_1 + 5), B
0016f8   010e     movlb   0xe              	BANKSEL	(_main_string_1_1 + 6)
0016fa   6b06     clrf    0x6, 0x1         	CLRF	(_main_string_1_1 + 6), B
0016fc   010e     movlb   0xe              	BANKSEL	(_main_string_1_1 + 7)
0016fe   6b07     clrf    0x7, 0x1         	CLRF	(_main_string_1_1 + 7), B
001700   010e     movlb   0xe              	BANKSEL	(_main_string_1_1 + 8)
001702   6b08     clrf    0x8, 0x1         	CLRF	(_main_string_1_1 + 8), B
001704   010e     movlb   0xe              	BANKSEL	(_main_string_1_1 + 9)
001706   6b09     clrf    0x9, 0x1         	CLRF	(_main_string_1_1 + 9), B
001708   010e     movlb   0xe              	BANKSEL	(_main_string_1_1 + 10)
00170a   6b0a     clrf    0xa, 0x1         	CLRF	(_main_string_1_1 + 10), B
00170c   010e     movlb   0xe              	BANKSEL	(_main_string_1_1 + 11)
00170e   6b0b     clrf    0xb, 0x1         	CLRF	(_main_string_1_1 + 11), B
001710   010e     movlb   0xe              	BANKSEL	(_main_string_1_1 + 12)
001712   6b0c     clrf    0xc, 0x1         	CLRF	(_main_string_1_1 + 12), B
001714   010e     movlb   0xe              	BANKSEL	(_main_string_1_1 + 13)
001716   6b0d     clrf    0xd, 0x1         	CLRF	(_main_string_1_1 + 13), B
001718   010e     movlb   0xe              	BANKSEL	(_main_string_1_1 + 14)
00171a   6b0e     clrf    0xe, 0x1         	CLRF	(_main_string_1_1 + 14), B
00171c   010e     movlb   0xe              	BANKSEL	(_main_string_1_1 + 15)
00171e   6b0f     clrf    0xf, 0x1         	CLRF	(_main_string_1_1 + 15), B
                                           ;	.line	86; testint.c	LED0_TRIS = 0; //configure 1st led pin as output (yellow)
001720   909a     bcf     0x9a, 0, 0       	BCF	_TRISJbits, 0
                                           ;	.line	87; testint.c	LED1_TRIS = 0; //configure 2nd led pin as output (red)
001722   929a     bcf     0x9a, 0x1, 0     	BCF	_TRISJbits, 1
                                           ;	.line	88; testint.c	LED2_TRIS = 0; //configure 3rd led pin as output (red)
001724   949a     bcf     0x9a, 0x2, 0     	BCF	_TRISJbits, 2
                                           ;	.line	90; testint.c	BUTTON0_TRIS = 1; //configure button0 as input
001726   8693     bsf     0x93, 0x3, 0     	BSF	_TRISBbits, 3
                                           ;	.line	91; testint.c	BUTTON1_TRIS = 1; //configure button1 as input 
001728   8293     bsf     0x93, 0x1, 0     	BSF	_TRISBbits, 1
                                           ;	.line	93; testint.c	RCONbits.IPEN      = 1;   // Interrupts Priority ENable
00172a   8ed0     bsf     0xd0, 0x7, 0     	BSF	_RCONbits, 7
                                           ;	.line	95; testint.c	INT1F  = 0;   //clear INT1 flag
00172c   90f0     bcf     0xf0, 0, 0       	BCF	_INTCON3bits, 0
                                           ;	.line	98; testint.c	INTCON3bits.INT1P  = 1; 
00172e   8cf0     bsf     0xf0, 0x6, 0     	BSF	_INTCON3bits, 6
                                           ;	.line	100; testint.c	INTCON2bits.INTEDG1= 0;
001730   9af1     bcf     0xf1, 0x5, 0     	BCF	_INTCON2bits, 5
                                           ;	.line	103; testint.c	INTCONbits.GIE     = 1;
001732   8ef2     bsf     0xf2, 0x7, 0     	BSF	_INTCONbits, 7
                                           ;	.line	106; testint.c	INTCON3bits.INT1E  = 1;
001734   86f0     bsf     0xf0, 0x3, 0     	BSF	_INTCON3bits, 3
                                           ;	.line	107; testint.c	INTCON3bits.INT3E  = 1;
001736   8af0     bsf     0xf0, 0x5, 0     	BSF	_INTCON3bits, 5
                                           ;	.line	109; testint.c	T0CONbits.T0CS     = 1;
001738   8ad5     bsf     0xd5, 0x5, 0     	BSF	_T0CONbits, 5
                                           ;	.line	111; testint.c	LCDInit();
00173a   ec29     call    0x852, 0         	CALL	_LCDInit
00173c   f004
                                           ;	.line	112; testint.c	for(i=0;i<100;i++) dumb_delay1ms();
00173e   0e64     movlw   0x64             	MOVLW	0x64
001740   6e00     movwf   0, 0             	MOVWF	r0x00
001742   6a01     clrf    0x1, 0           	CLRF	r0x01
                                           _00162_DS_:
001744   ecb6     call    0x196c, 0        	CALL	_dumb_delay1ms
001746   f00c
001748   0eff     movlw   0xff             	MOVLW	0xff
00174a   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
00174c   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
00174e   0601     decf    0x1, 0x1, 0      	DECF	r0x01, F
001750   5000     movf    0, 0, 0          	MOVF	r0x00, W
001752   1001     iorwf   0x1, 0, 0        	IORWF	r0x01, W
001754   e1f7     bnz     0x1744           	BNZ	_00162_DS_
                                           ;	.line	114; testint.c	display_time (); 
001756   ec4f     call    0x189e, 0        	CALL	_display_time
001758   f00c
                                           ;	.line	117; testint.c	INTCON2bits.TMR0IP	 = 1; 
00175a   84f1     bsf     0xf1, 0x2, 0     	BSF	_INTCON2bits, 2
                                           ;	.line	120; testint.c	TMR0F    = 0;
00175c   94f2     bcf     0xf2, 0x2, 0     	BCF	_INTCONbits, 2
                                           ;	.line	123; testint.c	T0CONbits.T08BIT    = 0;
00175e   9cd5     bcf     0xd5, 0x6, 0     	BCF	_T0CONbits, 6
                                           ;	.line	125; testint.c	T0CONbits.PSA       = 1;
001760   86d5     bsf     0xd5, 0x3, 0     	BSF	_T0CONbits, 3
                                           ;	.line	127; testint.c	INTCONbits.TMR0IE   = 1;
001762   8af2     bsf     0xf2, 0x5, 0     	BSF	_INTCONbits, 5
                                           ;	.line	129; testint.c	T0CONbits.TMR0ON    = 1;
001764   8ed5     bsf     0xd5, 0x7, 0     	BSF	_T0CONbits, 7
                                           _00158_DS_:
001766   010f     movlb   0xf              	BANKSEL	_refresh
                                           ;	.line	134; testint.c	if ( refresh == 1){
001768   5156     movf    0x56, 0, 0x1     	MOVF	_refresh, W, B
00176a   0a01     xorlw   0x1              	XORLW	0x01
00176c   e103     bnz     0x1774           	BNZ	_00170_DS_
00176e   010f     movlb   0xf              	BANKSEL	(_refresh + 1)
001770   5157     movf    0x57, 0, 0x1     	MOVF	(_refresh + 1), W, B
001772   e001     bz      0x1776           	BZ	_00171_DS_
                                           _00170_DS_:
001774   d7f8     bra     0x1766           	BRA	_00158_DS_
                                           _00171_DS_:
001776   010f     movlb   0xf              	BANKSEL	_refresh
                                           ;	.line	135; testint.c	refresh = 0;
001778   6b56     clrf    0x56, 0x1        	CLRF	_refresh, B
00177a   010f     movlb   0xf              	BANKSEL	(_refresh + 1)
00177c   6b57     clrf    0x57, 0x1        	CLRF	(_refresh + 1), B
                                           ;	.line	136; testint.c	display_time();
00177e   ec4f     call    0x189e, 0        	CALL	_display_time
001780   f00c
001782   d7f1     bra     0x1766           	BRA	_00158_DS_
001784   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__dumb_delay1ms	code
                                           _dumb_delay1ms:
                                           ;	.line	332; testint.c	void dumb_delay1ms (void)
00196c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00196e   ffe5
001970   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001972   ffd9
                                           ;	.line	334; testint.c	TMR0H = HIGH (0x10000-EXEC_FREQ/1000);
001974   0ed8     movlw   0xd8             	MOVLW	0xd8
001976   6ed7     movwf   0xd7, 0          	MOVWF	_TMR0H
                                           ;	.line	335; testint.c	TMR0L = LOW  (0x10000-EXEC_FREQ/1000);
001978   0ef0     movlw   0xf0             	MOVLW	0xf0
00197a   6ed6     movwf   0xd6, 0          	MOVWF	_TMR0L
                                           ;	.line	336; testint.c	T0CONbits.TMR0ON = 0;  //disable timer0
00197c   9ed5     bcf     0xd5, 0x7, 0     	BCF	_T0CONbits, 7
                                           ;	.line	337; testint.c	T0CONbits.T08BIT = 0;  //use timer0 16-bit counter
00197e   9cd5     bcf     0xd5, 0x6, 0     	BCF	_T0CONbits, 6
                                           ;	.line	338; testint.c	T0CONbits.T0CS   = 0;  //use timer0 instruction cycle clock
001980   9ad5     bcf     0xd5, 0x5, 0     	BCF	_T0CONbits, 5
                                           ;	.line	339; testint.c	T0CONbits.PSA    = 1;  //disable timer0 prescaler
001982   86d5     bsf     0xd5, 0x3, 0     	BSF	_T0CONbits, 3
                                           ;	.line	340; testint.c	INTCONbits.T0IF   = 0;  //clear timer0 overflow bit
001984   94f2     bcf     0xf2, 0x2, 0     	BCF	_INTCONbits, 2
                                           ;	.line	341; testint.c	T0CONbits.TMR0ON = 1;  //enable timer0
001986   8ed5     bsf     0xd5, 0x7, 0     	BSF	_T0CONbits, 7
                                           _00350_DS_:
                                           ;	.line	342; testint.c	while(!INTCONbits.T0IF){} //busy wait for timer0 to overflow
001988   a4f2     btfss   0xf2, 0x2, 0     	BTFSS	_INTCONbits, 2
00198a   d7fe     bra     0x1988           	BRA	_00350_DS_
                                           ;	.line	343; testint.c	INTCONbits.T0IF   = 0;  //clear timer0 overflow bit
00198c   94f2     bcf     0xf2, 0x2, 0     	BCF	_INTCONbits, 2
                                           ;	.line	344; testint.c	T0CONbits.TMR0ON = 0;  //disable timer0   
00198e   9ed5     bcf     0xd5, 0x7, 0     	BCF	_T0CONbits, 7
001990   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001992   ffd9
001994   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__strlcpy	code
                                           _strlcpy:
                                           ;	.line	301; testint.c	strlcpy(char *dst, const char *src, size_t siz)
000aae   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000ab0   ffe5
000ab2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000ab4   ffd9
000ab6   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000ab8   ffe5
000aba   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000abc   ffe5
000abe   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000ac0   ffe5
000ac2   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000ac4   ffe5
000ac6   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
000ac8   ffe5
000aca   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
000acc   ffe5
000ace   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
000ad0   ffe5
000ad2   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
000ad4   ffe5
000ad6   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
000ad8   ffe5
000ada   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
000adc   ffe5
000ade   c00a     movff   0xa, 0xfe5       	MOVFF	r0x0a, POSTDEC1
000ae0   ffe5
000ae2   c00b     movff   0xb, 0xfe5       	MOVFF	r0x0b, POSTDEC1
000ae4   ffe5
000ae6   c00c     movff   0xc, 0xfe5       	MOVFF	r0x0c, POSTDEC1
000ae8   ffe5
000aea   c00d     movff   0xd, 0xfe5       	MOVFF	r0x0d, POSTDEC1
000aec   ffe5
000aee   c00e     movff   0xe, 0xfe5       	MOVFF	r0x0e, POSTDEC1
000af0   ffe5
000af2   c00f     movff   0xf, 0xfe5       	MOVFF	r0x0f, POSTDEC1
000af4   ffe5
000af6   c010     movff   0x10, 0xfe5      	MOVFF	r0x10, POSTDEC1
000af8   ffe5
000afa   c011     movff   0x11, 0xfe5      	MOVFF	r0x11, POSTDEC1
000afc   ffe5
000afe   c012     movff   0x12, 0xfe5      	MOVFF	r0x12, POSTDEC1
000b00   ffe5
000b02   c013     movff   0x13, 0xfe5      	MOVFF	r0x13, POSTDEC1
000b04   ffe5
000b06   c014     movff   0x14, 0xfe5      	MOVFF	r0x14, POSTDEC1
000b08   ffe5
000b0a   c015     movff   0x15, 0xfe5      	MOVFF	r0x15, POSTDEC1
000b0c   ffe5
000b0e   0e02     movlw   0x2              	MOVLW	0x02
000b10   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000b12   f000
000b14   0e03     movlw   0x3              	MOVLW	0x03
000b16   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
000b18   f001
000b1a   0e04     movlw   0x4              	MOVLW	0x04
000b1c   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
000b1e   f002
000b20   0e05     movlw   0x5              	MOVLW	0x05
000b22   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
000b24   f003
000b26   0e06     movlw   0x6              	MOVLW	0x06
000b28   cfdb     movff   0xfdb, 0x4       	MOVFF	PLUSW2, r0x04
000b2a   f004
000b2c   0e07     movlw   0x7              	MOVLW	0x07
000b2e   cfdb     movff   0xfdb, 0x5       	MOVFF	PLUSW2, r0x05
000b30   f005
000b32   0e08     movlw   0x8              	MOVLW	0x08
000b34   cfdb     movff   0xfdb, 0x6       	MOVFF	PLUSW2, r0x06
000b36   f006
000b38   0e09     movlw   0x9              	MOVLW	0x09
000b3a   cfdb     movff   0xfdb, 0x7       	MOVFF	PLUSW2, r0x07
000b3c   f007
                                           ;	.line	303; testint.c	char       *d = dst;
000b3e   c000     movff   0, 0x8           	MOVFF	r0x00, r0x08
000b40   f008
000b42   c001     movff   0x1, 0x9         	MOVFF	r0x01, r0x09
000b44   f009
000b46   c002     movff   0x2, 0xa         	MOVFF	r0x02, r0x0a
000b48   f00a
                                           ;	.line	304; testint.c	const char *s = src;
000b4a   c003     movff   0x3, 0xb         	MOVFF	r0x03, r0x0b
000b4c   f00b
000b4e   c004     movff   0x4, 0xc         	MOVFF	r0x04, r0x0c
000b50   f00c
000b52   c005     movff   0x5, 0xd         	MOVFF	r0x05, r0x0d
000b54   f00d
                                           ;	.line	305; testint.c	size_t      n = siz;
000b56   c006     movff   0x6, 0xe         	MOVFF	r0x06, r0x0e
000b58   f00e
000b5a   c007     movff   0x7, 0xf         	MOVFF	r0x07, r0x0f
000b5c   f00f
                                           ;	.line	308; testint.c	if (n != 0)
000b5e   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000b60   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
000b62   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
000b64   d03e     bra     0xbe2            	BRA	_00330_DS_
                                           ;	.line	310; testint.c	while (--n != 0)
000b66   c003     movff   0x3, 0x10        	MOVFF	r0x03, r0x10
000b68   f010
000b6a   c004     movff   0x4, 0x11        	MOVFF	r0x04, r0x11
000b6c   f011
000b6e   c005     movff   0x5, 0x12        	MOVFF	r0x05, r0x12
000b70   f012
000b72   c006     movff   0x6, 0x13        	MOVFF	r0x06, r0x13
000b74   f013
000b76   c007     movff   0x7, 0x14        	MOVFF	r0x07, r0x14
000b78   f014
                                           _00326_DS_:
000b7a   0eff     movlw   0xff             	MOVLW	0xff
000b7c   2613     addwf   0x13, 0x1, 0     	ADDWF	r0x13, F
000b7e   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
000b80   0614     decf    0x14, 0x1, 0     	DECF	r0x14, F
000b82   5013     movf    0x13, 0, 0       	MOVF	r0x13, W
000b84   1014     iorwf   0x14, 0, 0       	IORWF	r0x14, W
000b86   e01d     bz      0xbc2            	BZ	_00345_DS_
                                           ;	.line	312; testint.c	if ((*d++ = *s++) == '\0')
000b88   c010     movff   0x10, 0xfe9      	MOVFF	r0x10, FSR0L
000b8a   ffe9
000b8c   c011     movff   0x11, 0xff3      	MOVFF	r0x11, PRODL
000b8e   fff3
000b90   5012     movf    0x12, 0, 0       	MOVF	r0x12, W
000b92   eccb     call    0x1996, 0        	CALL	__gptrget1
000b94   f00c
000b96   6e15     movwf   0x15, 0          	MOVWF	r0x15
000b98   2a10     incf    0x10, 0x1, 0     	INCF	r0x10, F
000b9a   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
000b9c   2a11     incf    0x11, 0x1, 0     	INCF	r0x11, F
000b9e   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
000ba0   2a12     incf    0x12, 0x1, 0     	INCF	r0x12, F
000ba2   c015     movff   0x15, 0xfe5      	MOVFF	r0x15, POSTDEC1
000ba4   ffe5
000ba6   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000ba8   ffe9
000baa   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
000bac   fff3
000bae   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000bb0   ecf6     call    0x19ec, 0        	CALL	__gptrput1
000bb2   f00c
000bb4   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000bb6   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
000bb8   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
000bba   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
000bbc   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
000bbe   5015     movf    0x15, 0, 0       	MOVF	r0x15, W
000bc0   e1dc     bnz     0xb7a            	BNZ	_00326_DS_
                                           _00345_DS_:
                                           ;	.line	313; testint.c	break;
000bc2   c010     movff   0x10, 0xb        	MOVFF	r0x10, r0x0b
000bc4   f00b
000bc6   c011     movff   0x11, 0xc        	MOVFF	r0x11, r0x0c
000bc8   f00c
000bca   c012     movff   0x12, 0xd        	MOVFF	r0x12, r0x0d
000bcc   f00d
000bce   c000     movff   0, 0x8           	MOVFF	r0x00, r0x08
000bd0   f008
000bd2   c001     movff   0x1, 0x9         	MOVFF	r0x01, r0x09
000bd4   f009
000bd6   c002     movff   0x2, 0xa         	MOVFF	r0x02, r0x0a
000bd8   f00a
000bda   c013     movff   0x13, 0xe        	MOVFF	r0x13, r0x0e
000bdc   f00e
000bde   c014     movff   0x14, 0xf        	MOVFF	r0x14, r0x0f
000be0   f00f
                                           _00330_DS_:
                                           ;	.line	318; testint.c	if (n == 0)
000be2   500e     movf    0xe, 0, 0        	MOVF	r0x0e, W
000be4   100f     iorwf   0xf, 0, 0        	IORWF	r0x0f, W
000be6   e127     bnz     0xc36            	BNZ	_00337_DS_
                                           ;	.line	320; testint.c	if (siz != 0)
000be8   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000bea   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
000bec   e009     bz      0xc00            	BZ	_00344_DS_
                                           ;	.line	321; testint.c	*d = '\0';          /* NUL-terminate dst */
000bee   0e00     movlw   0                	MOVLW	0x00
000bf0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000bf2   c008     movff   0x8, 0xfe9       	MOVFF	r0x08, FSR0L
000bf4   ffe9
000bf6   c009     movff   0x9, 0xff3       	MOVFF	r0x09, PRODL
000bf8   fff3
000bfa   500a     movf    0xa, 0, 0        	MOVF	r0x0a, W
000bfc   ecf6     call    0x19ec, 0        	CALL	__gptrput1
000bfe   f00c
                                           _00344_DS_:
                                           ;	.line	322; testint.c	while (*s++)
000c00   c00b     movff   0xb, 0           	MOVFF	r0x0b, r0x00
000c02   f000
000c04   c00c     movff   0xc, 0x1         	MOVFF	r0x0c, r0x01
000c06   f001
000c08   c00d     movff   0xd, 0x2         	MOVFF	r0x0d, r0x02
000c0a   f002
                                           _00333_DS_:
000c0c   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000c0e   ffe9
000c10   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
000c12   fff3
000c14   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000c16   eccb     call    0x1996, 0        	CALL	__gptrget1
000c18   f00c
000c1a   6e06     movwf   0x6, 0           	MOVWF	r0x06
000c1c   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000c1e   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
000c20   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
000c22   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
000c24   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
000c26   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000c28   e1f1     bnz     0xc0c            	BNZ	_00333_DS_
000c2a   c000     movff   0, 0xb           	MOVFF	r0x00, r0x0b
000c2c   f00b
000c2e   c001     movff   0x1, 0xc         	MOVFF	r0x01, r0x0c
000c30   f00c
000c32   c002     movff   0x2, 0xd         	MOVFF	r0x02, r0x0d
000c34   f00d
                                           _00337_DS_:
                                           ;	.line	328; testint.c	return (s - src - 1);       /* count does not include NUL */
000c36   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000c38   5c0b     subwf   0xb, 0, 0        	SUBWF	r0x0b, W
000c3a   6e03     movwf   0x3, 0           	MOVWF	r0x03
000c3c   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000c3e   580c     subwfb  0xc, 0, 0        	SUBWFB	r0x0c, W
000c40   6e04     movwf   0x4, 0           	MOVWF	r0x04
000c42   0eff     movlw   0xff             	MOVLW	0xff
000c44   2603     addwf   0x3, 0x1, 0      	ADDWF	r0x03, F
000c46   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
000c48   0604     decf    0x4, 0x1, 0      	DECF	r0x04, F
000c4a   c004     movff   0x4, 0xff3       	MOVFF	r0x04, PRODL
000c4c   fff3
000c4e   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000c50   cfe4     movff   0xfe4, 0x15      	MOVFF	PREINC1, r0x15
000c52   f015
000c54   cfe4     movff   0xfe4, 0x14      	MOVFF	PREINC1, r0x14
000c56   f014
000c58   cfe4     movff   0xfe4, 0x13      	MOVFF	PREINC1, r0x13
000c5a   f013
000c5c   cfe4     movff   0xfe4, 0x12      	MOVFF	PREINC1, r0x12
000c5e   f012
000c60   cfe4     movff   0xfe4, 0x11      	MOVFF	PREINC1, r0x11
000c62   f011
000c64   cfe4     movff   0xfe4, 0x10      	MOVFF	PREINC1, r0x10
000c66   f010
000c68   cfe4     movff   0xfe4, 0xf       	MOVFF	PREINC1, r0x0f
000c6a   f00f
000c6c   cfe4     movff   0xfe4, 0xe       	MOVFF	PREINC1, r0x0e
000c6e   f00e
000c70   cfe4     movff   0xfe4, 0xd       	MOVFF	PREINC1, r0x0d
000c72   f00d
000c74   cfe4     movff   0xfe4, 0xc       	MOVFF	PREINC1, r0x0c
000c76   f00c
000c78   cfe4     movff   0xfe4, 0xb       	MOVFF	PREINC1, r0x0b
000c7a   f00b
000c7c   cfe4     movff   0xfe4, 0xa       	MOVFF	PREINC1, r0x0a
000c7e   f00a
000c80   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
000c82   f009
000c84   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
000c86   f008
000c88   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
000c8a   f007
000c8c   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
000c8e   f006
000c90   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
000c92   f005
000c94   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
000c96   f004
000c98   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
000c9a   f003
000c9c   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000c9e   f002
000ca0   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000ca2   f001
000ca4   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000ca6   f000
000ca8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000caa   ffd9
000cac   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__display_string	code
                                           _display_string:
                                           ;	.line	256; testint.c	void display_string(BYTE pos, char* text)
0012fa   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0012fc   ffe5
0012fe   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001300   ffd9
001302   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001304   ffe5
001306   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001308   ffe5
00130a   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
00130c   ffe5
00130e   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
001310   ffe5
001312   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
001314   ffe5
001316   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
001318   ffe5
00131a   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
00131c   ffe5
00131e   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
001320   ffe5
001322   0e02     movlw   0x2              	MOVLW	0x02
001324   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
001326   f000
001328   0e03     movlw   0x3              	MOVLW	0x03
00132a   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
00132c   f001
00132e   0e04     movlw   0x4              	MOVLW	0x04
001330   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
001332   f002
001334   0e05     movlw   0x5              	MOVLW	0x05
001336   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
001338   f003
                                           ;	.line	258; testint.c	BYTE l= strlen(text)+1;
00133a   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00133c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00133e   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001340   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001342   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001344   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001346   ec0f     call    0x181e, 0        	CALL	_strlen
001348   f00c
00134a   6e04     movwf   0x4, 0           	MOVWF	r0x04
00134c   cff3     movff   0xff3, 0x5       	MOVFF	PRODL, r0x05
00134e   f005
001350   0e03     movlw   0x3              	MOVLW	0x03
001352   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
001354   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
                                           ;	.line	259; testint.c	BYTE max= 32-pos;
001356   5000     movf    0, 0, 0          	MOVF	r0x00, W
001358   0820     sublw   0x20             	SUBLW	0x20
00135a   6e05     movwf   0x5, 0           	MOVWF	r0x05
                                           ;	.line	260; testint.c	strlcpy((char*)&LCDText[pos], text,(l<max)?l:max );
00135c   6a06     clrf    0x6, 0           	CLRF	r0x06
00135e   0e00     movlw   0                	MOVLW	LOW(_LCDText)
001360   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
001362   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
001364   2206     addwfc  0x6, 0x1, 0      	ADDWFC	r0x06, F
001366   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
001368   6e06     movwf   0x6, 0           	MOVWF	r0x06
00136a   5000     movf    0, 0, 0          	MOVF	r0x00, W
00136c   6e00     movwf   0, 0             	MOVWF	r0x00
00136e   0e80     movlw   0x80             	MOVLW	0x80
001370   6e07     movwf   0x7, 0           	MOVWF	r0x07
001372   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
001374   5c04     subwf   0x4, 0, 0        	SUBWF	r0x04, W
001376   e302     bnc     0x137c           	BNC	_00317_DS_
001378   c005     movff   0x5, 0x4         	MOVFF	r0x05, r0x04
00137a   f004
                                           _00317_DS_:
00137c   6a05     clrf    0x5, 0           	CLRF	r0x05
00137e   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
001380   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001382   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001384   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001386   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001388   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00138a   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00138c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00138e   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001390   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001392   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
001394   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001396   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
001398   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00139a   5000     movf    0, 0, 0          	MOVF	r0x00, W
00139c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00139e   ec57     call    0xaae, 0         	CALL	_strlcpy
0013a0   f005
0013a2   0e08     movlw   0x8              	MOVLW	0x08
0013a4   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	261; testint.c	LCDUpdate();
0013a6   ecf4     call    0x5e8, 0         	CALL	_LCDUpdate
0013a8   f002
0013aa   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
0013ac   f007
0013ae   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
0013b0   f006
0013b2   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
0013b4   f005
0013b6   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
0013b8   f004
0013ba   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0013bc   f003
0013be   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0013c0   f002
0013c2   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0013c4   f001
0013c6   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0013c8   f000
0013ca   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0013cc   ffd9
0013ce   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__display_word	code
                                           _display_word:
                                           ;	.line	234; testint.c	void display_word(BYTE pos, WORD w) //WORD is a 16 bits unsigned
0010c2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0010c4   ffe5
0010c6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0010c8   ffd9
0010ca   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0010cc   ffe5
0010ce   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0010d0   ffe5
0010d2   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0010d4   ffe5
0010d6   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
0010d8   ffe5
0010da   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
0010dc   ffe5
0010de   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
0010e0   ffe5
0010e2   0e02     movlw   0x2              	MOVLW	0x02
0010e4   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0010e6   f000
0010e8   0e03     movlw   0x3              	MOVLW	0x03
0010ea   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
0010ec   f001
0010ee   0e04     movlw   0x4              	MOVLW	0x04
0010f0   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
0010f2   f002
                                           ;	.line	242; testint.c	ultoa(w, WDigit, radix);      
0010f4   6a03     clrf    0x3, 0           	CLRF	r0x03
0010f6   6a04     clrf    0x4, 0           	CLRF	r0x04
0010f8   0e0a     movlw   0xa              	MOVLW	0x0a
0010fa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0010fc   0e0e     movlw   0xe              	MOVLW	HIGH(_display_word_WDigit_1_1)
0010fe   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001100   0e10     movlw   0x10             	MOVLW	LOW(_display_word_WDigit_1_1)
001102   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001104   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001106   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001108   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00110a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00110c   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00110e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001110   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001112   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001114   ec57     call    0xcae, 0         	CALL	_ultoa
001116   f006
001118   0e07     movlw   0x7              	MOVLW	0x07
00111a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	243; testint.c	for(j = 0; j < strlen((char*)WDigit); j++)
00111c   6a01     clrf    0x1, 0           	CLRF	r0x01
                                           _00298_DS_:
00111e   0e0e     movlw   0xe              	MOVLW	HIGH(_display_word_WDigit_1_1)
001120   6e03     movwf   0x3, 0           	MOVWF	r0x03
001122   0e10     movlw   0x10             	MOVLW	LOW(_display_word_WDigit_1_1)
001124   6e02     movwf   0x2, 0           	MOVWF	r0x02
001126   0e80     movlw   0x80             	MOVLW	0x80
001128   6e04     movwf   0x4, 0           	MOVWF	r0x04
00112a   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
00112c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00112e   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001130   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001132   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001134   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001136   ec0f     call    0x181e, 0        	CALL	_strlen
001138   f00c
00113a   6e02     movwf   0x2, 0           	MOVWF	r0x02
00113c   cff3     movff   0xff3, 0x3       	MOVFF	PRODL, r0x03
00113e   f003
001140   0e03     movlw   0x3              	MOVLW	0x03
001142   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
001144   c001     movff   0x1, 0x4         	MOVFF	r0x01, r0x04
001146   f004
001148   6a05     clrf    0x5, 0           	CLRF	r0x05
00114a   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
00114c   0f80     addlw   0x80             	ADDLW	0x80
00114e   6ef3     movwf   0xf3, 0          	MOVWF	PRODL
001150   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
001152   0f80     addlw   0x80             	ADDLW	0x80
001154   5cf3     subwf   0xf3, 0, 0       	SUBWF	PRODL, W
001156   e102     bnz     0x115c           	BNZ	_00308_DS_
001158   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00115a   5c04     subwf   0x4, 0, 0        	SUBWF	r0x04, W
                                           _00308_DS_:
00115c   e21c     bc      0x1196           	BC	_00301_DS_
                                           ;	.line	245; testint.c	LCDText[LCDPos++] = WDigit[j];
00115e   c000     movff   0, 0x2           	MOVFF	r0x00, r0x02
001160   f002
001162   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
001164   6a03     clrf    0x3, 0           	CLRF	r0x03
001166   0e00     movlw   0                	MOVLW	LOW(_LCDText)
001168   2602     addwf   0x2, 0x1, 0      	ADDWF	r0x02, F
00116a   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
00116c   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
00116e   0e10     movlw   0x10             	MOVLW	LOW(_display_word_WDigit_1_1)
001170   2401     addwf   0x1, 0, 0        	ADDWF	r0x01, W
001172   6e04     movwf   0x4, 0           	MOVWF	r0x04
001174   6a05     clrf    0x5, 0           	CLRF	r0x05
001176   0e0e     movlw   0xe              	MOVLW	HIGH(_display_word_WDigit_1_1)
001178   2205     addwfc  0x5, 0x1, 0      	ADDWFC	r0x05, F
00117a   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
00117c   ffe9
00117e   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
001180   ffea
001182   cfef     movff   0xfef, 0x4       	MOVFF	INDF0, r0x04
001184   f004
001186   c002     movff   0x2, 0xfe9       	MOVFF	r0x02, FSR0L
001188   ffe9
00118a   c003     movff   0x3, 0xfea       	MOVFF	r0x03, FSR0H
00118c   ffea
00118e   c004     movff   0x4, 0xfef       	MOVFF	r0x04, INDF0
001190   ffef
                                           ;	.line	243; testint.c	for(j = 0; j < strlen((char*)WDigit); j++)
001192   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
001194   d7c4     bra     0x111e           	BRA	_00298_DS_
                                           _00301_DS_:
                                           ;	.line	247; testint.c	if(LCDPos < 32u)
001196   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
001198   f001
00119a   6a02     clrf    0x2, 0           	CLRF	r0x02
00119c   0e00     movlw   0                	MOVLW	0x00
00119e   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
0011a0   e102     bnz     0x11a6           	BNZ	_00309_DS_
0011a2   0e20     movlw   0x20             	MOVLW	0x20
0011a4   5c01     subwf   0x1, 0, 0        	SUBWF	r0x01, W
                                           _00309_DS_:
0011a6   e20b     bc      0x11be           	BC	_00297_DS_
                                           ;	.line	248; testint.c	LCDText[LCDPos] = 0;
0011a8   6a01     clrf    0x1, 0           	CLRF	r0x01
0011aa   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0011ac   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
0011ae   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0011b0   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
0011b2   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
0011b4   ffe9
0011b6   c001     movff   0x1, 0xfea       	MOVFF	r0x01, FSR0H
0011b8   ffea
0011ba   0e00     movlw   0                	MOVLW	0x00
0011bc   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           _00297_DS_:
                                           ;	.line	249; testint.c	LCDUpdate();
0011be   ecf4     call    0x5e8, 0         	CALL	_LCDUpdate
0011c0   f002
0011c2   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
0011c4   f005
0011c6   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
0011c8   f004
0011ca   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0011cc   f003
0011ce   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0011d0   f002
0011d2   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0011d4   f001
0011d6   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0011d8   f000
0011da   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0011dc   ffd9
0011de   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__display_time	code
                                           _display_time:
                                           ;	.line	219; testint.c	void display_time(){    
00189e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0018a0   ffe5
0018a2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0018a4   ffd9
0018a6   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0018a8   ffe5
0018aa   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0018ac   ffe5
0018ae   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0018b0   ffe5
                                           ;	.line	220; testint.c	display_string(0,time);             
0018b2   0e0f     movlw   0xf              	MOVLW	HIGH(_time)
0018b4   6e01     movwf   0x1, 0           	MOVWF	r0x01
0018b6   0e41     movlw   0x41             	MOVLW	LOW(_time)
0018b8   6e00     movwf   0, 0             	MOVWF	r0x00
0018ba   0e80     movlw   0x80             	MOVLW	0x80
0018bc   6e02     movwf   0x2, 0           	MOVWF	r0x02
0018be   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0018c0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0018c2   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0018c4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0018c6   5000     movf    0, 0, 0          	MOVF	r0x00, W
0018c8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0018ca   0e00     movlw   0                	MOVLW	0x00
0018cc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0018ce   ec7d     call    0x12fa, 0        	CALL	_display_string
0018d0   f009
0018d2   0e04     movlw   0x4              	MOVLW	0x04
0018d4   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0018d6   010f     movlb   0xf              	BANKSEL	_position
                                           ;	.line	221; testint.c	display_string(16+position-1," ^");
0018d8   5154     movf    0x54, 0, 0x1     	MOVF	_position, W, B
0018da   6e00     movwf   0, 0             	MOVWF	r0x00
0018dc   0e0f     movlw   0xf              	MOVLW	0x0f
0018de   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
0018e0   0e00     movlw   0                	MOVLW	UPPER(__str_1)
0018e2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0018e4   0e05     movlw   0x5              	MOVLW	HIGH(__str_1)
0018e6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0018e8   0ee4     movlw   0xe4             	MOVLW	LOW(__str_1)
0018ea   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0018ec   5000     movf    0, 0, 0          	MOVF	r0x00, W
0018ee   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0018f0   ec7d     call    0x12fa, 0        	CALL	_display_string
0018f2   f009
0018f4   0e04     movlw   0x4              	MOVLW	0x04
0018f6   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0018f8   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0018fa   f002
0018fc   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0018fe   f001
001900   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
001902   f000
001904   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001906   ffd9
001908   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__test_inc_current_time	code
                                           _test_inc_current_time:
                                           ;	.line	188; testint.c	void test_inc_current_time(){        
00000c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00000e   ffe5
000010   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000012   ffd9
000014   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000016   ffe5
000018   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00001a   ffe5
00001c   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
00001e   ffe5
000020   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000022   ffe5
000024   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
000026   ffe5
000028   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
00002a   ffe5
00002c   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
00002e   ffe5
000030   010f     movlb   0xf              	BANKSEL	_currentTime
                                           ;	.line	189; testint.c	if(currentTime[7] == ':'){
000032   5151     movf    0x51, 0, 0x1     	MOVF	_currentTime, W, B
000034   0f07     addlw   0x7              	ADDLW	0x07
000036   6e00     movwf   0, 0             	MOVWF	r0x00
000038   0e00     movlw   0                	MOVLW	0x00
00003a   010f     movlb   0xf              	BANKSEL	(_currentTime + 1)
00003c   2152     addwfc  0x52, 0, 0x1     	ADDWFC	(_currentTime + 1), W, B
00003e   6e01     movwf   0x1, 0           	MOVWF	r0x01
000040   0e00     movlw   0                	MOVLW	0x00
000042   010f     movlb   0xf              	BANKSEL	(_currentTime + 2)
000044   2153     addwfc  0x53, 0, 0x1     	ADDWFC	(_currentTime + 2), W, B
000046   6e02     movwf   0x2, 0           	MOVWF	r0x02
000048   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
00004a   ffe9
00004c   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
00004e   fff3
000050   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000052   eccb     call    0x1996, 0        	CALL	__gptrget1
000054   f00c
000056   6e03     movwf   0x3, 0           	MOVWF	r0x03
000058   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00005a   0a3a     xorlw   0x3a             	XORLW	0x3a
00005c   e127     bnz     0xac             	BNZ	_00247_DS_
                                           ;	.line	190; testint.c	currentTime[7] = '0';
00005e   0e30     movlw   0x30             	MOVLW	0x30
000060   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000062   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000064   ffe9
000066   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
000068   fff3
00006a   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00006c   ecf6     call    0x19ec, 0        	CALL	__gptrput1
00006e   f00c
000070   010f     movlb   0xf              	BANKSEL	_currentTime
                                           ;	.line	191; testint.c	++currentTime[6];
000072   5151     movf    0x51, 0, 0x1     	MOVF	_currentTime, W, B
000074   0f06     addlw   0x6              	ADDLW	0x06
000076   6e00     movwf   0, 0             	MOVWF	r0x00
000078   0e00     movlw   0                	MOVLW	0x00
00007a   010f     movlb   0xf              	BANKSEL	(_currentTime + 1)
00007c   2152     addwfc  0x52, 0, 0x1     	ADDWFC	(_currentTime + 1), W, B
00007e   6e01     movwf   0x1, 0           	MOVWF	r0x01
000080   0e00     movlw   0                	MOVLW	0x00
000082   010f     movlb   0xf              	BANKSEL	(_currentTime + 2)
000084   2153     addwfc  0x53, 0, 0x1     	ADDWFC	(_currentTime + 2), W, B
000086   6e02     movwf   0x2, 0           	MOVWF	r0x02
000088   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
00008a   ffe9
00008c   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
00008e   fff3
000090   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000092   eccb     call    0x1996, 0        	CALL	__gptrget1
000094   f00c
000096   6e03     movwf   0x3, 0           	MOVWF	r0x03
000098   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
00009a   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
00009c   ffe5
00009e   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
0000a0   ffe9
0000a2   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
0000a4   fff3
0000a6   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0000a8   ecf6     call    0x19ec, 0        	CALL	__gptrput1
0000aa   f00c
                                           _00247_DS_:
0000ac   010f     movlb   0xf              	BANKSEL	_currentTime
                                           ;	.line	193; testint.c	if(currentTime[6]=='6'){
0000ae   5151     movf    0x51, 0, 0x1     	MOVF	_currentTime, W, B
0000b0   0f06     addlw   0x6              	ADDLW	0x06
0000b2   6e00     movwf   0, 0             	MOVWF	r0x00
0000b4   0e00     movlw   0                	MOVLW	0x00
0000b6   010f     movlb   0xf              	BANKSEL	(_currentTime + 1)
0000b8   2152     addwfc  0x52, 0, 0x1     	ADDWFC	(_currentTime + 1), W, B
0000ba   6e01     movwf   0x1, 0           	MOVWF	r0x01
0000bc   0e00     movlw   0                	MOVLW	0x00
0000be   010f     movlb   0xf              	BANKSEL	(_currentTime + 2)
0000c0   2153     addwfc  0x53, 0, 0x1     	ADDWFC	(_currentTime + 2), W, B
0000c2   6e02     movwf   0x2, 0           	MOVWF	r0x02
0000c4   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
0000c6   ffe9
0000c8   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
0000ca   fff3
0000cc   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0000ce   eccb     call    0x1996, 0        	CALL	__gptrget1
0000d0   f00c
0000d2   6e03     movwf   0x3, 0           	MOVWF	r0x03
0000d4   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0000d6   0a36     xorlw   0x36             	XORLW	0x36
0000d8   e129     bnz     0x12c            	BNZ	_00249_DS_
                                           ;	.line	194; testint.c	currentTime[6]='0';
0000da   0e30     movlw   0x30             	MOVLW	0x30
0000dc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0000de   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
0000e0   ffe9
0000e2   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
0000e4   fff3
0000e6   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0000e8   ecf6     call    0x19ec, 0        	CALL	__gptrput1
0000ea   f00c
0000ec   010f     movlb   0xf              	BANKSEL	_currentTime
                                           ;	.line	195; testint.c	currentTime[4]++;
0000ee   5151     movf    0x51, 0, 0x1     	MOVF	_currentTime, W, B
0000f0   0f04     addlw   0x4              	ADDLW	0x04
0000f2   6e00     movwf   0, 0             	MOVWF	r0x00
0000f4   0e00     movlw   0                	MOVLW	0x00
0000f6   010f     movlb   0xf              	BANKSEL	(_currentTime + 1)
0000f8   2152     addwfc  0x52, 0, 0x1     	ADDWFC	(_currentTime + 1), W, B
0000fa   6e01     movwf   0x1, 0           	MOVWF	r0x01
0000fc   0e00     movlw   0                	MOVLW	0x00
0000fe   010f     movlb   0xf              	BANKSEL	(_currentTime + 2)
000100   2153     addwfc  0x53, 0, 0x1     	ADDWFC	(_currentTime + 2), W, B
000102   6e02     movwf   0x2, 0           	MOVWF	r0x02
000104   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000106   ffe9
000108   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
00010a   fff3
00010c   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00010e   eccb     call    0x1996, 0        	CALL	__gptrget1
000110   f00c
000112   6e03     movwf   0x3, 0           	MOVWF	r0x03
000114   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
000116   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000118   ffe5
00011a   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
00011c   ffe9
00011e   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
000120   fff3
000122   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000124   ecf6     call    0x19ec, 0        	CALL	__gptrput1
000126   f00c
                                           ;	.line	196; testint.c	alarm();
000128   ec33     call    0xe66, 0         	CALL	_alarm
00012a   f007
                                           _00249_DS_:
00012c   010f     movlb   0xf              	BANKSEL	_currentTime
                                           ;	.line	198; testint.c	if(currentTime[4] == ':'){
00012e   5151     movf    0x51, 0, 0x1     	MOVF	_currentTime, W, B
000130   0f04     addlw   0x4              	ADDLW	0x04
000132   6e00     movwf   0, 0             	MOVWF	r0x00
000134   0e00     movlw   0                	MOVLW	0x00
000136   010f     movlb   0xf              	BANKSEL	(_currentTime + 1)
000138   2152     addwfc  0x52, 0, 0x1     	ADDWFC	(_currentTime + 1), W, B
00013a   6e01     movwf   0x1, 0           	MOVWF	r0x01
00013c   0e00     movlw   0                	MOVLW	0x00
00013e   010f     movlb   0xf              	BANKSEL	(_currentTime + 2)
000140   2153     addwfc  0x53, 0, 0x1     	ADDWFC	(_currentTime + 2), W, B
000142   6e02     movwf   0x2, 0           	MOVWF	r0x02
000144   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000146   ffe9
000148   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
00014a   fff3
00014c   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00014e   eccb     call    0x1996, 0        	CALL	__gptrget1
000150   f00c
000152   6e03     movwf   0x3, 0           	MOVWF	r0x03
000154   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000156   0a3a     xorlw   0x3a             	XORLW	0x3a
000158   e127     bnz     0x1a8            	BNZ	_00251_DS_
                                           ;	.line	199; testint.c	currentTime[4] = '0';
00015a   0e30     movlw   0x30             	MOVLW	0x30
00015c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00015e   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000160   ffe9
000162   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
000164   fff3
000166   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000168   ecf6     call    0x19ec, 0        	CALL	__gptrput1
00016a   f00c
00016c   010f     movlb   0xf              	BANKSEL	_currentTime
                                           ;	.line	200; testint.c	++currentTime[3];
00016e   5151     movf    0x51, 0, 0x1     	MOVF	_currentTime, W, B
000170   0f03     addlw   0x3              	ADDLW	0x03
000172   6e00     movwf   0, 0             	MOVWF	r0x00
000174   0e00     movlw   0                	MOVLW	0x00
000176   010f     movlb   0xf              	BANKSEL	(_currentTime + 1)
000178   2152     addwfc  0x52, 0, 0x1     	ADDWFC	(_currentTime + 1), W, B
00017a   6e01     movwf   0x1, 0           	MOVWF	r0x01
00017c   0e00     movlw   0                	MOVLW	0x00
00017e   010f     movlb   0xf              	BANKSEL	(_currentTime + 2)
000180   2153     addwfc  0x53, 0, 0x1     	ADDWFC	(_currentTime + 2), W, B
000182   6e02     movwf   0x2, 0           	MOVWF	r0x02
000184   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000186   ffe9
000188   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
00018a   fff3
00018c   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00018e   eccb     call    0x1996, 0        	CALL	__gptrget1
000190   f00c
000192   6e03     movwf   0x3, 0           	MOVWF	r0x03
000194   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
000196   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000198   ffe5
00019a   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
00019c   ffe9
00019e   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
0001a0   fff3
0001a2   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0001a4   ecf6     call    0x19ec, 0        	CALL	__gptrput1
0001a6   f00c
                                           _00251_DS_:
0001a8   010f     movlb   0xf              	BANKSEL	_currentTime
                                           ;	.line	202; testint.c	if(currentTime[3]=='6'){
0001aa   5151     movf    0x51, 0, 0x1     	MOVF	_currentTime, W, B
0001ac   0f03     addlw   0x3              	ADDLW	0x03
0001ae   6e00     movwf   0, 0             	MOVWF	r0x00
0001b0   0e00     movlw   0                	MOVLW	0x00
0001b2   010f     movlb   0xf              	BANKSEL	(_currentTime + 1)
0001b4   2152     addwfc  0x52, 0, 0x1     	ADDWFC	(_currentTime + 1), W, B
0001b6   6e01     movwf   0x1, 0           	MOVWF	r0x01
0001b8   0e00     movlw   0                	MOVLW	0x00
0001ba   010f     movlb   0xf              	BANKSEL	(_currentTime + 2)
0001bc   2153     addwfc  0x53, 0, 0x1     	ADDWFC	(_currentTime + 2), W, B
0001be   6e02     movwf   0x2, 0           	MOVWF	r0x02
0001c0   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
0001c2   ffe9
0001c4   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
0001c6   fff3
0001c8   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0001ca   eccb     call    0x1996, 0        	CALL	__gptrget1
0001cc   f00c
0001ce   6e03     movwf   0x3, 0           	MOVWF	r0x03
0001d0   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0001d2   0a36     xorlw   0x36             	XORLW	0x36
0001d4   e127     bnz     0x224            	BNZ	_00253_DS_
                                           ;	.line	203; testint.c	currentTime[3]='0';
0001d6   0e30     movlw   0x30             	MOVLW	0x30
0001d8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0001da   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
0001dc   ffe9
0001de   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
0001e0   fff3
0001e2   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0001e4   ecf6     call    0x19ec, 0        	CALL	__gptrput1
0001e6   f00c
0001e8   010f     movlb   0xf              	BANKSEL	_currentTime
                                           ;	.line	204; testint.c	currentTime[1]++;
0001ea   5151     movf    0x51, 0, 0x1     	MOVF	_currentTime, W, B
0001ec   0f01     addlw   0x1              	ADDLW	0x01
0001ee   6e00     movwf   0, 0             	MOVWF	r0x00
0001f0   0e00     movlw   0                	MOVLW	0x00
0001f2   010f     movlb   0xf              	BANKSEL	(_currentTime + 1)
0001f4   2152     addwfc  0x52, 0, 0x1     	ADDWFC	(_currentTime + 1), W, B
0001f6   6e01     movwf   0x1, 0           	MOVWF	r0x01
0001f8   0e00     movlw   0                	MOVLW	0x00
0001fa   010f     movlb   0xf              	BANKSEL	(_currentTime + 2)
0001fc   2153     addwfc  0x53, 0, 0x1     	ADDWFC	(_currentTime + 2), W, B
0001fe   6e02     movwf   0x2, 0           	MOVWF	r0x02
000200   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000202   ffe9
000204   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
000206   fff3
000208   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00020a   eccb     call    0x1996, 0        	CALL	__gptrget1
00020c   f00c
00020e   6e03     movwf   0x3, 0           	MOVWF	r0x03
000210   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
000212   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000214   ffe5
000216   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000218   ffe9
00021a   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
00021c   fff3
00021e   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000220   ecf6     call    0x19ec, 0        	CALL	__gptrput1
000222   f00c
                                           _00253_DS_:
000224   010f     movlb   0xf              	BANKSEL	_currentTime
                                           ;	.line	206; testint.c	if(currentTime[1] == ':'){
000226   5151     movf    0x51, 0, 0x1     	MOVF	_currentTime, W, B
000228   0f01     addlw   0x1              	ADDLW	0x01
00022a   6e00     movwf   0, 0             	MOVWF	r0x00
00022c   0e00     movlw   0                	MOVLW	0x00
00022e   010f     movlb   0xf              	BANKSEL	(_currentTime + 1)
000230   2152     addwfc  0x52, 0, 0x1     	ADDWFC	(_currentTime + 1), W, B
000232   6e01     movwf   0x1, 0           	MOVWF	r0x01
000234   0e00     movlw   0                	MOVLW	0x00
000236   010f     movlb   0xf              	BANKSEL	(_currentTime + 2)
000238   2153     addwfc  0x53, 0, 0x1     	ADDWFC	(_currentTime + 2), W, B
00023a   6e02     movwf   0x2, 0           	MOVWF	r0x02
00023c   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
00023e   ffe9
000240   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
000242   fff3
000244   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000246   eccb     call    0x1996, 0        	CALL	__gptrget1
000248   f00c
00024a   6e03     movwf   0x3, 0           	MOVWF	r0x03
00024c   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00024e   0a3a     xorlw   0x3a             	XORLW	0x3a
000250   e121     bnz     0x294            	BNZ	_00255_DS_
                                           ;	.line	207; testint.c	currentTime[1] = '0';
000252   0e30     movlw   0x30             	MOVLW	0x30
000254   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000256   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000258   ffe9
00025a   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
00025c   fff3
00025e   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000260   ecf6     call    0x19ec, 0        	CALL	__gptrput1
000262   f00c
                                           ;	.line	208; testint.c	++currentTime[0];
000264   cf51     movff   0xf51, 0x3       	MOVFF	_currentTime, r0x03
000266   f003
000268   cf52     movff   0xf52, 0x4       	MOVFF	(_currentTime + 1), r0x04
00026a   f004
00026c   cf53     movff   0xf53, 0x5       	MOVFF	(_currentTime + 2), r0x05
00026e   f005
000270   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
000272   ffe9
000274   c004     movff   0x4, 0xff3       	MOVFF	r0x04, PRODL
000276   fff3
000278   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
00027a   eccb     call    0x1996, 0        	CALL	__gptrget1
00027c   f00c
00027e   6e06     movwf   0x6, 0           	MOVWF	r0x06
000280   2a06     incf    0x6, 0x1, 0      	INCF	r0x06, F
000282   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
000284   ffe5
000286   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
000288   ffe9
00028a   c004     movff   0x4, 0xff3       	MOVFF	r0x04, PRODL
00028c   fff3
00028e   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000290   ecf6     call    0x19ec, 0        	CALL	__gptrput1
000292   f00c
                                           _00255_DS_:
                                           ;	.line	210; testint.c	if(currentTime[0]=='2' && currentTime[1]=='4'){
000294   cf51     movff   0xf51, 0x3       	MOVFF	_currentTime, r0x03
000296   f003
000298   cf52     movff   0xf52, 0x4       	MOVFF	(_currentTime + 1), r0x04
00029a   f004
00029c   cf53     movff   0xf53, 0x5       	MOVFF	(_currentTime + 2), r0x05
00029e   f005
0002a0   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
0002a2   ffe9
0002a4   c004     movff   0x4, 0xff3       	MOVFF	r0x04, PRODL
0002a6   fff3
0002a8   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0002aa   eccb     call    0x1996, 0        	CALL	__gptrget1
0002ac   f00c
0002ae   6e03     movwf   0x3, 0           	MOVWF	r0x03
0002b0   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0002b2   0a32     xorlw   0x32             	XORLW	0x32
0002b4   e123     bnz     0x2fc            	BNZ	_00257_DS_
0002b6   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
0002b8   ffe9
0002ba   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
0002bc   fff3
0002be   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0002c0   eccb     call    0x1996, 0        	CALL	__gptrget1
0002c2   f00c
0002c4   6e03     movwf   0x3, 0           	MOVWF	r0x03
0002c6   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0002c8   0a34     xorlw   0x34             	XORLW	0x34
0002ca   e118     bnz     0x2fc            	BNZ	_00257_DS_
                                           ;	.line	211; testint.c	currentTime[0]='0';
0002cc   cf51     movff   0xf51, 0x3       	MOVFF	_currentTime, r0x03
0002ce   f003
0002d0   cf52     movff   0xf52, 0x4       	MOVFF	(_currentTime + 1), r0x04
0002d2   f004
0002d4   cf53     movff   0xf53, 0x5       	MOVFF	(_currentTime + 2), r0x05
0002d6   f005
0002d8   0e30     movlw   0x30             	MOVLW	0x30
0002da   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0002dc   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
0002de   ffe9
0002e0   c004     movff   0x4, 0xff3       	MOVFF	r0x04, PRODL
0002e2   fff3
0002e4   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0002e6   ecf6     call    0x19ec, 0        	CALL	__gptrput1
0002e8   f00c
                                           ;	.line	212; testint.c	currentTime[1]='0';
0002ea   0e30     movlw   0x30             	MOVLW	0x30
0002ec   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0002ee   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
0002f0   ffe9
0002f2   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
0002f4   fff3
0002f6   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0002f8   ecf6     call    0x19ec, 0        	CALL	__gptrput1
0002fa   f00c
                                           _00257_DS_:
                                           ;	.line	214; testint.c	if(currentTime[0]=='3'){
0002fc   cf51     movff   0xf51, 0         	MOVFF	_currentTime, r0x00
0002fe   f000
000300   cf52     movff   0xf52, 0x1       	MOVFF	(_currentTime + 1), r0x01
000302   f001
000304   cf53     movff   0xf53, 0x2       	MOVFF	(_currentTime + 2), r0x02
000306   f002
000308   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
00030a   ffe9
00030c   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
00030e   fff3
000310   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000312   eccb     call    0x1996, 0        	CALL	__gptrget1
000314   f00c
000316   6e00     movwf   0, 0             	MOVWF	r0x00
000318   5000     movf    0, 0, 0          	MOVF	r0x00, W
00031a   0a33     xorlw   0x33             	XORLW	0x33
00031c   e10f     bnz     0x33c            	BNZ	_00261_DS_
                                           ;	.line	215; testint.c	currentTime[0]='0';
00031e   cf51     movff   0xf51, 0         	MOVFF	_currentTime, r0x00
000320   f000
000322   cf52     movff   0xf52, 0x1       	MOVFF	(_currentTime + 1), r0x01
000324   f001
000326   cf53     movff   0xf53, 0x2       	MOVFF	(_currentTime + 2), r0x02
000328   f002
00032a   0e30     movlw   0x30             	MOVLW	0x30
00032c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00032e   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000330   ffe9
000332   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
000334   fff3
000336   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000338   ecf6     call    0x19ec, 0        	CALL	__gptrput1
00033a   f00c
                                           _00261_DS_:
00033c   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
00033e   f006
000340   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
000342   f005
000344   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
000346   f004
000348   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
00034a   f003
00034c   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
00034e   f002
000350   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000352   f001
000354   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000356   f000
000358   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00035a   ffd9
00035c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__alarm	code
                                           _alarm:
                                           ;	.line	165; testint.c	void alarm(){
000e66   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000e68   ffe5
000e6a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000e6c   ffd9
000e6e   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000e70   ffe5
000e72   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000e74   ffe5
000e76   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000e78   ffe5
000e7a   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000e7c   ffe5
000e7e   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
000e80   ffe5
000e82   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
000e84   ffe5
000e86   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
000e88   ffe5
                                           ;	.line	166; testint.c	int blink = 1;
000e8a   0e01     movlw   0x1              	MOVLW	0x01
000e8c   6e00     movwf   0, 0             	MOVWF	r0x00
000e8e   6a01     clrf    0x1, 0           	CLRF	r0x01
                                           ;	.line	170; testint.c	for(i; i<5; i++){
000e90   6a02     clrf    0x2, 0           	CLRF	r0x02
000e92   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00214_DS_:
000e94   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000e96   0f80     addlw   0x80             	ADDLW	0x80
000e98   0f80     addlw   0x80             	ADDLW	0x80
000e9a   e102     bnz     0xea0            	BNZ	_00238_DS_
000e9c   0e05     movlw   0x5              	MOVLW	0x05
000e9e   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
                                           _00238_DS_:
000ea0   e22c     bc      0xefa            	BC	_00217_DS_
                                           ;	.line	171; testint.c	if(currentTime[i]!=time[i]){
000ea2   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000ea4   010f     movlb   0xf              	BANKSEL	_currentTime
000ea6   2551     addwf   0x51, 0, 0x1     	ADDWF	_currentTime, W, B
000ea8   6e04     movwf   0x4, 0           	MOVWF	r0x04
000eaa   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000eac   010f     movlb   0xf              	BANKSEL	(_currentTime + 1)
000eae   2152     addwfc  0x52, 0, 0x1     	ADDWFC	(_currentTime + 1), W, B
000eb0   6e05     movwf   0x5, 0           	MOVWF	r0x05
000eb2   6ae8     clrf    0xe8, 0          	CLRF	WREG
000eb4   be03     btfsc   0x3, 0x7, 0      	BTFSC	r0x03, 7
000eb6   68e8     setf    0xe8, 0          	SETF	WREG
000eb8   010f     movlb   0xf              	BANKSEL	(_currentTime + 2)
000eba   2153     addwfc  0x53, 0, 0x1     	ADDWFC	(_currentTime + 2), W, B
000ebc   6e06     movwf   0x6, 0           	MOVWF	r0x06
000ebe   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
000ec0   ffe9
000ec2   c005     movff   0x5, 0xff3       	MOVFF	r0x05, PRODL
000ec4   fff3
000ec6   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000ec8   eccb     call    0x1996, 0        	CALL	__gptrget1
000eca   f00c
000ecc   6e04     movwf   0x4, 0           	MOVWF	r0x04
000ece   0e41     movlw   0x41             	MOVLW	LOW(_time)
000ed0   2402     addwf   0x2, 0, 0        	ADDWF	r0x02, W
000ed2   6e05     movwf   0x5, 0           	MOVWF	r0x05
000ed4   0e0f     movlw   0xf              	MOVLW	HIGH(_time)
000ed6   2003     addwfc  0x3, 0, 0        	ADDWFC	r0x03, W
000ed8   6e06     movwf   0x6, 0           	MOVWF	r0x06
000eda   c005     movff   0x5, 0xfe9       	MOVFF	r0x05, FSR0L
000edc   ffe9
000ede   c006     movff   0x6, 0xfea       	MOVFF	r0x06, FSR0H
000ee0   ffea
000ee2   cfef     movff   0xfef, 0x5       	MOVFF	INDF0, r0x05
000ee4   f005
000ee6   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000ee8   1805     xorwf   0x5, 0, 0        	XORWF	r0x05, W
000eea   e003     bz      0xef2            	BZ	_00216_DS_
                                           ;	.line	172; testint.c	blink = 0;
000eec   6a00     clrf    0, 0             	CLRF	r0x00
000eee   6a01     clrf    0x1, 0           	CLRF	r0x01
                                           ;	.line	173; testint.c	break;
000ef0   d004     bra     0xefa            	BRA	_00217_DS_
                                           _00216_DS_:
                                           ;	.line	170; testint.c	for(i; i<5; i++){
000ef2   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
000ef4   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
000ef6   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
000ef8   d7cd     bra     0xe94            	BRA	_00214_DS_
                                           _00217_DS_:
                                           ;	.line	176; testint.c	if(blink){
000efa   5000     movf    0, 0, 0          	MOVF	r0x00, W
000efc   1001     iorwf   0x1, 0, 0        	IORWF	r0x01, W
000efe   b4d8     btfsc   0xd8, 0x2, 0     	BTFSC	STATUS, 2
000f00   d03d     bra     0xf7c            	BRA	_00227_DS_
                                           ;	.line	177; testint.c	for(j; j<10; j++){
000f02   6a00     clrf    0, 0             	CLRF	r0x00
000f04   6a01     clrf    0x1, 0           	CLRF	r0x01
                                           _00223_DS_:
000f06   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000f08   0f80     addlw   0x80             	ADDLW	0x80
000f0a   0f80     addlw   0x80             	ADDLW	0x80
000f0c   e102     bnz     0xf12            	BNZ	_00241_DS_
000f0e   0e0a     movlw   0xa              	MOVLW	0x0a
000f10   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
                                           _00241_DS_:
000f12   e227     bc      0xf62            	BC	_00226_DS_
                                           ;	.line	179; testint.c	LED1_IO ^=1;
000f14   6a02     clrf    0x2, 0           	CLRF	r0x02
000f16   b291     btfsc   0x91, 0x1, 0     	BTFSC	_LATJbits, 1
000f18   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
000f1a   0e01     movlw   0x1              	MOVLW	0x01
000f1c   1a02     xorwf   0x2, 0x1, 0      	XORWF	r0x02, F
000f1e   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000f20   0b01     andlw   0x1              	ANDLW	0x01
000f22   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
000f24   6ef4     movwf   0xf4, 0          	MOVWF	PRODH
000f26   5091     movf    0x91, 0, 0       	MOVF	_LATJbits, W
000f28   0bfd     andlw   0xfd             	ANDLW	0xfd
000f2a   10f4     iorwf   0xf4, 0, 0       	IORWF	PRODH, W
000f2c   6e91     movwf   0x91, 0          	MOVWF	_LATJbits
                                           ;	.line	180; testint.c	for(k=0;k<10;k++) 
000f2e   0e0a     movlw   0xa              	MOVLW	0x0a
000f30   6e02     movwf   0x2, 0           	MOVWF	r0x02
000f32   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00222_DS_:
                                           ;	.line	181; testint.c	display_string(0,"wake up");
000f34   0e00     movlw   0                	MOVLW	UPPER(__str_0)
000f36   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000f38   0e05     movlw   0x5              	MOVLW	HIGH(__str_0)
000f3a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000f3c   0edc     movlw   0xdc             	MOVLW	LOW(__str_0)
000f3e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000f40   0e00     movlw   0                	MOVLW	0x00
000f42   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000f44   ec7d     call    0x12fa, 0        	CALL	_display_string
000f46   f009
000f48   0e04     movlw   0x4              	MOVLW	0x04
000f4a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
000f4c   0eff     movlw   0xff             	MOVLW	0xff
000f4e   2602     addwf   0x2, 0x1, 0      	ADDWF	r0x02, F
000f50   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
000f52   0603     decf    0x3, 0x1, 0      	DECF	r0x03, F
                                           ;	.line	180; testint.c	for(k=0;k<10;k++) 
000f54   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000f56   1003     iorwf   0x3, 0, 0        	IORWF	r0x03, W
000f58   e1ed     bnz     0xf34            	BNZ	_00222_DS_
                                           ;	.line	177; testint.c	for(j; j<10; j++){
000f5a   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000f5c   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
000f5e   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
000f60   d7d2     bra     0xf06            	BRA	_00223_DS_
                                           _00226_DS_:
                                           ;	.line	184; testint.c	LED1_IO ^=1;
000f62   6a00     clrf    0, 0             	CLRF	r0x00
000f64   b291     btfsc   0x91, 0x1, 0     	BTFSC	_LATJbits, 1
000f66   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000f68   0e01     movlw   0x1              	MOVLW	0x01
000f6a   1a00     xorwf   0, 0x1, 0        	XORWF	r0x00, F
000f6c   5000     movf    0, 0, 0          	MOVF	r0x00, W
000f6e   0b01     andlw   0x1              	ANDLW	0x01
000f70   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
000f72   6ef4     movwf   0xf4, 0          	MOVWF	PRODH
000f74   5091     movf    0x91, 0, 0       	MOVF	_LATJbits, W
000f76   0bfd     andlw   0xfd             	ANDLW	0xfd
000f78   10f4     iorwf   0xf4, 0, 0       	IORWF	PRODH, W
000f7a   6e91     movwf   0x91, 0          	MOVWF	_LATJbits
                                           _00227_DS_:
000f7c   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
000f7e   f006
000f80   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
000f82   f005
000f84   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
000f86   f004
000f88   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
000f8a   f003
000f8c   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000f8e   f002
000f90   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000f92   f001
000f94   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000f96   f000
000f98   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000f9a   ffd9
000f9c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__increment_time	code
                                           _increment_time:
                                           ;	.line	141; testint.c	void increment_time(){
0013d0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0013d2   ffe5
0013d4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0013d6   ffd9
0013d8   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0013da   ffe5
0013dc   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0013de   ffe5
0013e0   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0013e2   ffe5
                                           ;	.line	142; testint.c	time[position]++;
0013e4   0e41     movlw   0x41             	MOVLW	LOW(_time)
0013e6   010f     movlb   0xf              	BANKSEL	_position
0013e8   2554     addwf   0x54, 0, 0x1     	ADDWF	_position, W, B
0013ea   6e00     movwf   0, 0             	MOVWF	r0x00
0013ec   0e0f     movlw   0xf              	MOVLW	HIGH(_time)
0013ee   010f     movlb   0xf              	BANKSEL	(_position + 1)
0013f0   2155     addwfc  0x55, 0, 0x1     	ADDWFC	(_position + 1), W, B
0013f2   6e01     movwf   0x1, 0           	MOVWF	r0x01
0013f4   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
0013f6   ffe9
0013f8   c001     movff   0x1, 0xfea       	MOVFF	r0x01, FSR0H
0013fa   ffea
0013fc   cfef     movff   0xfef, 0x2       	MOVFF	INDF0, r0x02
0013fe   f002
001400   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
001402   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
001404   ffe9
001406   c001     movff   0x1, 0xfea       	MOVFF	r0x01, FSR0H
001408   ffea
00140a   c002     movff   0x2, 0xfef       	MOVFF	r0x02, INDF0
00140c   ffef
00140e   010f     movlb   0xf              	BANKSEL	(_time + 4)
                                           ;	.line	143; testint.c	if(time[4] == ':'){
001410   5145     movf    0x45, 0, 0x1     	MOVF	(_time + 4), W, B
001412   0a3a     xorlw   0x3a             	XORLW	0x3a
001414   e109     bnz     0x1428           	BNZ	_00177_DS_
                                           ;	.line	144; testint.c	time[4] = '0';
001416   0e30     movlw   0x30             	MOVLW	0x30
001418   010f     movlb   0xf              	BANKSEL	(_time + 4)
00141a   6f45     movwf   0x45, 0x1        	MOVWF	(_time + 4), B
00141c   010f     movlb   0xf              	BANKSEL	(_time + 3)
                                           ;	.line	145; testint.c	++time[3];
00141e   2944     incf    0x44, 0, 0x1     	INCF	(_time + 3), W, B
001420   6e00     movwf   0, 0             	MOVWF	r0x00
001422   5000     movf    0, 0, 0          	MOVF	r0x00, W
001424   010f     movlb   0xf              	BANKSEL	(_time + 3)
001426   6f44     movwf   0x44, 0x1        	MOVWF	(_time + 3), B
                                           _00177_DS_:
001428   010f     movlb   0xf              	BANKSEL	(_time + 3)
                                           ;	.line	147; testint.c	if(time[3]=='6'){
00142a   5144     movf    0x44, 0, 0x1     	MOVF	(_time + 3), W, B
00142c   0a36     xorlw   0x36             	XORLW	0x36
00142e   e109     bnz     0x1442           	BNZ	_00179_DS_
                                           ;	.line	148; testint.c	time[3]='0';
001430   0e30     movlw   0x30             	MOVLW	0x30
001432   010f     movlb   0xf              	BANKSEL	(_time + 3)
001434   6f44     movwf   0x44, 0x1        	MOVWF	(_time + 3), B
                                           ;	.line	149; testint.c	time[1]++;
001436   cf42     movff   0xf42, 0         	MOVFF	(_time + 1), r0x00
001438   f000
00143a   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
00143c   5000     movf    0, 0, 0          	MOVF	r0x00, W
00143e   010f     movlb   0xf              	BANKSEL	(_time + 1)
001440   6f42     movwf   0x42, 0x1        	MOVWF	(_time + 1), B
                                           _00179_DS_:
                                           ;	.line	151; testint.c	if(time[1] == ':'){
001442   cf42     movff   0xf42, 0         	MOVFF	(_time + 1), r0x00
001444   f000
001446   5000     movf    0, 0, 0          	MOVF	r0x00, W
001448   0a3a     xorlw   0x3a             	XORLW	0x3a
00144a   e10a     bnz     0x1460           	BNZ	_00187_DS_
                                           ;	.line	152; testint.c	time[1] = '0';
00144c   0e30     movlw   0x30             	MOVLW	0x30
00144e   010f     movlb   0xf              	BANKSEL	(_time + 1)
001450   6f42     movwf   0x42, 0x1        	MOVWF	(_time + 1), B
001452   010f     movlb   0xf              	BANKSEL	_time
                                           ;	.line	153; testint.c	++time[0];
001454   2941     incf    0x41, 0, 0x1     	INCF	_time, W, B
001456   6e01     movwf   0x1, 0           	MOVWF	r0x01
001458   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00145a   010f     movlb   0xf              	BANKSEL	_time
00145c   6f41     movwf   0x41, 0x1        	MOVWF	_time, B
00145e   d016     bra     0x148c           	BRA	_00189_DS_
                                           _00187_DS_:
                                           ;	.line	155; testint.c	else if(time[0]=='2' && time[1]>='4'){
001460   cf41     movff   0xf41, 0x1       	MOVFF	_time, r0x01
001462   f001
001464   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001466   0a32     xorlw   0x32             	XORLW	0x32
001468   e10b     bnz     0x1480           	BNZ	_00183_DS_
00146a   5000     movf    0, 0, 0          	MOVF	r0x00, W
00146c   0f80     addlw   0x80             	ADDLW	0x80
00146e   0f4c     addlw   0x4c             	ADDLW	0x4c
001470   e307     bnc     0x1480           	BNC	_00183_DS_
                                           ;	.line	156; testint.c	time[0]='0';
001472   0e30     movlw   0x30             	MOVLW	0x30
001474   010f     movlb   0xf              	BANKSEL	_time
001476   6f41     movwf   0x41, 0x1        	MOVWF	_time, B
                                           ;	.line	157; testint.c	time[1]='0';
001478   0e30     movlw   0x30             	MOVLW	0x30
00147a   010f     movlb   0xf              	BANKSEL	(_time + 1)
00147c   6f42     movwf   0x42, 0x1        	MOVWF	(_time + 1), B
00147e   d006     bra     0x148c           	BRA	_00189_DS_
                                           _00183_DS_:
                                           ;	.line	159; testint.c	else if(time[0]=='3'){
001480   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001482   0a33     xorlw   0x33             	XORLW	0x33
001484   e103     bnz     0x148c           	BNZ	_00189_DS_
                                           ;	.line	160; testint.c	time[0]='0';
001486   0e30     movlw   0x30             	MOVLW	0x30
001488   010f     movlb   0xf              	BANKSEL	_time
00148a   6f41     movwf   0x41, 0x1        	MOVWF	_time, B
                                           _00189_DS_:
00148c   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
00148e   f002
001490   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001492   f001
001494   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
001496   f000
001498   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00149a   ffd9
00149c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_testint__high_isr	code
                                           _high_isr:
                                           ;	.line	37; testint.c	void high_isr (void) __interrupt 1
00035e   cfe8     movff   0xfe8, 0xfe5     	MOVFF	WREG, POSTDEC1
000360   ffe5
000362   cfd8     movff   0xfd8, 0xfe5     	MOVFF	STATUS, POSTDEC1
000364   ffe5
000366   cfe0     movff   0xfe0, 0xfe5     	MOVFF	BSR, POSTDEC1
000368   ffe5
00036a   cff3     movff   0xff3, 0xfe5     	MOVFF	PRODL, POSTDEC1
00036c   ffe5
00036e   cff4     movff   0xff4, 0xfe5     	MOVFF	PRODH, POSTDEC1
000370   ffe5
000372   cfe9     movff   0xfe9, 0xfe5     	MOVFF	FSR0L, POSTDEC1
000374   ffe5
000376   cfea     movff   0xfea, 0xfe5     	MOVFF	FSR0H, POSTDEC1
000378   ffe5
00037a   cffa     movff   0xffa, 0xfe5     	MOVFF	PCLATH, POSTDEC1
00037c   ffe5
00037e   cffb     movff   0xffb, 0xfe5     	MOVFF	PCLATU, POSTDEC1
000380   ffe5
000382   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000384   ffe5
000386   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000388   ffd9
00038a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00038c   ffe5
00038e   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000390   ffe5
000392   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000394   ffe5
000396   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000398   ffe5
                                           ;	.line	40; testint.c	if (INT3F)
00039a   a4f0     btfss   0xf0, 0x2, 0     	BTFSS	_INTCON3bits, 2
00039c   d081     bra     0x4a0            	BRA	_00117_DS_
00039e   010f     movlb   0xf              	BANKSEL	(_position + 1)
                                           ;	.line	42; testint.c	if(position<2 || (position>2 && position<5))
0003a0   5155     movf    0x55, 0, 0x1     	MOVF	(_position + 1), W, B
0003a2   0f80     addlw   0x80             	ADDLW	0x80
0003a4   0f80     addlw   0x80             	ADDLW	0x80
0003a6   e103     bnz     0x3ae            	BNZ	_00138_DS_
0003a8   0e02     movlw   0x2              	MOVLW	0x02
0003aa   010f     movlb   0xf              	BANKSEL	_position
0003ac   5d54     subwf   0x54, 0, 0x1     	SUBWF	_position, W, B
                                           _00138_DS_:
0003ae   e312     bnc     0x3d4            	BNC	_00105_DS_
0003b0   010f     movlb   0xf              	BANKSEL	(_position + 1)
0003b2   5155     movf    0x55, 0, 0x1     	MOVF	(_position + 1), W, B
0003b4   0f80     addlw   0x80             	ADDLW	0x80
0003b6   0f80     addlw   0x80             	ADDLW	0x80
0003b8   e103     bnz     0x3c0            	BNZ	_00139_DS_
0003ba   0e03     movlw   0x3              	MOVLW	0x03
0003bc   010f     movlb   0xf              	BANKSEL	_position
0003be   5d54     subwf   0x54, 0, 0x1     	SUBWF	_position, W, B
                                           _00139_DS_:
0003c0   e30b     bnc     0x3d8            	BNC	_00106_DS_
0003c2   010f     movlb   0xf              	BANKSEL	(_position + 1)
0003c4   5155     movf    0x55, 0, 0x1     	MOVF	(_position + 1), W, B
0003c6   0f80     addlw   0x80             	ADDLW	0x80
0003c8   0f80     addlw   0x80             	ADDLW	0x80
0003ca   e103     bnz     0x3d2            	BNZ	_00140_DS_
0003cc   0e05     movlw   0x5              	MOVLW	0x05
0003ce   010f     movlb   0xf              	BANKSEL	_position
0003d0   5d54     subwf   0x54, 0, 0x1     	SUBWF	_position, W, B
                                           _00140_DS_:
0003d2   e202     bc      0x3d8            	BC	_00106_DS_
                                           _00105_DS_:
                                           ;	.line	43; testint.c	increment_time();
0003d4   ece8     call    0x13d0, 0        	CALL	_increment_time
0003d6   f009
                                           _00106_DS_:
0003d8   010f     movlb   0xf              	BANKSEL	(_position + 1)
                                           ;	.line	45; testint.c	if((position>6 && position<9) || (position>9 && position<12) || (position>12 && position<15)){
0003da   5155     movf    0x55, 0, 0x1     	MOVF	(_position + 1), W, B
0003dc   0f80     addlw   0x80             	ADDLW	0x80
0003de   0f80     addlw   0x80             	ADDLW	0x80
0003e0   e103     bnz     0x3e8            	BNZ	_00141_DS_
0003e2   0e07     movlw   0x7              	MOVLW	0x07
0003e4   010f     movlb   0xf              	BANKSEL	_position
0003e6   5d54     subwf   0x54, 0, 0x1     	SUBWF	_position, W, B
                                           _00141_DS_:
0003e8   e309     bnc     0x3fc            	BNC	_00113_DS_
0003ea   010f     movlb   0xf              	BANKSEL	(_position + 1)
0003ec   5155     movf    0x55, 0, 0x1     	MOVF	(_position + 1), W, B
0003ee   0f80     addlw   0x80             	ADDLW	0x80
0003f0   0f80     addlw   0x80             	ADDLW	0x80
0003f2   e103     bnz     0x3fa            	BNZ	_00142_DS_
0003f4   0e09     movlw   0x9              	MOVLW	0x09
0003f6   010f     movlb   0xf              	BANKSEL	_position
0003f8   5d54     subwf   0x54, 0, 0x1     	SUBWF	_position, W, B
                                           _00142_DS_:
0003fa   e324     bnc     0x444            	BNC	_00109_DS_
                                           _00113_DS_:
0003fc   010f     movlb   0xf              	BANKSEL	(_position + 1)
0003fe   5155     movf    0x55, 0, 0x1     	MOVF	(_position + 1), W, B
000400   0f80     addlw   0x80             	ADDLW	0x80
000402   0f80     addlw   0x80             	ADDLW	0x80
000404   e103     bnz     0x40c            	BNZ	_00143_DS_
000406   0e0a     movlw   0xa              	MOVLW	0x0a
000408   010f     movlb   0xf              	BANKSEL	_position
00040a   5d54     subwf   0x54, 0, 0x1     	SUBWF	_position, W, B
                                           _00143_DS_:
00040c   e309     bnc     0x420            	BNC	_00115_DS_
00040e   010f     movlb   0xf              	BANKSEL	(_position + 1)
000410   5155     movf    0x55, 0, 0x1     	MOVF	(_position + 1), W, B
000412   0f80     addlw   0x80             	ADDLW	0x80
000414   0f80     addlw   0x80             	ADDLW	0x80
000416   e103     bnz     0x41e            	BNZ	_00144_DS_
000418   0e0c     movlw   0xc              	MOVLW	0x0c
00041a   010f     movlb   0xf              	BANKSEL	_position
00041c   5d54     subwf   0x54, 0, 0x1     	SUBWF	_position, W, B
                                           _00144_DS_:
00041e   e312     bnc     0x444            	BNC	_00109_DS_
                                           _00115_DS_:
000420   010f     movlb   0xf              	BANKSEL	(_position + 1)
000422   5155     movf    0x55, 0, 0x1     	MOVF	(_position + 1), W, B
000424   0f80     addlw   0x80             	ADDLW	0x80
000426   0f80     addlw   0x80             	ADDLW	0x80
000428   e103     bnz     0x430            	BNZ	_00145_DS_
00042a   0e0d     movlw   0xd              	MOVLW	0x0d
00042c   010f     movlb   0xf              	BANKSEL	_position
00042e   5d54     subwf   0x54, 0, 0x1     	SUBWF	_position, W, B
                                           _00145_DS_:
000430   e331     bnc     0x494            	BNC	_00110_DS_
000432   010f     movlb   0xf              	BANKSEL	(_position + 1)
000434   5155     movf    0x55, 0, 0x1     	MOVF	(_position + 1), W, B
000436   0f80     addlw   0x80             	ADDLW	0x80
000438   0f80     addlw   0x80             	ADDLW	0x80
00043a   e103     bnz     0x442            	BNZ	_00146_DS_
00043c   0e0f     movlw   0xf              	MOVLW	0x0f
00043e   010f     movlb   0xf              	BANKSEL	_position
000440   5d54     subwf   0x54, 0, 0x1     	SUBWF	_position, W, B
                                           _00146_DS_:
000442   e228     bc      0x494            	BC	_00110_DS_
                                           _00109_DS_:
000444   010f     movlb   0xf              	BANKSEL	_position
                                           ;	.line	46; testint.c	currentTime[position-7]++;
000446   5154     movf    0x54, 0, 0x1     	MOVF	_position, W, B
000448   0ff9     addlw   0xf9             	ADDLW	0xf9
00044a   6e00     movwf   0, 0             	MOVWF	r0x00
00044c   0eff     movlw   0xff             	MOVLW	0xff
00044e   010f     movlb   0xf              	BANKSEL	(_position + 1)
000450   2155     addwfc  0x55, 0, 0x1     	ADDWFC	(_position + 1), W, B
000452   6e01     movwf   0x1, 0           	MOVWF	r0x01
000454   6a02     clrf    0x2, 0           	CLRF	r0x02
000456   be01     btfsc   0x1, 0x7, 0      	BTFSC	r0x01, 7
000458   6802     setf    0x2, 0           	SETF	r0x02
00045a   010f     movlb   0xf              	BANKSEL	_currentTime
00045c   5151     movf    0x51, 0, 0x1     	MOVF	_currentTime, W, B
00045e   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
000460   010f     movlb   0xf              	BANKSEL	(_currentTime + 1)
000462   5152     movf    0x52, 0, 0x1     	MOVF	(_currentTime + 1), W, B
000464   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
000466   010f     movlb   0xf              	BANKSEL	(_currentTime + 2)
000468   5153     movf    0x53, 0, 0x1     	MOVF	(_currentTime + 2), W, B
00046a   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00046c   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
00046e   ffe9
000470   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
000472   fff3
000474   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000476   eccb     call    0x1996, 0        	CALL	__gptrget1
000478   f00c
00047a   6e03     movwf   0x3, 0           	MOVWF	r0x03
00047c   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
00047e   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000480   ffe5
000482   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000484   ffe9
000486   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
000488   fff3
00048a   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00048c   ecf6     call    0x19ec, 0        	CALL	__gptrput1
00048e   f00c
                                           ;	.line	47; testint.c	test_inc_current_time();
000490   ec06     call    0xc, 0           	CALL	_test_inc_current_time
000492   f000
                                           _00110_DS_:
                                           ;	.line	50; testint.c	INT3F = 0;
000494   94f0     bcf     0xf0, 0x2, 0     	BCF	_INTCON3bits, 2
                                           ;	.line	51; testint.c	refresh = 1;
000496   0e01     movlw   0x1              	MOVLW	0x01
000498   010f     movlb   0xf              	BANKSEL	_refresh
00049a   6f56     movwf   0x56, 0x1        	MOVWF	_refresh, B
00049c   010f     movlb   0xf              	BANKSEL	(_refresh + 1)
00049e   6b57     clrf    0x57, 0x1        	CLRF	(_refresh + 1), B
                                           _00117_DS_:
                                           ;	.line	54; testint.c	if ( INT1F ) {
0004a0   a0f0     btfss   0xf0, 0, 0       	BTFSS	_INTCON3bits, 0
0004a2   d025     bra     0x4ee            	BRA	_00121_DS_
                                           ;	.line	55; testint.c	LED2_IO ^= 1; 
0004a4   6a00     clrf    0, 0             	CLRF	r0x00
0004a6   b491     btfsc   0x91, 0x2, 0     	BTFSC	_LATJbits, 2
0004a8   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
0004aa   0e01     movlw   0x1              	MOVLW	0x01
0004ac   1a00     xorwf   0, 0x1, 0        	XORWF	r0x00, F
0004ae   5000     movf    0, 0, 0          	MOVF	r0x00, W
0004b0   0b01     andlw   0x1              	ANDLW	0x01
0004b2   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
0004b4   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
0004b6   6ef4     movwf   0xf4, 0          	MOVWF	PRODH
0004b8   5091     movf    0x91, 0, 0       	MOVF	_LATJbits, W
0004ba   0bfb     andlw   0xfb             	ANDLW	0xfb
0004bc   10f4     iorwf   0xf4, 0, 0       	IORWF	PRODH, W
0004be   6e91     movwf   0x91, 0          	MOVWF	_LATJbits
0004c0   010f     movlb   0xf              	BANKSEL	_position
                                           ;	.line	56; testint.c	position++;
0004c2   2b54     incf    0x54, 0x1, 0x1   	INCF	_position, F, B
0004c4   e302     bnc     0x4ca            	BNC	_10350_DS_
0004c6   010f     movlb   0xf              	BANKSEL	(_position + 1)
0004c8   2b55     incf    0x55, 0x1, 0x1   	INCF	(_position + 1), F, B
                                           _10350_DS_:
0004ca   010f     movlb   0xf              	BANKSEL	_position
                                           ;	.line	57; testint.c	if(position == 15){
0004cc   5154     movf    0x54, 0, 0x1     	MOVF	_position, W, B
0004ce   0a0f     xorlw   0xf              	XORLW	0x0f
0004d0   e103     bnz     0x4d8            	BNZ	_00148_DS_
0004d2   010f     movlb   0xf              	BANKSEL	(_position + 1)
0004d4   5155     movf    0x55, 0, 0x1     	MOVF	(_position + 1), W, B
0004d6   e001     bz      0x4da            	BZ	_00149_DS_
                                           _00148_DS_:
0004d8   d004     bra     0x4e2            	BRA	_00119_DS_
                                           _00149_DS_:
0004da   010f     movlb   0xf              	BANKSEL	_position
                                           ;	.line	58; testint.c	position = 0;
0004dc   6b54     clrf    0x54, 0x1        	CLRF	_position, B
0004de   010f     movlb   0xf              	BANKSEL	(_position + 1)
0004e0   6b55     clrf    0x55, 0x1        	CLRF	(_position + 1), B
                                           _00119_DS_:
                                           ;	.line	60; testint.c	refresh = 1;
0004e2   0e01     movlw   0x1              	MOVLW	0x01
0004e4   010f     movlb   0xf              	BANKSEL	_refresh
0004e6   6f56     movwf   0x56, 0x1        	MOVWF	_refresh, B
0004e8   010f     movlb   0xf              	BANKSEL	(_refresh + 1)
0004ea   6b57     clrf    0x57, 0x1        	CLRF	(_refresh + 1), B
                                           ;	.line	62; testint.c	INT1F  = 0;	
0004ec   90f0     bcf     0xf0, 0, 0       	BCF	_INTCON3bits, 0
                                           _00121_DS_:
                                           ;	.line	66; testint.c	if ( TMR0F ){        
0004ee   a4f2     btfss   0xf2, 0x2, 0     	BTFSS	_INTCONbits, 2
0004f0   d058     bra     0x5a2            	BRA	_00126_DS_
                                           ;	.line	67; testint.c	bres += 4096;  
0004f2   0e10     movlw   0x10             	MOVLW	0x10
0004f4   010f     movlb   0xf              	BANKSEL	(_bres + 1)
0004f6   2759     addwf   0x59, 0x1, 0x1   	ADDWF	(_bres + 1), F, B
0004f8   0e00     movlw   0                	MOVLW	0x00
0004fa   010f     movlb   0xf              	BANKSEL	(_bres + 2)
0004fc   235a     addwfc  0x5a, 0x1, 0x1   	ADDWFC	(_bres + 2), F, B
0004fe   0e00     movlw   0                	MOVLW	0x00
000500   010f     movlb   0xf              	BANKSEL	(_bres + 3)
000502   235b     addwfc  0x5b, 0x1, 0x1   	ADDWFC	(_bres + 3), F, B
                                           ;	.line	68; testint.c	if(bres >= 390625)
000504   0e00     movlw   0                	MOVLW	0x00
000506   010f     movlb   0xf              	BANKSEL	(_bres + 3)
000508   5d5b     subwf   0x5b, 0, 0x1     	SUBWF	(_bres + 3), W, B
00050a   e10b     bnz     0x522            	BNZ	_00150_DS_
00050c   0e05     movlw   0x5              	MOVLW	0x05
00050e   010f     movlb   0xf              	BANKSEL	(_bres + 2)
000510   5d5a     subwf   0x5a, 0, 0x1     	SUBWF	(_bres + 2), W, B
000512   e107     bnz     0x522            	BNZ	_00150_DS_
000514   0ef5     movlw   0xf5             	MOVLW	0xf5
000516   010f     movlb   0xf              	BANKSEL	(_bres + 1)
000518   5d59     subwf   0x59, 0, 0x1     	SUBWF	(_bres + 1), W, B
00051a   e103     bnz     0x522            	BNZ	_00150_DS_
00051c   0ee1     movlw   0xe1             	MOVLW	0xe1
00051e   010f     movlb   0xf              	BANKSEL	_bres
000520   5d58     subwf   0x58, 0, 0x1     	SUBWF	_bres, W, B
                                           _00150_DS_:
000522   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
000524   d038     bra     0x596            	BRA	_00123_DS_
                                           ;	.line	70; testint.c	bres -= 390625;	
000526   0e1f     movlw   0x1f             	MOVLW	0x1f
000528   010f     movlb   0xf              	BANKSEL	_bres
00052a   2758     addwf   0x58, 0x1, 0x1   	ADDWF	_bres, F, B
00052c   0e0a     movlw   0xa              	MOVLW	0x0a
00052e   010f     movlb   0xf              	BANKSEL	(_bres + 1)
000530   2359     addwfc  0x59, 0x1, 0x1   	ADDWFC	(_bres + 1), F, B
000532   0efa     movlw   0xfa             	MOVLW	0xfa
000534   010f     movlb   0xf              	BANKSEL	(_bres + 2)
000536   235a     addwfc  0x5a, 0x1, 0x1   	ADDWFC	(_bres + 2), F, B
000538   0eff     movlw   0xff             	MOVLW	0xff
00053a   010f     movlb   0xf              	BANKSEL	(_bres + 3)
00053c   235b     addwfc  0x5b, 0x1, 0x1   	ADDWFC	(_bres + 3), F, B
                                           ;	.line	71; testint.c	LED0_IO ^= 1;
00053e   6a00     clrf    0, 0             	CLRF	r0x00
000540   b091     btfsc   0x91, 0, 0       	BTFSC	_LATJbits, 0
000542   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000544   0e01     movlw   0x1              	MOVLW	0x01
000546   1a00     xorwf   0, 0x1, 0        	XORWF	r0x00, F
000548   5000     movf    0, 0, 0          	MOVF	r0x00, W
00054a   0b01     andlw   0x1              	ANDLW	0x01
00054c   6ef4     movwf   0xf4, 0          	MOVWF	PRODH
00054e   5091     movf    0x91, 0, 0       	MOVF	_LATJbits, W
000550   0bfe     andlw   0xfe             	ANDLW	0xfe
000552   10f4     iorwf   0xf4, 0, 0       	IORWF	PRODH, W
000554   6e91     movwf   0x91, 0          	MOVWF	_LATJbits
000556   010f     movlb   0xf              	BANKSEL	_currentTime
                                           ;	.line	72; testint.c	currentTime[7]++;
000558   5151     movf    0x51, 0, 0x1     	MOVF	_currentTime, W, B
00055a   0f07     addlw   0x7              	ADDLW	0x07
00055c   6e00     movwf   0, 0             	MOVWF	r0x00
00055e   0e00     movlw   0                	MOVLW	0x00
000560   010f     movlb   0xf              	BANKSEL	(_currentTime + 1)
000562   2152     addwfc  0x52, 0, 0x1     	ADDWFC	(_currentTime + 1), W, B
000564   6e01     movwf   0x1, 0           	MOVWF	r0x01
000566   0e00     movlw   0                	MOVLW	0x00
000568   010f     movlb   0xf              	BANKSEL	(_currentTime + 2)
00056a   2153     addwfc  0x53, 0, 0x1     	ADDWFC	(_currentTime + 2), W, B
00056c   6e02     movwf   0x2, 0           	MOVWF	r0x02
00056e   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000570   ffe9
000572   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
000574   fff3
000576   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000578   eccb     call    0x1996, 0        	CALL	__gptrget1
00057a   f00c
00057c   6e03     movwf   0x3, 0           	MOVWF	r0x03
00057e   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
000580   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000582   ffe5
000584   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000586   ffe9
000588   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
00058a   fff3
00058c   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00058e   ecf6     call    0x19ec, 0        	CALL	__gptrput1
000590   f00c
                                           ;	.line	73; testint.c	test_inc_current_time();
000592   ec06     call    0xc, 0           	CALL	_test_inc_current_time
000594   f000
                                           _00123_DS_:
                                           ;	.line	75; testint.c	refresh = 1;
000596   0e01     movlw   0x1              	MOVLW	0x01
000598   010f     movlb   0xf              	BANKSEL	_refresh
00059a   6f56     movwf   0x56, 0x1        	MOVWF	_refresh, B
00059c   010f     movlb   0xf              	BANKSEL	(_refresh + 1)
00059e   6b57     clrf    0x57, 0x1        	CLRF	(_refresh + 1), B
                                           ;	.line	76; testint.c	TMR0F = 0; 
0005a0   94f2     bcf     0xf2, 0x2, 0     	BCF	_INTCONbits, 2
                                           _00126_DS_:
0005a2   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0005a4   f003
0005a6   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0005a8   f002
0005aa   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0005ac   f001
0005ae   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0005b0   f000
0005b2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0005b4   ffd9
0005b6   cfe4     movff   0xfe4, 0xffb     	MOVFF	PREINC1, PCLATU
0005b8   fffb
0005ba   cfe4     movff   0xfe4, 0xffa     	MOVFF	PREINC1, PCLATH
0005bc   fffa
0005be   cfe4     movff   0xfe4, 0xfea     	MOVFF	PREINC1, FSR0H
0005c0   ffea
0005c2   cfe4     movff   0xfe4, 0xfe9     	MOVFF	PREINC1, FSR0L
0005c4   ffe9
0005c6   cfe4     movff   0xfe4, 0xff4     	MOVFF	PREINC1, PRODH
0005c8   fff4
0005ca   cfe4     movff   0xfe4, 0xff3     	MOVFF	PREINC1, PRODL
0005cc   fff3
0005ce   cfe4     movff   0xfe4, 0xfe0     	MOVFF	PREINC1, BSR
0005d0   ffe0
0005d2   cfe4     movff   0xfe4, 0xfd8     	MOVFF	PREINC1, STATUS
0005d4   ffd8
0005d6   cfe4     movff   0xfe4, 0xfe8     	MOVFF	PREINC1, WREG
0005d8   ffe8
0005da   0010     retfie  0                	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
0005dc   6177     cpfslt  0x77, 0x1        	DB	0x77, 0x61, 0x6b, 0x65, 0x20, 0x75, 0x70, 0x00
0005de   656b     cpfsgt  0x6b, 0x1        
0005e0   7520     btg     0x20, 0x2, 0x1   
0005e2   0070     dw      0x70             
                                           ; ; Starting pCode block
                                           __str_1:
0005e4   5e20     subwf   0x20, 0x1, 0     	DB	0x20, 0x5e, 0x00
0005e6   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 3340 (0x0d0c) bytes ( 2.55%)
                                           ;           	 1670 (0x0686) words
                                           ; udata size:	   22 (0x0016) bytes ( 0.57%)
                                           ; access size:	   22 (0x0016) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Mar 13 2012) (UNIX)
                                           ; This file was generated Tue Mar 20 12:17:50 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; TCPIP_Stack/LCDBlocking.c	void LCDErase(void)
001630   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001632   ffe5
001634   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001636   ffd9
001638   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00163a   ffe5
00163c   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00163e   ffe5
001640   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
001642   ffe5
001644   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
001646   ffe5
001648   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00164a   ffe5
00164c   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
00164e   ffe5
001650   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
001652   ffe5
001654   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
001656   ffe5
                                           ;	.line	395; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);
001658   0e01     movlw   0x1              	MOVLW	0x01
00165a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00165c   0e00     movlw   0                	MOVLW	0x00
00165e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001660   ec85     call    0x190a, 0        	CALL	_LCDWrite
001662   f00c
001664   0e02     movlw   0x2              	MOVLW	0x02
001666   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	396; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
001668   0e48     movlw   0x48             	MOVLW	0x48
00166a   6e00     movwf   0, 0             	MOVWF	r0x00
00166c   0e0d     movlw   0xd              	MOVLW	0x0d
00166e   6e01     movwf   0x1, 0           	MOVWF	r0x01
001670   6a02     clrf    0x2, 0           	CLRF	r0x02
001672   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00305_DS_:
001674   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
001676   f004
001678   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
00167a   f005
00167c   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
00167e   f006
001680   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
001682   f007
001684   0eff     movlw   0xff             	MOVLW	0xff
001686   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
001688   0eff     movlw   0xff             	MOVLW	0xff
00168a   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
00168c   0eff     movlw   0xff             	MOVLW	0xff
00168e   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
001690   0eff     movlw   0xff             	MOVLW	0xff
001692   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
001694   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
001696   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
001698   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
00169a   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
00169c   e1eb     bnz     0x1674           	BNZ	_00305_DS_
                                           ;	.line	399; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', 32);
00169e   0e00     movlw   0                	MOVLW	0x00
0016a0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0016a2   0e20     movlw   0x20             	MOVLW	0x20
0016a4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0016a6   0e20     movlw   0x20             	MOVLW	0x20
0016a8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0016aa   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0016ac   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0016ae   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0016b0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0016b2   ec4f     call    0x149e, 0        	CALL	_memset
0016b4   f00a
0016b6   0e05     movlw   0x5              	MOVLW	0x05
0016b8   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0016ba   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
0016bc   f007
0016be   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
0016c0   f006
0016c2   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
0016c4   f005
0016c6   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
0016c8   f004
0016ca   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0016cc   f003
0016ce   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0016d0   f002
0016d2   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0016d4   f001
0016d6   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0016d8   f000
0016da   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0016dc   ffd9
0016de   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; TCPIP_Stack/LCDBlocking.c	void LCDUpdate(void)
0005e8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0005ea   ffe5
0005ec   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0005ee   ffd9
0005f0   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0005f2   ffe5
0005f4   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0005f6   ffe5
0005f8   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0005fa   ffe5
0005fc   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
0005fe   ffe5
000600   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
000602   ffe5
000604   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
000606   ffe5
000608   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
00060a   ffe5
00060c   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
00060e   ffe5
000610   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
000612   ffe5
                                           ;	.line	337; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x02);
000614   0e02     movlw   0x2              	MOVLW	0x02
000616   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000618   0e00     movlw   0                	MOVLW	0x00
00061a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00061c   ec85     call    0x190a, 0        	CALL	_LCDWrite
00061e   f00c
000620   0e02     movlw   0x2              	MOVLW	0x02
000622   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	338; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
000624   0e48     movlw   0x48             	MOVLW	0x48
000626   6e00     movwf   0, 0             	MOVWF	r0x00
000628   0e0d     movlw   0xd              	MOVLW	0x0d
00062a   6e01     movwf   0x1, 0           	MOVWF	r0x01
00062c   6a02     clrf    0x2, 0           	CLRF	r0x02
00062e   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00225_DS_:
000630   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
000632   f004
000634   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
000636   f005
000638   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
00063a   f006
00063c   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
00063e   f007
000640   0eff     movlw   0xff             	MOVLW	0xff
000642   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
000644   0eff     movlw   0xff             	MOVLW	0xff
000646   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
000648   0eff     movlw   0xff             	MOVLW	0xff
00064a   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00064c   0eff     movlw   0xff             	MOVLW	0xff
00064e   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000650   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000652   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
000654   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
000656   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
000658   e1eb     bnz     0x630            	BNZ	_00225_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
00065a   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00257_DS_:
00065c   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
00065e   f001
000660   6a02     clrf    0x2, 0           	CLRF	r0x02
000662   0e00     movlw   0                	MOVLW	0x00
000664   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
000666   e102     bnz     0x66c            	BNZ	_00297_DS_
000668   0e10     movlw   0x10             	MOVLW	0x10
00066a   5c01     subwf   0x1, 0, 0        	SUBWF	r0x01, W
                                           _00297_DS_:
00066c   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
00066e   d057     bra     0x71e            	BRA	_00260_DS_
                                           ;	.line	345; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
000670   0e00     movlw   0                	MOVLW	LOW(_LCDText)
000672   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000674   6e01     movwf   0x1, 0           	MOVWF	r0x01
000676   6a02     clrf    0x2, 0           	CLRF	r0x02
000678   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
00067a   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00067c   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
00067e   ffe9
000680   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
000682   ffea
000684   cfef     movff   0xfef, 0x1       	MOVFF	INDF0, r0x01
000686   f001
000688   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00068a   e119     bnz     0x6be            	BNZ	_00232_DS_
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
00068c   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
00068e   f001
                                           _00253_DS_:
000690   c001     movff   0x1, 0x2         	MOVFF	r0x01, r0x02
000692   f002
000694   6a03     clrf    0x3, 0           	CLRF	r0x03
000696   0e00     movlw   0                	MOVLW	0x00
000698   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
00069a   e102     bnz     0x6a0            	BNZ	_00298_DS_
00069c   0e10     movlw   0x10             	MOVLW	0x10
00069e   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
                                           _00298_DS_:
0006a0   e20e     bc      0x6be            	BC	_00232_DS_
                                           ;	.line	349; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
0006a2   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0006a4   2401     addwf   0x1, 0, 0        	ADDWF	r0x01, W
0006a6   6e02     movwf   0x2, 0           	MOVWF	r0x02
0006a8   6a03     clrf    0x3, 0           	CLRF	r0x03
0006aa   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0006ac   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
0006ae   c002     movff   0x2, 0xfe9       	MOVFF	r0x02, FSR0L
0006b0   ffe9
0006b2   c003     movff   0x3, 0xfea       	MOVFF	r0x03, FSR0H
0006b4   ffea
0006b6   0e20     movlw   0x20             	MOVLW	0x20
0006b8   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
0006ba   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
0006bc   d7e9     bra     0x690            	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
0006be   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0006c0   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0006c2   6e01     movwf   0x1, 0           	MOVWF	r0x01
0006c4   6a02     clrf    0x2, 0           	CLRF	r0x02
0006c6   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0006c8   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0006ca   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
0006cc   ffe9
0006ce   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
0006d0   ffea
0006d2   cfef     movff   0xfef, 0x1       	MOVFF	INDF0, r0x01
0006d4   f001
0006d6   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0006d8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0006da   0e01     movlw   0x1              	MOVLW	0x01
0006dc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0006de   ec85     call    0x190a, 0        	CALL	_LCDWrite
0006e0   f00c
0006e2   0e02     movlw   0x2              	MOVLW	0x02
0006e4   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	353; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0006e6   0e55     movlw   0x55             	MOVLW	0x55
0006e8   6e01     movwf   0x1, 0           	MOVWF	r0x01
0006ea   6a02     clrf    0x2, 0           	CLRF	r0x02
0006ec   6a03     clrf    0x3, 0           	CLRF	r0x03
0006ee   6a04     clrf    0x4, 0           	CLRF	r0x04
                                           _00233_DS_:
0006f0   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
0006f2   f005
0006f4   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
0006f6   f006
0006f8   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
0006fa   f007
0006fc   c004     movff   0x4, 0x8         	MOVFF	r0x04, r0x08
0006fe   f008
000700   0eff     movlw   0xff             	MOVLW	0xff
000702   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
000704   0eff     movlw   0xff             	MOVLW	0xff
000706   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
000708   0eff     movlw   0xff             	MOVLW	0xff
00070a   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
00070c   0eff     movlw   0xff             	MOVLW	0xff
00070e   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
000710   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000712   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
000714   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
000716   1008     iorwf   0x8, 0, 0        	IORWF	r0x08, W
000718   e1eb     bnz     0x6f0            	BNZ	_00233_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
00071a   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
00071c   d79f     bra     0x65c            	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0xC0);
00071e   0ec0     movlw   0xc0             	MOVLW	0xc0
000720   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000722   0e00     movlw   0                	MOVLW	0x00
000724   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000726   ec85     call    0x190a, 0        	CALL	_LCDWrite
000728   f00c
00072a   0e02     movlw   0x2              	MOVLW	0x02
00072c   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	358; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
00072e   0e55     movlw   0x55             	MOVLW	0x55
000730   6e00     movwf   0, 0             	MOVWF	r0x00
000732   6a01     clrf    0x1, 0           	CLRF	r0x01
000734   6a02     clrf    0x2, 0           	CLRF	r0x02
000736   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00239_DS_:
000738   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
00073a   f004
00073c   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
00073e   f005
000740   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
000742   f006
000744   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
000746   f007
000748   0eff     movlw   0xff             	MOVLW	0xff
00074a   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
00074c   0eff     movlw   0xff             	MOVLW	0xff
00074e   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
000750   0eff     movlw   0xff             	MOVLW	0xff
000752   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
000754   0eff     movlw   0xff             	MOVLW	0xff
000756   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000758   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
00075a   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
00075c   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
00075e   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
000760   e1eb     bnz     0x738            	BNZ	_00239_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
000762   0e10     movlw   0x10             	MOVLW	0x10
000764   6e00     movwf   0, 0             	MOVWF	r0x00
                                           _00265_DS_:
000766   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
000768   f001
00076a   6a02     clrf    0x2, 0           	CLRF	r0x02
00076c   0e00     movlw   0                	MOVLW	0x00
00076e   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
000770   e102     bnz     0x776            	BNZ	_00299_DS_
000772   0e20     movlw   0x20             	MOVLW	0x20
000774   5c01     subwf   0x1, 0, 0        	SUBWF	r0x01, W
                                           _00299_DS_:
000776   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
000778   d057     bra     0x828            	BRA	_00269_DS_
                                           ;	.line	365; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
00077a   0e00     movlw   0                	MOVLW	LOW(_LCDText)
00077c   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
00077e   6e01     movwf   0x1, 0           	MOVWF	r0x01
000780   6a02     clrf    0x2, 0           	CLRF	r0x02
000782   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
000784   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
000786   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
000788   ffe9
00078a   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
00078c   ffea
00078e   cfef     movff   0xfef, 0x1       	MOVFF	INDF0, r0x01
000790   f001
000792   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000794   e119     bnz     0x7c8            	BNZ	_00246_DS_
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
000796   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
000798   f001
                                           _00261_DS_:
00079a   c001     movff   0x1, 0x2         	MOVFF	r0x01, r0x02
00079c   f002
00079e   6a03     clrf    0x3, 0           	CLRF	r0x03
0007a0   0e00     movlw   0                	MOVLW	0x00
0007a2   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
0007a4   e102     bnz     0x7aa            	BNZ	_00300_DS_
0007a6   0e20     movlw   0x20             	MOVLW	0x20
0007a8   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
                                           _00300_DS_:
0007aa   e20e     bc      0x7c8            	BC	_00246_DS_
                                           ;	.line	369; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
0007ac   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0007ae   2401     addwf   0x1, 0, 0        	ADDWF	r0x01, W
0007b0   6e02     movwf   0x2, 0           	MOVWF	r0x02
0007b2   6a03     clrf    0x3, 0           	CLRF	r0x03
0007b4   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0007b6   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
0007b8   c002     movff   0x2, 0xfe9       	MOVFF	r0x02, FSR0L
0007ba   ffe9
0007bc   c003     movff   0x3, 0xfea       	MOVFF	r0x03, FSR0H
0007be   ffea
0007c0   0e20     movlw   0x20             	MOVLW	0x20
0007c2   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
0007c4   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
0007c6   d7e9     bra     0x79a            	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
0007c8   0e00     movlw   0                	MOVLW	LOW(_LCDText)
0007ca   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0007cc   6e01     movwf   0x1, 0           	MOVWF	r0x01
0007ce   6a02     clrf    0x2, 0           	CLRF	r0x02
0007d0   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
0007d2   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0007d4   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
0007d6   ffe9
0007d8   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
0007da   ffea
0007dc   cfef     movff   0xfef, 0x1       	MOVFF	INDF0, r0x01
0007de   f001
0007e0   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0007e2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007e4   0e01     movlw   0x1              	MOVLW	0x01
0007e6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007e8   ec85     call    0x190a, 0        	CALL	_LCDWrite
0007ea   f00c
0007ec   0e02     movlw   0x2              	MOVLW	0x02
0007ee   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	373; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0007f0   0e55     movlw   0x55             	MOVLW	0x55
0007f2   6e01     movwf   0x1, 0           	MOVWF	r0x01
0007f4   6a02     clrf    0x2, 0           	CLRF	r0x02
0007f6   6a03     clrf    0x3, 0           	CLRF	r0x03
0007f8   6a04     clrf    0x4, 0           	CLRF	r0x04
                                           _00247_DS_:
0007fa   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
0007fc   f005
0007fe   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
000800   f006
000802   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
000804   f007
000806   c004     movff   0x4, 0x8         	MOVFF	r0x04, r0x08
000808   f008
00080a   0eff     movlw   0xff             	MOVLW	0xff
00080c   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
00080e   0eff     movlw   0xff             	MOVLW	0xff
000810   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
000812   0eff     movlw   0xff             	MOVLW	0xff
000814   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000816   0eff     movlw   0xff             	MOVLW	0xff
000818   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
00081a   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
00081c   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
00081e   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
000820   1008     iorwf   0x8, 0, 0        	IORWF	r0x08, W
000822   e1eb     bnz     0x7fa            	BNZ	_00247_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
000824   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000826   d79f     bra     0x766            	BRA	_00265_DS_
                                           _00269_DS_:
000828   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
00082a   f008
00082c   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
00082e   f007
000830   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
000832   f006
000834   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
000836   f005
000838   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
00083a   f004
00083c   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
00083e   f003
000840   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000842   f002
000844   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000846   f001
000848   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00084a   f000
00084c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00084e   ffd9
000850   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; TCPIP_Stack/LCDBlocking.c	void LCDInit(void)
000852   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000854   ffe5
000856   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000858   ffd9
00085a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00085c   ffe5
00085e   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000860   ffe5
000862   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000864   ffe5
000866   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000868   ffe5
00086a   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00086c   ffe5
00086e   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
000870   ffe5
000872   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
000874   ffe5
000876   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
000878   ffe5
00087a   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
00087c   ffe5
                                           ;	.line	211; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
00087e   0e00     movlw   0                	MOVLW	0x00
000880   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000882   0e20     movlw   0x20             	MOVLW	0x20
000884   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000886   0e20     movlw   0x20             	MOVLW	0x20
000888   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00088a   0e0f     movlw   0xf              	MOVLW	HIGH(_LCDText)
00088c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00088e   0e00     movlw   0                	MOVLW	LOW(_LCDText)
000890   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000892   ec4f     call    0x149e, 0        	CALL	_memset
000894   f00a
000896   0e05     movlw   0x5              	MOVLW	0x05
000898   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00089a   010f     movlb   0xf              	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; TCPIP_Stack/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
00089c   6b20     clrf    0x20, 0x1        	CLRF	(_LCDText + 32), B
                                           ;	.line	215; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
00089e   9090     bcf     0x90, 0, 0       	BCF	_LATHbits, 0
                                           ;	.line	216; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
0008a0   9290     bcf     0x90, 0x1, 0     	BCF	_LATHbits, 1
                                           ;	.line	220; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
0008a2   6a96     clrf    0x96, 0          	CLRF	_TRISE
                                           ;	.line	233; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
0008a4   9299     bcf     0x99, 0x1, 0     	BCF	_TRISHbits, 1
                                           ;	.line	234; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
0008a6   9499     bcf     0x99, 0x2, 0     	BCF	_TRISHbits, 2
                                           ;	.line	235; TCPIP_Stack/LCDBlocking.c	LCD_E_TRIS = 0;
0008a8   9099     bcf     0x99, 0, 0       	BCF	_TRISHbits, 0
                                           ;	.line	239; TCPIP_Stack/LCDBlocking.c	DelayMs(40);
0008aa   0ea0     movlw   0xa0             	MOVLW	0xa0
0008ac   6e00     movwf   0, 0             	MOVWF	r0x00
0008ae   0e09     movlw   0x9              	MOVLW	0x09
0008b0   6e01     movwf   0x1, 0           	MOVWF	r0x01
0008b2   0e01     movlw   0x1              	MOVLW	0x01
0008b4   6e02     movwf   0x2, 0           	MOVWF	r0x02
0008b6   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00143_DS_:
0008b8   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
0008ba   f004
0008bc   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
0008be   f005
0008c0   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
0008c2   f006
0008c4   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
0008c6   f007
0008c8   0eff     movlw   0xff             	MOVLW	0xff
0008ca   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
0008cc   0eff     movlw   0xff             	MOVLW	0xff
0008ce   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
0008d0   0eff     movlw   0xff             	MOVLW	0xff
0008d2   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0008d4   0eff     movlw   0xff             	MOVLW	0xff
0008d6   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
0008d8   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0008da   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
0008dc   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
0008de   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
0008e0   e1eb     bnz     0x8b8            	BNZ	_00143_DS_
                                           ;	.line	247; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = 0;
0008e2   9490     bcf     0x90, 0x2, 0     	BCF	_LATHbits, 2
                                           ;	.line	249; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = 0x03;
0008e4   0e03     movlw   0x3              	MOVLW	0x03
0008e6   6e8d     movwf   0x8d, 0          	MOVWF	_LATE
0008e8   0000     nop                      	nop 
0008ea   0000     nop                      	nop 
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
0008ec   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00191_DS_:
0008ee   c000     movff   0, 0x1           	MOVFF	r0x00, r0x01
0008f0   f001
0008f2   6a02     clrf    0x2, 0           	CLRF	r0x02
0008f4   0e00     movlw   0                	MOVLW	0x00
0008f6   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
0008f8   e102     bnz     0x8fe            	BNZ	_00220_DS_
0008fa   0e03     movlw   0x3              	MOVLW	0x03
0008fc   5c01     subwf   0x1, 0, 0        	SUBWF	r0x01, W
                                           _00220_DS_:
0008fe   e239     bc      0x972            	BC	_00194_DS_
                                           ;	.line	266; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
000900   8090     bsf     0x90, 0, 0       	BSF	_LATHbits, 0
                                           ;	.line	267; TCPIP_Stack/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
000902   0e11     movlw   0x11             	MOVLW	0x11
000904   6e01     movwf   0x1, 0           	MOVWF	r0x01
000906   6a02     clrf    0x2, 0           	CLRF	r0x02
000908   6a03     clrf    0x3, 0           	CLRF	r0x03
00090a   6a04     clrf    0x4, 0           	CLRF	r0x04
                                           _00155_DS_:
00090c   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
00090e   f005
000910   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
000912   f006
000914   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
000916   f007
000918   c004     movff   0x4, 0x8         	MOVFF	r0x04, r0x08
00091a   f008
00091c   0eff     movlw   0xff             	MOVLW	0xff
00091e   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
000920   0eff     movlw   0xff             	MOVLW	0xff
000922   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
000924   0eff     movlw   0xff             	MOVLW	0xff
000926   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000928   0eff     movlw   0xff             	MOVLW	0xff
00092a   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
00092c   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
00092e   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
000930   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
000932   1008     iorwf   0x8, 0, 0        	IORWF	r0x08, W
000934   e1eb     bnz     0x90c            	BNZ	_00155_DS_
                                           ;	.line	268; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
000936   9090     bcf     0x90, 0, 0       	BCF	_LATHbits, 0
                                           ;	.line	269; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
000938   0e48     movlw   0x48             	MOVLW	0x48
00093a   6e01     movwf   0x1, 0           	MOVWF	r0x01
00093c   0e0d     movlw   0xd              	MOVLW	0x0d
00093e   6e02     movwf   0x2, 0           	MOVWF	r0x02
000940   6a03     clrf    0x3, 0           	CLRF	r0x03
000942   6a04     clrf    0x4, 0           	CLRF	r0x04
                                           _00161_DS_:
000944   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
000946   f005
000948   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
00094a   f006
00094c   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
00094e   f007
000950   c004     movff   0x4, 0x8         	MOVFF	r0x04, r0x08
000952   f008
000954   0eff     movlw   0xff             	MOVLW	0xff
000956   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
000958   0eff     movlw   0xff             	MOVLW	0xff
00095a   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00095c   0eff     movlw   0xff             	MOVLW	0xff
00095e   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000960   0eff     movlw   0xff             	MOVLW	0xff
000962   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
000964   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000966   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
000968   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
00096a   1008     iorwf   0x8, 0, 0        	IORWF	r0x08, W
00096c   e1eb     bnz     0x944            	BNZ	_00161_DS_
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
00096e   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000970   d7be     bra     0x8ee            	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x38);
000972   0e38     movlw   0x38             	MOVLW	0x38
000974   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000976   0e00     movlw   0                	MOVLW	0x00
000978   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00097a   ec85     call    0x190a, 0        	CALL	_LCDWrite
00097c   f00c
00097e   0e02     movlw   0x2              	MOVLW	0x02
000980   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	297; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
000982   0e55     movlw   0x55             	MOVLW	0x55
000984   6e00     movwf   0, 0             	MOVWF	r0x00
000986   6a01     clrf    0x1, 0           	CLRF	r0x01
000988   6a02     clrf    0x2, 0           	CLRF	r0x02
00098a   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00167_DS_:
00098c   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
00098e   f004
000990   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
000992   f005
000994   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
000996   f006
000998   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
00099a   f007
00099c   0eff     movlw   0xff             	MOVLW	0xff
00099e   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
0009a0   0eff     movlw   0xff             	MOVLW	0xff
0009a2   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
0009a4   0eff     movlw   0xff             	MOVLW	0xff
0009a6   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0009a8   0eff     movlw   0xff             	MOVLW	0xff
0009aa   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
0009ac   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0009ae   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
0009b0   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
0009b2   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
0009b4   e1eb     bnz     0x98c            	BNZ	_00167_DS_
                                           ;	.line	300; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
0009b6   0e06     movlw   0x6              	MOVLW	0x06
0009b8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009ba   0e00     movlw   0                	MOVLW	0x00
0009bc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009be   ec85     call    0x190a, 0        	CALL	_LCDWrite
0009c0   f00c
0009c2   0e02     movlw   0x2              	MOVLW	0x02
0009c4   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	301; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0009c6   0e55     movlw   0x55             	MOVLW	0x55
0009c8   6e00     movwf   0, 0             	MOVWF	r0x00
0009ca   6a01     clrf    0x1, 0           	CLRF	r0x01
0009cc   6a02     clrf    0x2, 0           	CLRF	r0x02
0009ce   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00173_DS_:
0009d0   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
0009d2   f004
0009d4   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
0009d6   f005
0009d8   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
0009da   f006
0009dc   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
0009de   f007
0009e0   0eff     movlw   0xff             	MOVLW	0xff
0009e2   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
0009e4   0eff     movlw   0xff             	MOVLW	0xff
0009e6   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
0009e8   0eff     movlw   0xff             	MOVLW	0xff
0009ea   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0009ec   0eff     movlw   0xff             	MOVLW	0xff
0009ee   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
0009f0   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0009f2   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
0009f4   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
0009f6   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
0009f8   e1eb     bnz     0x9d0            	BNZ	_00173_DS_
                                           ;	.line	304; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
0009fa   0e0c     movlw   0xc              	MOVLW	0x0c
0009fc   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0009fe   0e00     movlw   0                	MOVLW	0x00
000a00   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a02   ec85     call    0x190a, 0        	CALL	_LCDWrite
000a04   f00c
000a06   0e02     movlw   0x2              	MOVLW	0x02
000a08   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	305; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
000a0a   0e55     movlw   0x55             	MOVLW	0x55
000a0c   6e00     movwf   0, 0             	MOVWF	r0x00
000a0e   6a01     clrf    0x1, 0           	CLRF	r0x01
000a10   6a02     clrf    0x2, 0           	CLRF	r0x02
000a12   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00179_DS_:
000a14   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
000a16   f004
000a18   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
000a1a   f005
000a1c   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
000a1e   f006
000a20   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
000a22   f007
000a24   0eff     movlw   0xff             	MOVLW	0xff
000a26   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
000a28   0eff     movlw   0xff             	MOVLW	0xff
000a2a   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
000a2c   0eff     movlw   0xff             	MOVLW	0xff
000a2e   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
000a30   0eff     movlw   0xff             	MOVLW	0xff
000a32   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000a34   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000a36   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
000a38   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
000a3a   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
000a3c   e1eb     bnz     0xa14            	BNZ	_00179_DS_
                                           ;	.line	308; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);	
000a3e   0e01     movlw   0x1              	MOVLW	0x01
000a40   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a42   0e00     movlw   0                	MOVLW	0x00
000a44   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000a46   ec85     call    0x190a, 0        	CALL	_LCDWrite
000a48   f00c
000a4a   0e02     movlw   0x2              	MOVLW	0x02
000a4c   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           ;	.line	309; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
000a4e   0e48     movlw   0x48             	MOVLW	0x48
000a50   6e00     movwf   0, 0             	MOVWF	r0x00
000a52   0e0d     movlw   0xd              	MOVLW	0x0d
000a54   6e01     movwf   0x1, 0           	MOVWF	r0x01
000a56   6a02     clrf    0x2, 0           	CLRF	r0x02
000a58   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00185_DS_:
000a5a   c000     movff   0, 0x4           	MOVFF	r0x00, r0x04
000a5c   f004
000a5e   c001     movff   0x1, 0x5         	MOVFF	r0x01, r0x05
000a60   f005
000a62   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
000a64   f006
000a66   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
000a68   f007
000a6a   0eff     movlw   0xff             	MOVLW	0xff
000a6c   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
000a6e   0eff     movlw   0xff             	MOVLW	0xff
000a70   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
000a72   0eff     movlw   0xff             	MOVLW	0xff
000a74   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
000a76   0eff     movlw   0xff             	MOVLW	0xff
000a78   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000a7a   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000a7c   1005     iorwf   0x5, 0, 0        	IORWF	r0x05, W
000a7e   1006     iorwf   0x6, 0, 0        	IORWF	r0x06, W
000a80   1007     iorwf   0x7, 0, 0        	IORWF	r0x07, W
000a82   e1eb     bnz     0xa5a            	BNZ	_00185_DS_
000a84   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
000a86   f008
000a88   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
000a8a   f007
000a8c   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
000a8e   f006
000a90   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
000a92   f005
000a94   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
000a96   f004
000a98   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
000a9a   f003
000a9c   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000a9e   f002
000aa0   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000aa2   f001
000aa4   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000aa6   f000
000aa8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000aaa   ffd9
000aac   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; TCPIP_Stack/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
00190a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00190c   ffe5
00190e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001910   ffd9
001912   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
001914   ffe5
001916   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001918   ffe5
00191a   0e02     movlw   0x2              	MOVLW	0x02
00191c   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00191e   f000
001920   0e03     movlw   0x3              	MOVLW	0x03
001922   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
001924   f001
                                           ;	.line	97; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
001926   6a96     clrf    0x96, 0          	CLRF	_TRISE
                                           ;	.line	110; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
001928   9499     bcf     0x99, 0x2, 0     	BCF	_TRISHbits, 2
                                           ;	.line	111; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
00192a   9299     bcf     0x99, 0x1, 0     	BCF	_TRISHbits, 1
                                           ;	.line	112; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
00192c   9290     bcf     0x90, 0x1, 0     	BCF	_LATHbits, 1
                                           ;	.line	113; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = RS;
00192e   5000     movf    0, 0, 0          	MOVF	r0x00, W
001930   0b01     andlw   0x1              	ANDLW	0x01
001932   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
001934   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
001936   6ef4     movwf   0xf4, 0          	MOVWF	PRODH
001938   5090     movf    0x90, 0, 0       	MOVF	_LATHbits, W
00193a   0bfb     andlw   0xfb             	ANDLW	0xfb
00193c   10f4     iorwf   0xf4, 0, 0       	IORWF	PRODH, W
00193e   6e90     movwf   0x90, 0          	MOVWF	_LATHbits
                                           ;	.line	140; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = Data;
001940   c001     movff   0x1, 0xf8d       	MOVFF	r0x01, _LATE
001942   ff8d
001944   0000     nop                      	nop 
001946   0000     nop                      	nop 
                                           ;	.line	155; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
001948   8090     bsf     0x90, 0, 0       	BSF	_LATHbits, 0
00194a   0000     nop                      	nop 
00194c   0000     nop                      	nop 
00194e   0000     nop                      	nop 
001950   0000     nop                      	nop 
001952   0000     nop                      	nop 
001954   0000     nop                      	nop 
001956   0000     nop                      	nop 
001958   0000     nop                      	nop 
00195a   0000     nop                      	nop 
                                           ;	.line	165; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
00195c   9090     bcf     0x90, 0, 0       	BCF	_LATHbits, 0
00195e   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
001960   f001
001962   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
001964   f000
001966   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001968   ffd9
00196a   0012     return  0                	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
